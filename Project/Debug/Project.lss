
AVRASM ver. 2.2.8  C:\Users\nsoo1\OneDrive\Documents\UniDocuments\COMP9032\Project\Project\main.asm Thu Nov 14 13:49:16 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
C:\Users\nsoo1\OneDrive\Documents\UniDocuments\COMP9032\Project\Project\main.asm(15): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
C:\Users\nsoo1\OneDrive\Documents\UniDocuments\COMP9032\Project\Project\main.asm(15): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Project.asm
                                 ;
                                 ; Created: 5/11/2024 11:29:53 AM
                                 ; Author : nsoo1
                                 ;
                                 
                                      ; Patient struct ;
                                 ;..........................;
                                 ;   Patient ID - 2 bytes   ;
                                 ;..........................;
                                 ;  Patient Name - 8 bytes  ;
                                 ;..........................;
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ STROBE = 1
                                 
                                 .equ PORTCDIR				= 0b11110000
                                 .equ PORTBDIR				= 0b00001111
                                 .equ INITCOLMASK			= 0b01111111
                                 .equ INITROWMASK			= 0b00001000
                                 .equ CHECKROWMASK			= 0b00001111
                                 
                                 .equ KEYPADSIZE				= 4
                                 .equ NSTATES				= 3
                                 .equ LARGESTDIGIT			= 9
                                 
                                 .equ A						= 3
                                 .equ B						= 7
                                 .equ C						= 11
                                 .equ D						= 15
                                 .equ zero_key				= 13
                                 .equ nine					= 10
                                 .equ null					= 0xFF
                                 
                                 .equ P_SIZE					= 10    ; Size of patient struct: 10 bytes
                                 .equ INIT_ID				= 100   ; Patient IDs will start from 100
                                 
                                 .equ max_name				= 8
                                 
                                 .def w						= r16	; working register
                                 .def entry_mode				= r2
                                 .def new_name_cur			= r3
                                 .def key_pressed			= r4
                                 .def zero					= r5	; register always set to 0
                                 
                                 .def last_key_pressed		= r6
                                 .def times_key_pressed		= r7
                                 .def is_timer_active		= r8
                                 
                                 .def arg0					= r10
                                 .def arg1					= r11
                                 .def arg2					= r12
                                 
                                 .dseg								; Start the data segment
                                 .org 0x0200							; from address 0x0200
                                 
000200                           new_name:					.byte max_name            ; Queue functions assume 8 bytes for name
000208                           num_patients:				.byte 2
00020a                           init_pid:					.byte 2                                  
00020c                           first_patient:				.byte 2                 
00020e                           last_patient:				.byte 2  ; Reserve space for Queue variables in data memory
000210                           is_keypad_timeout:			.byte 1
                                 
000211                           pb0_state:					.byte 1
000212                           pb1_state:					.byte 1
000213                           which_pb:					.byte 1
                                 
                                 
                                 .cseg
                                 .org 0x0000
000000 c05b                      	rjmp	reset
000001 0000                      	nop
000002 940c 021f                 	jmp		pb0_ih
000004 940c 0279                 	jmp		pb1_ih
                                 
                                 .org OVF3addr
000046 940c 02e2                 	jmp		keypad_timeout
                                 .org OVF4addr
00005a 940c 02b8                 	jmp		pb_timeout
                                 
                                 
                                 ; expects digit in r19, ASCII '0' in r23
                                 .macro display_digit
                                 	add r19, r23				; Convert to ASCII ('0' = 0x30)
                                 	rcall WRITE
                                 .endmacro
                                 
                                 ;expects dividend in r26 and divisor in r25
                                 .macro divide
                                 	clr r27                     ; Clear quotient register
                                 divide_loop:
                                     cp r26, r25                 ; Compare r26 (dividend) with r25 (divisor)
                                     brlo divide_done            ; If r26 < r25, exit loop
                                 
                                     sub r26, r25				; Subtract divisor from dividend
                                     inc r27						; Increment quotient
                                     rjmp divide_loop            ; Repeat until r26 < r28
                                 divide_done:
                                 	nop
                                 .endmacro
                                 
                                 ; changes registers:
                                 ; zl
                                 ; zh
                                 .macro debounce
                                 	ldi zl, 0b11111111
                                 	ldi zh, 0b11111111
                                 
                                 debounce_loop:
                                 	nop
                                 	subi zl, 1
                                 	sbci zh, 0
                                 	brne debounce_loop
                                 .endmacro
                                 
                                 ; Reads name from new_name variable in data memory,
                                 ; stores it in newest patient struct on queue.
                                 ; Assumes address of patient_name stored in Y.
                                 .macro read_name
                                 	ldi ZH, high(new_name)
                                 	ldi ZL, low(new_name)
                                 	ldi r26, 8
                                 read_loop:
                                 	ld  r27, Z+
                                 	st  Y+, r27
                                 	dec r26
                                 	cpi r26, 0
                                 	brne read_loop                     ; Continue reading up to 8 chars
                                 .endmacro 
                                 
                                 ; init patient queue
                                 ; call first before any registers are used
                                 .macro init_queue
                                 	ldi  YH, high(num_patients)                      
                                 	ldi  YL, low(num_patients)
                                 	clr  r24
                                 	clr  r25
                                 	st   Y+, r24                       ; Init num_patients = 0
                                 	st   Y+, r25
                                 	ldi  r24, INIT_ID-1				   ; Init patient ID
                                 	st   Y, r24
                                 	adiw Y, 2
                                     mov  r24, YL
                                 	mov  r25, YH
                                 	adiw r24, 8                        ; Adjust num bytes here if needed
                                 	st   Y+, r24
                                 	st   Y+, r25                       ; init pointer to first patient
                                     ldi  r25, high(init_pid)
                                 	ldi  r24, low(init_pid)
                                 	st   Y+, r24
                                 	st   Y, r25                        ; init pointer to last patient
                                 .endmacro
                                 
                                 ; all subroutines expects parameters in r19
                                 ; Sub routines:
                                 ; INTIALISE_LCD			: initialises LCD display
                                 ; LCD_DISPLAY_MODE		: clears the LCD display and sets it to display mode
                                 ; DISPLAY_BOTTOM_LEFT	: moves the cursor to bottom left
                                 ; DISPLAY_NUMBER_RIGHT	: takes unsigned int as parameter in r19 and displays bottom right aligned number
                                 ; LCD_ENTRY_MODE		: clears the LCD display and sets it to entry mode
                                 ; ENTRY_MESSAGE			: takes unsigned int as parameter in r19 and displays descriptive message showing patient number
                                 ; BACKSPACE				: delete 1 char from patient input
                                 ; WRITE					: write 1 char to LCD at current cursor position
                                 ; decimal_conversion	: shouldn't need to use this since i integrated the decimal conversion into all the LCD places,
                                 ;						: ENTRY_MESSAGE and DISPLAY_NUMBER_RIGHT should cover all use cases for displaying numbers on LCD
                                 ; Replace with your application code
                                 .macro set_LCD_RS
                                 	sbi PORTA, LCD_RS
                                 .endmacro
                                 .macro clr_LCD_RS
                                 	cbi PORTA, LCD_RS
                                 .endmacro
                                 
                                 .macro set_LCD_E
                                 	sbi PORTA, LCD_E
                                 .endmacro
                                 .macro clr_LCD_E
                                 	cbi PORTA, LCD_E
                                 .endmacro
                                 
                                 .macro set_LCD_RW
                                 	sbi PORTA, LCD_RW
                                 .endmacro
                                 .macro clr_LCD_RW
                                 	cbi PORTA, LCD_RW
                                 .endmacro
                                 
                                 .macro set_strobe
                                 	sbi PORTA, STROBE
                                 .endmacro
                                 .macro clr_strobe
                                 	cbi PORTA, STROBE
                                 .endmacro
                                 
                                 .macro lcd_write_cmd		; set LCD instructions, does not wait for BF
                                 	out PORTF, r16			; set r16 port
                                 	clr_LCD_RS
                                 	clr_LCD_RW				; RS = 0, RW = 0 for a command write
                                 	nop
                                 	set_LCD_E		
                                 	nop
                                 	nop
                                 	nop
                                 	clr_LCD_E
                                 	nop
                                 	nop
                                 	nop
                                 .endmacro
                                 
                                 .macro lcd_write_data		; write r16 to LCD, waits for BF
                                 	out PORTF, r19			; set r16 port
                                 	set_LCD_RS
                                 	clr_LCD_RW				; RS = 1, RW = 0 for r16 write
                                 	nop
                                 	set_LCD_E		;
                                 	nop
                                 	nop
                                 	nop
                                 	clr_LCD_E
                                 	nop
                                 	nop
                                 	nop
                                 .endmacro
                                 
                                 .macro lcd_wait_busy		; read from LCD until BF is clear
                                 	clr r17
                                 	out DDRF, r17			; LCD port input
                                 	clr_LCD_RS
                                 	set_LCD_RW				; RS = 0, RW = 1, cmd port read
                                 busy:
                                 	nop						
                                 	set_LCD_E				; turn on enable pin
                                 	nop						; r16 delay
                                 	nop
                                 	nop
                                 	in r17, PINF			; read value from LCD
                                 	clr_LCD_E				; clear enable pin
                                 	sbrc r17, 7			; skip next if busy flag not set
                                 	rjmp busy				; else loop
                                 
                                 	nop
                                 	nop
                                 	nop
                                 	clr_LCD_RS
                                 	clr_LCD_RW				; RS, RW = 0, IR write
                                 	ser r17
                                 	out DDRF, r17			; LCD port output
                                 	nop
                                 	nop
                                 	nop
                                 .endmacro
                                 
                                 .macro delay				; delay for 1us
                                 loop1:
                                 	ldi r17, 3				; 1
                                 loop2:
                                 	dec r17				; 1
                                 	nop						; 1
                                 	brne loop2				; 2 taken, 1 not ----> inner loop total is 11 cycles
                                 	subi r18, 1				; 1
                                 	sbci r19, 0				; 1
                                 	brne loop1				; 2 taken, each outer iteration is 11 + 1 + 1 + 1 + 2 = 16 clock cycles at 16Mhz = 1us
                                 .endmacro
                                 
                                 ;______________________________________________________________________
                                 ; INITIALISE
                                 ;______________________________________________________________________
                                 reset:
00005c e0d2
00005d e0c8
00005e 2788
00005f 2799
000060 9389
000061 9399
000062 e683
000063 8388
000064 9622
000065 2f8c
000066 2f9d
000067 9608
000068 9389
000069 9399
00006a e092
00006b e08a
00006c 9389
00006d 8398                      	init_queue
00006e d29b                      	rcall	INITIALISE_LCD
00006f d3a6                      	rcall	LCD_DISPLAY_MODE
000070 d134                      	rcall	clear_name
                                 
000071 2455                      	clr		zero
                                 
000072 ef00                      	ldi		w, PORTCDIR					; initialise pin directions
000073 b907                      	out		DDRC, w
000074 e00f                      	ldi		w, PORTBDIR
000075 b904                      	out		DDRB, w
                                 
000076 ef0f                      	ldi		w, null						; initialise last key pressed
000077 2e60                      	mov		last_key_pressed, w
                                 
000078 2477                      	clr		times_key_pressed			; initialise times last key pressed
000079 2422                      	clr		entry_mode
                                 
00007a e002                      	ldi		w, high(new_name)
00007b 2ea0                      	mov		arg0, w
                                 
00007c e000                      	ldi		w, low(new_name)
00007d 2eb0                      	mov		arg1, w
                                 
00007e e008                      	ldi		w, max_name
00007f 2ec0                      	mov		arg2, w
                                 
000080 d0b8                      	rcall	initialise_array
                                 
000081 2433                      	clr		new_name_cur
000082 2488                      	clr		is_timer_active
                                 
000083 e000                      	ldi		w, 0b00000000
000084 9300 0090                 	sts		TCCR3A, w
000086 e000                      	ldi		w, 0b00000000
000087 9300 0091                 	sts		TCCR3B, w
                                 
000089 9250 0071                 	sts		TIMSK3, zero
                                 
00008b e0f2                      	ldi		zh, high(is_keypad_timeout)
00008c e1e0                      	ldi		zl, low(is_keypad_timeout)
00008d 8250                      	st		z, zero
                                 
00008e 9478                      	sei
                                 
                                 ;______________________________________________________________________
                                 ; MAIN LOOP
                                 ;______________________________________________________________________
                                 loop:
00008f d0d3                      	rcall	scan_keypad					; poll until key is pressed then return key index in r24
000090 2e48                      	mov		key_pressed, r24
                                 
000091 9250 0091                 	sts		TCCR3B, zero
000093 9250 0071                 	sts		TIMSK3, zero					; disable keypad timeout temporarily
                                 
000095 e0f2                      	ldi		zh, high(is_keypad_timeout)
000096 e1e0                      	ldi		zl, low(is_keypad_timeout)
000097 8100                      	ld		w, z
000098 1505                      	cp		w, zero
000099 f031                      	breq	no_timeout
00009a 8250                      	st		z, zero
00009b 9433                      	inc		new_name_cur					; new_name_cur++
00009c ef0f                      	ldi		w, null
00009d 2e60                      	mov		last_key_pressed, w				; last_key_pressed = null
00009e 2477                      	clr		times_key_pressed				; times_key_pressed = 0
00009f 2488                      	clr		is_timer_active
                                 
                                 
                                 no_timeout:
                                 	;	if entry_mode is false and key_pressed == 'A'
                                 	;		enter entry mode
                                 							
0000a0 1425                      	cp		entry_mode, zero
0000a1 f439                      	brne	not_display_mode
0000a2 e003                      	ldi		w, A
0000a3 1640                      	cp		key_pressed, w
0000a4 f421                      	brne	not_display_mode
0000a5 9423                      	inc		entry_mode
0000a6 d4a3                      	rcall	LCD_ENTRY_MODE
0000a7 d3c0                      	rcall	DISPLAY_BOTTOM_LEFT
0000a8 c085                      	rjmp	end_process_key
                                 
                                 not_display_mode:
                                 	;	else if entry_mode is true
                                 	;		handle keys which are not 'A'
0000a9 1425                      	cp		entry_mode, zero
0000aa f0e1                      	breq	to_end_process_key
                                 	;		if new_name_cur != 0 and key_pressed == 'B'
                                 	;			backspace button is pressed
0000ab 1435                      	cp		new_name_cur, zero
0000ac f079                      	breq	not_backspace
0000ad e007                      	ldi		w, B
0000ae 1640                      	cp		key_pressed, w
0000af f461                      	brne	not_backspace
0000b0 2488                      	clr		is_timer_active					; keypad_timer_stop()
0000b1 943a                      	dec		new_name_cur					; new_name_cur --
                                 	
0000b2 e0f2                      	ldi		zh, high(new_name)				; new_name[new_name_cur] = 0
0000b3 e0e0                      	ldi		zl, low(new_name)
                                 
0000b4 0de3                      	add		zl, new_name_cur
0000b5 1df5                      	adc		zh, zero
                                 
0000b6 8250                      	st		z, zero
                                 
0000b7 d54a                      	rcall	BACKSPACE
                                 
0000b8 ef0f                      	ldi		w, null							; last_key_pressed = null
0000b9 2e60                      	mov		last_key_pressed, w
0000ba 2477                      	clr		times_key_pressed				; times_key_pressed = 0
0000bb c072                      	rjmp	end_process_key
                                 
                                 not_backspace:
                                 	;		else if key_pressed == 'C'
                                 	;		clear button is pressed
0000bc e00b                      	ldi		w, C
0000bd 1640                      	cp		key_pressed, w
0000be f449                      	brne	not_clear
0000bf 2488                      	clr		is_timer_active					; keypad_timer_stop()
0000c0 2433                      	clr		new_name_cur					; new_name_cur = 0
                                 	
0000c1 d077                      	rcall	initialise_array
0000c2 d487                      	rcall	LCD_ENTRY_MODE
0000c3 d3a4                      	rcall	DISPLAY_BOTTOM_LEFT
                                 
0000c4 ef0f                      	ldi		w, null							; last_key_pressed = null
0000c5 2e60                      	mov		last_key_pressed, w
0000c6 2477                      	clr		times_key_pressed				; times_key_pressed = 0
                                 to_end_process_key:
0000c7 c066                      	rjmp	end_process_key
                                 
                                 not_clear:
                                 	;		else if key_pressed == 'D'
                                 	;			enter button is pressed
0000c8 e00f                      	ldi		w, D
0000c9 1640                      	cp		key_pressed, w
0000ca f519                      	brne	not_enter
                                 
0000cb d0f2                      	rcall	enqueue
0000cc d349                      	rcall	LCD_DISPLAY_MODE
                                 
                                 	; if its the first patient then push to display and enable pb0
0000cd e0f2                      	ldi		zh, high(num_patients)
0000ce e0e8                      	ldi		zl, low(num_patients)
0000cf 8100                      	ld		w, z
0000d0 3001                      	cpi		w, 1
0000d1 f469                      	brne	not_first_patient
                                 
                                 	; enable pb0 and reset pb0 state
0000d2 e0f2                      	ldi		zh, high(pb0_state)
0000d3 e1e1                      	ldi		zl, low(pb0_state)
0000d4 e000                      	ldi		w, 0
0000d5 8300                      	st		z, w
                                 
0000d6 9100 0069                 	lds		w, EICRA
0000d8 7f0c                      	andi	w, 0b11111100
0000d9 6002                      	ori		w, (0b10 << ISC00)
0000da 9300 0069                 	sts		EICRA, w
                                 
0000dc b30d                      	in		w, EIMSK
0000dd 6001                      	ori		w, (1 << INT0)
0000de bb0d                      	out		EIMSK, w
                                 
                                 not_first_patient:
0000df d5f5                      	rcall	display_front_patient
                                 
0000e0 2488                      	clr		is_timer_active					; keypad_timer_stop()
0000e1 e002                      	ldi		w, high(new_name)				; initialise_array(new_name, 8)
0000e2 2ea0                      	mov		arg0, w
                                 
0000e3 e000                      	ldi		w, low(new_name)
0000e4 2eb0                      	mov		arg1, w
                                 
0000e5 e008                      	ldi		w, max_name
0000e6 2ec0                      	mov		arg2, w
                                 
0000e7 d051                      	rcall	initialise_array
                                 
0000e8 2433                      	clr		new_name_cur					; new_name_cur = 0
0000e9 ef0f                      	ldi		w, null							; last_key_pressed = null
0000ea 2e60                      	mov		last_key_pressed, w
0000eb 2477                      	clr		times_key_pressed				; times_key_pressed = 0
0000ec 2422                      	clr		entry_mode						; entry_mode = false
0000ed c040                      	rjmp	end_process_key
                                 
                                 not_enter:
                                 	;		else if key_pressed == 'A'
                                 	;			do nothing
0000ee e003                      	ldi		w, A
0000ef 1640                      	cp		key_pressed, w
0000f0 f409                      	brne	not_nothing1
0000f1 c03c                      	rjmp	end_process_key
                                 
                                 not_nothing1:
                                 	;		else if key_pressed is on the bottom row
                                 	;			do nothing
0000f2 e00b                      	ldi		w, C
0000f3 9503                      	inc		w
0000f4 1640                      	cp		key_pressed, w
0000f5 f008                      	brlo	not_nothing2
0000f6 c037                      	rjmp	end_process_key
                                 
                                 not_nothing2:
                                 	;		else if key_pressed == '1'
                                 	;			do nothing
0000f7 1445                      	cp		key_pressed, zero
0000f8 f409                      	brne	not_nothing3
0000f9 c034                      	rjmp	end_process_key
                                 
                                 not_nothing3:
                                 	;		else if new_name_cur < 8
0000fa e008                      	ldi		w, max_name
0000fb 1630                      	cp		new_name_cur, w
0000fc f650                      	brsh	to_end_process_key
0000fd 2488                      	clr		is_timer_active					; keypad_timer_restart()
0000fe 9483                      	inc		is_timer_active
0000ff 9250 0095                 	sts		TCNT3h, zero
000101 9250 0094                 	sts		TCNT3l, zero
                                 	;			if times_key_pressed == 0
                                 	;				first input key pressed
000103 1475                      	cp		times_key_pressed, zero
000104 f419                      	brne	not_first_key
000105 2c64                      	mov		last_key_pressed, key_pressed	; last_key_presed = key_pressed
000106 9473                      	inc		times_key_pressed				; times_key_pressed = 1
000107 c026                      	rjmp	end_process_key
                                 
                                 not_first_key:
                                 	;			else if last_key_pressed == key_pressed
                                 	;				cycle between letters on the same key
000108 1464                      	cp		last_key_pressed, key_pressed
000109 f499                      	brne	not_same_key
00010a 9473                      	inc		times_key_pressed
                                 	;				if key_pressed == '9' and times_key_pressed == 5
                                 	;					wrap the number of times key is pressed
00010b e00a                      	ldi		w, nine
00010c 1640                      	cp		key_pressed, w
00010d f431                      	brne	not_nine_wrap
00010e e005                      	ldi		w, 5
00010f 1670                      	cp		times_key_pressed, w
000110 f419                      	brne	not_nine_wrap
000111 2477                      	clr		times_key_pressed				; times_key_pressed = 1
000112 9473                      	inc		times_key_pressed
000113 c008                      	rjmp	end_key_wrap
                                 	;				else if key_pressed != '9' and times_key_pressed == 4 
                                 	;					wrap the number of times key is pressed
                                 not_nine_wrap:
000114 e00a                      	ldi		w, nine
000115 1640                      	cp		key_pressed, w
000116 f029                      	breq	end_key_wrap
000117 e004                      	ldi		w, 4
000118 1670                      	cp		times_key_pressed, w
000119 f411                      	brne	end_key_wrap
00011a 2477                      	clr		times_key_pressed				; times_key_pressed = 1
00011b 9473                      	inc		times_key_pressed
                                 end_key_wrap:
00011c c011                      	rjmp	end_process_key
                                 
                                 not_same_key:
                                 	;			else
                                 	;				enter letter
00011d e008                      	ldi		w, max_name
00011e 1630                      	cp		new_name_cur, w
00011f f470                      	brsh	end_process_key
                                 
000120 e0f2                      	ldi		zh, high(new_name)				; new_name[new_name_cur] = keypad_to_ascii(last_key_pressed, times_key_pressed)
000121 e0e0                      	ldi		zl, low(new_name)
                                 
000122 0de3                      	add		zl, new_name_cur
000123 1df5                      	adc		zh, zero
                                 
000124 2ca6                      	mov		arg0, last_key_pressed
000125 2cb7                      	mov		arg1, times_key_pressed
000126 d021                      	rcall	keypad_to_ascii
                                 
000127 8380                      	st		z, r24
                                 
000128 2f38                      	mov		r19, r24
000129 d535                      	rcall	WRITE
                                 
00012a 9433                      	inc		new_name_cur					; new_name_cur ++
00012b 2c64                      	mov		last_key_pressed, key_pressed	; last_key_pressed = key_pressed
00012c 2477                      	clr		times_key_pressed				; times_key_pressed = 1
00012d 9473                      	inc		times_key_pressed
                                 end_process_key:
                                 
00012e 1485                      	cp		is_timer_active, zero
00012f f031                      	breq	timer_not_active
000130 e004                      	ldi		w, 0b00000100
000131 9300 0091                 	sts		TCCR3B, w
000133 e001                      	ldi		w, (1 << TOIE3)
000134 9300 0071                 	sts		TIMSK3, w
                                 timer_not_active:
                                 
000136 b30d                      	in		w, EIMSK
000137 b905                      	out		PORTB, w
                                 
000138 cf56                      	rjmp	loop
                                 
                                 ;______________________________________________________________________
                                 ; HELPER FUNCTIONS
                                 ;______________________________________________________________________
                                 
                                 ;______________________________________________________________________
                                 ; initialise_array
                                 ; arguments
                                 ; array - arg0:arg1 (r10:r11)
                                 ; length - arg2 (r12)
                                 ;______________________________________________________________________
                                 initialise_array:
000139 93ef                      	push	zl
00013a 93ff                      	push	zh
00013b 931f                      	push	r17
                                 
00013c 2dfa                      	mov		zh, arg0
00013d 2deb                      	mov		zl, arg1
                                 
00013e 2d1c                      	mov		r17, arg2
                                 
                                 	;rcall	INITIALISE_LCD
                                 
                                 initialise_array_loop:
00013f 1515                      	cp		r17, zero
000140 f019                      	breq	end_initialise_array_loop
                                 
                                 	;ld		r27, z
                                 	;cp		r27, zero
                                 	;breq	dont_write
                                 	;lcd_write_data
                                 	;lcd_wait_busy
                                 ;dont_write:
000141 9251                      	st		z+, zero
                                 
000142 951a                      	dec		r17
000143 cffb                      	rjmp	initialise_array_loop
                                 end_initialise_array_loop:
                                 
000144 911f                      	pop		r17
000145 91ff                      	pop		zh
000146 91ef                      	pop		zl
000147 9508                      	ret
                                 
                                 ;______________________________________________________________________
                                 ; keypad_to_ascii
                                 ; arguments
                                 ; last_key_pressed - arg0 (r10)
                                 ; times_key_pressed - arg1 (r11)
                                 ;______________________________________________________________________
                                 keypad_to_ascii:
000148 93ef                      	push	zl
000149 93ff                      	push	zh
00014a 930f                      	push	w
00014b 931f                      	push	r17
                                 
                                 	; get keypad number value from lookup table
00014c e0fd                      	ldi		zh, high(value_lookup << 1)
00014d eeee                      	ldi		zl, low(value_lookup << 1)
                                 
00014e 0dea                      	add		zl, arg0
00014f 1df5                      	adc		zh, zero
                                 
                                 	; do maths
000150 9104                      	lpm		w, z
000151 950a                      	dec		w
000152 950a                      	dec		w
000153 94ba                      	dec		arg1
                                 
000154 2f10                      	mov		r17, w
000155 0f11                      	lsl		r17
000156 0f01                      	add		w, r17
000157 0d0b                      	add		w, arg1
                                 
                                 	; get ascii value of input character from lookup table
000158 e0fd                      	ldi		zh, high(ascii_lookup << 1)
000159 efee                      	ldi		zl, low(ascii_lookup << 1)
                                 
00015a 0fe0                      	add		zl, w
00015b 1df5                      	adc		zh, zero
                                 
00015c 9104                      	lpm		w, z
00015d 2f80                      	mov		r24, w
                                 
00015e 911f                      	pop		r17
00015f 910f                      	pop		w
000160 91ff                      	pop		zh
000161 91ef                      	pop		zl
000162 9508                      	ret
                                 
                                 ;______________________________________________________________________
                                 ; keypad_to_ascii
                                 ; arguments
                                 ; last_key_pressed - arg0 (r10)
                                 ; times_key_pressed - arg1 (r11)
                                 ;______________________________________________________________________
                                 scan_keypad:
000163 930f                      	push	w
000164 922f                      	push	r2
000165 923f                      	push	r3
000166 924f                      	push	r4
000167 925f                      	push	r5
000168 931f                      	push	r17
000169 932f                      	push	r18
                                 
00016a 93ef                      	push	zl
00016b 93ff                      	push	zh
                                 
00016c e004                      	ldi		w, KEYPADSIZE				; initialise keypad size
00016d 2e40                      	mov		r4, w
00016e 2422                      	clr		r2							; clear column
00016f e72f                      	ldi		r18, INITCOLMASK			; initialise column mask
                                 
                                 col_loop:
000170 1424                      	cp		r2, r4						; if maximum columns reached
000171 f014                      	brlt	push_mask
000172 e72f                      	ldi		r18, INITCOLMASK			; reset the column mask
000173 2422                      	clr		r2							; reset column count
                                 push_mask:
000174 b928                      	out		PORTC, r18
000175 ef0f                      	ldi		w, 0b11111111				; delay to allow pin to update
                                 update_delay:
000176 950a                      	dec		w
000177 f7f1                      	brne	update_delay
                                 
000178 b106                      	in		w, PINC						; read portc
000179 700f                      	andi	w, CHECKROWMASK				; read only the inputs
00017a 300f                      	cpi		w, CHECKROWMASK
00017b f099                      	breq	nextcol						; check if any of the buttons are pressed
                                 
00017c 2e50                      	mov		r5, w						; save copy of inputs
00017d 2433                      	clr		r3							; initialise row scan
00017e e018                      	ldi		r17, INITROWMASK
                                 row_loop:
00017f 2d05                      	mov		w, r5						; get input value
000180 2301                      	and		w, r17						; mask out single bit
000181 f449                      	brne	inc_row						; if button pressed
000182 efef
000183 efff
000184 0000
000185 50e1
000186 40f0
000187 f7e1                      	debounce							; debounce button
000188 b106                      	in		w, PINC						; read port again
000189 2301                      	and		w, r17						; check value of pin again
00018a f041                      	breq	resolve						; if button still pressed resolve value
                                 inc_row:
00018b 9516                      	lsr		r17							; shift row mask
00018c 9433                      	inc		r3							; increment row count
00018d 1434                      	cp		r3, r4
00018e f781                      	brne	row_loop
                                 nextcol:
00018f 9526                      	lsr		r18							; shift column mask right
000190 6820                      	sbr		r18, 0b10000000				; re-set left most bit
000191 9423                      	inc		r2							; increment column count
000192 cfdd                      	rjmp	col_loop
                                 
                                 resolve:
000193 0c33                      	lsl		r3							; get key index by adding row * 4 + column
000194 0c33                      	lsl		r3
000195 2d03                      	mov		w, r3
000196 0d02                      	add		w, r2
                                 
000197 2f80                      	mov		r24, w
                                 
                                 hold_loop:								; wait until button is unpressed before continuing to read keypad
000198 b106                      	in		w, PINC						; read port again
000199 2301                      	and		w, r17						; check value of pin again
00019a f3e9                      	breq	hold_loop					; if button still pressed don't allow key to be continually read
                                 
00019b 91ff                      	pop		zh
00019c 91ef                      	pop		zl
                                 
00019d 912f                      	pop		r18
00019e 911f                      	pop		r17
00019f 905f                      	pop		r5
0001a0 904f                      	pop		r4
0001a1 903f                      	pop		r3
0001a2 902f                      	pop		r2
0001a3 910f                      	pop		w
0001a4 9508                      	ret
                                 
                                 ; Clears new_name variable in memory
                                 clear_name:
0001a5 93cf                      	push YL
0001a6 93df                      	push YH
0001a7 930f                      	push r16
0001a8 931f                      	push r17
0001a9 e0d2                      	ldi  YH, high(new_name)
0001aa e0c0                      	ldi  YL, low(new_name)
0001ab e008                      	ldi  r16, 8
0001ac e010                      	ldi  r17, 0
                                 delete:
0001ad 9319                      	st   Y+, r17
0001ae 950a                      	dec  r16
0001af 3000                      	cpi  r16, 0
0001b0 f7e1                      	brne delete
0001b1 911f                      	pop  r17
0001b2 910f                      	pop  r16
0001b3 91ff                      	pop  ZH
0001b4 91ef                      	pop  ZL
0001b5 9508                      	ret
                                 
                                 ; Returns length of queue in r25:r24
                                 get_queue_len:
0001b6 93cf                      	push YL
0001b7 93df                      	push YH
0001b8 e0d2                      	ldi  YH, high(num_patients)
0001b9 e0c8                      	ldi  YL, low(num_patients)
0001ba 9189                      	ld   r24, Y+
0001bb 8198                      	ld   r25, Y                 ; Stores queue length (num_patients) in r25:r24
0001bc 91df                      	pop  YH
0001bd 91cf                      	pop  YL
                                 
                                 ; Enqueues new patient
                                 ; Assigns pid and returns pointer to location of
                                 ; patient struct in data memory.
                                 ; Should ideally be done with interrupts disabled
                                 ; to avoid race conditions.
                                 enqueue:
0001be 93cf                      	push YL
0001bf 93df                      	push YH
0001c0 93ef                      	push ZL
0001c1 93ff                      	push ZH
0001c2 93af                      	push r26
0001c3 93bf                      	push r27
0001c4 e0d2                      	ldi  YH, high(last_patient)
0001c5 e0ce                      	ldi  YL, low(last_patient)
0001c6 91a9                      	ld   r26, Y+
0001c7 81b8                      	ld   r27, Y
0001c8 01fd                      	movw Z, r26                    ; Store pointer to previous end of Q
0001c9 961a                      	adiw r26, P_SIZE
0001ca 83b8                      	st   Y, r27
0001cb 93aa                      	st   -Y, r26                   ; Update pointer to last patient in queue
0001cc 01ed                      	movw Y, r26                    ; Move Y pointer to new_patient
0001cd 01cd                      	movw r24, r26				   ; Move address of new_patient to return registers
0001ce 91a1                      	ld   r26, Z+
0001cf 81b0                      	ld   r27, Z                    ; Load most recent pid
0001d0 9611                      	adiw r26, 1					   ; Increment
0001d1 93a9                      	st   Y+, r26
0001d2 93b9                      	st   Y+, r27			       ; Assign new pid to next patient
0001d3 e0f2
0001d4 e0e0
0001d5 e0a8
0001d6 91b1
0001d7 93b9
0001d8 95aa
0001d9 30a0
0001da f7d9                      	read_name					   ; Reads in patient name from data memory
0001db dfc9                      	rcall clear_name
0001dc e0d2                      	ldi  YH, high(num_patients)
0001dd e0c8                      	ldi  YL, low(num_patients)  
0001de 91a9                      	ld   r26, Y+
0001df 81b8                      	ld   r27, Y
0001e0 9611                      	adiw r26, 1                 
0001e1 83b8                      	st   Y, r27
0001e2 93aa                      	st   -Y, r26				   ; Update num_patients last                     
0001e3 91bf                      	pop  r27
0001e4 91af                      	pop  r26
0001e5 91ff                      	pop  ZH
0001e6 91ef                      	pop  ZL
0001e7 91df                      	pop  YH
0001e8 91cf                      	pop  YL
0001e9 9508                      	ret
                                 
                                 ; Dequeues first patient from queue and discards
                                 ; Does not return any values.
                                 ; Should ideally be done with interrupts disabled
                                 ; to avoid race conditions.	
                                 dequeue:
0001ea 93df                      	push YH
0001eb 93cf                      	push YL
0001ec 939f                      	push r25
0001ed 938f                      	push r24
0001ee 93bf                      	push r27
0001ef 93af                      	push r26
0001f0 e0d2                      	ldi  YH, high(num_patients)
0001f1 e0c8                      	ldi  YL, low(num_patients)      
0001f2 91a9                      	ld   r26, Y+
0001f3 81b8                      	ld   r27, Y
0001f4 9711                      	sbiw r26, 1
0001f5 83b8                      	st   Y, r27
0001f6 93aa                      	st  -Y, r26                     ; Update num_patients first
0001f7 e0d2                      	ldi  YH, high(first_patient)    
0001f8 e0cc                      	ldi  YL, low(first_patient)
0001f9 9189                      	ld   r24, Y+					
0001fa 8198                      	ld   r25, Y						; Store address of dequeued patient to be cleared
0001fb 30a0                      	cpi  r26, 0
0001fc f469                      	brne not_empty
0001fd 30b0                      	cpi  r27, 0
0001fe f459                      	brne not_empty                  ; If queue not empty, proceed
0001ff e0d2                      	ldi  YH, high(first_patient)    
000200 e0cc                      	ldi  YL, low(first_patient)
000201 01de                      	movw r26, Y                     ; Else reset queue variables
000202 9618                      	adiw r26, 8
000203 93a9                      	st   Y+, r26
000204 93b9                      	st   Y+, r27
000205 e0b2                      	ldi  r27, high(init_pid)
000206 e0aa                      	ldi  r26, low(init_pid)
000207 93a9                      	st   Y+, r26
000208 83b8                      	st   Y, r27
000209 c007                      	rjmp clear_patient
                                 not_empty:
00020a e0d2                      	ldi  YH, high(first_patient)    ; Increment first_patient pointer
00020b e0cc                      	ldi  YL, low(first_patient)
00020c 91a9                      	ld   r26, Y+
00020d 81b8                      	ld   r27, Y
00020e 961a                      	adiw r26, P_SIZE
00020f 83b8                      	st   Y, r27
000210 93aa                      	st   -Y, r26
                                 clear_patient:
000211 01ec                      	movw Y, r24                     
000212 e0aa                      	ldi r26, P_SIZE                 ; Then clear patient struct
000213 e0b0                      	ldi r27, 0
                                 clear_pt_loop:
000214 93b9                      	st  Y+, r27
000215 95aa                      	dec r26
000216 30a0                      	cpi r26, 0
000217 f7e1                      	brne clear_pt_loop
000218 91af                      	pop r26
000219 91bf                      	pop r27
00021a 918f                      	pop r24
00021b 919f                      	pop r25
00021c 91cf                      	pop YL
00021d 91df                      	pop YH
00021e 9508                      	ret
                                 
                                 ;	; push button interrupts TODO change functionality
                                 ;	ldi		w, (0b10 << ISC00)
                                 ;	ori		w, (0b10 << ISC10)
                                 ;	sts		EICRA, w
                                 ;	out		PORTB, w
                                 ;
                                 ;	in		w, EIMSK
                                 ;	ori		w, (1 << INT0)
                                 ;	ori		w, (1 << INT1)
                                 ;	out		EIMSK, w
                                 
                                 pb0_ih:
00021f 93ef                      	push	zl
000220 93ff                      	push	zh
000221 930f                      	push	w
000222 931f                      	push	r17
000223 932f                      	push	r18
000224 925f                      	push	zero
                                 
000225 b71f                      	in		r17, sreg
                                 
000226 efef
000227 efff
000228 0000
000229 50e1
00022a 40f0
00022b f7e1                      	debounce
                                 
00022c 2455                      	clr		zero
                                 
00022d e0f2                      	ldi		zh, high(pb0_state)
00022e e1e1                      	ldi		zl, low(pb0_state)
                                 
00022f 8120                      	ld		r18, z
                                 
                                 
                                 pb0_state0:
000230 3020                      	cpi		r18, 0
000231 f4c1                      	brne	pb0_state1
                                 
                                 	; call next patient
                                 
                                 	; enable push button 1 (cancel appointment)
000232 e0f2                      	ldi		zh, high(pb1_state)
000233 e1e2                      	ldi		zl, low(pb1_state)
000234 8250                      	st		z, zero
                                 
000235 9100 0069                 	lds		w, EICRA
000237 7f03                      	andi	w, 0b11110011
000238 6008                      	ori		w, (0b10 << ISC10)
000239 9300 0069                 	sts		EICRA, w
                                 
00023b 9100 0069                 	lds		w, EICRA
00023d 7f0c                      	andi	w, 0b11111100
00023e 6002                      	ori		w, (0b10 << ISC00)
                                 	
00023f b30d                      	in		w, EIMSK
000240 6002                      	ori		w, (1 << INT1)
000241 bb0d                      	out		EIMSK, w
                                 
000242 b30d                      	in		w, EIMSK
000243 6001                      	ori		w, (1 << INT0)
000244 bb0d                      	out		EIMSK, w
                                 
                                 	; change push button state to 1
000245 e0f2                      	ldi		zh, high(pb0_state)
000246 e1e1                      	ldi		zl, low(pb0_state)
000247 e021                      	ldi		r18, 1
000248 8320                      	st		z, r18
                                 
000249 c026                      	rjmp	pb0_state_end
                                 pb0_state1:
00024a 3021                      	cpi		r18, 1
00024b f4b1                      	brne	pb0_state2
                                 
                                 	; start timer for 1 second
00024c 9250 00a5                 	sts		TCNT4h, zero
00024e 9250 00a4                 	sts		TCNT4l, zero
000250 e004                      	ldi		w, 0b00000100
000251 9300 00a1                 	sts		TCCR4B, w
000253 e001                      	ldi		w, (1 << TOIE4)
000254 9300 0072                 	sts		TIMSK4, w
                                 
                                 	; change push button to release
000256 9100 0069                 	lds		w, EICRA
000258 7f0c                      	andi	w, 0b11111100
000259 6003                      	ori		w, (0b11 << ISC00)
00025a 9300 0069                 	sts		EICRA, w
                                 	
                                 	; change push button state to 2
00025c e022                      	ldi		r18, 2
00025d 8320                      	st		z, r18
                                 
                                 	; set timer functionality
00025e e0f2                      	ldi		zh, high(which_pb)
00025f e1e3                      	ldi		zl, low(which_pb)
000260 8250                      	st		z, zero
                                 
000261 c00e                      	rjmp	pb0_state_end
                                 pb0_state2:
000262 3022                      	cpi		r18, 2
000263 f461                      	brne	pb0_state_end
                                 	
                                 	; turn off timer
000264 9250 00a1                 	sts		TCCR4B, zero
000266 9250 0072                 	sts		TIMSK4, zero
                                 
                                 	; change push button to push down
000268 9100 0069                 	lds		w, EICRA
00026a 7f0c                      	andi	w, 0b11111100
00026b 6002                      	ori		w, (0b10 << ISC00)
00026c 9300 0069                 	sts		EICRA, w
                                 
                                 	; return push button state to 1
00026e e021                      	ldi		r18, 1
00026f 8320                      	st		z, r18
                                 pb0_state_end:
                                 
000270 b925                      	out		PORTB, r18
                                 
000271 bf1f                      	out		sreg, r17
                                 
000272 905f                      	pop		zero
000273 912f                      	pop		r18
000274 911f                      	pop		r17
000275 910f                      	pop		w
000276 91ff                      	pop		zh
000277 91ef                      	pop		zl
000278 9518                      	reti
                                 
                                 pb1_ih:
000279 93ef                      	push	zl
00027a 93ff                      	push	zh
00027b 930f                      	push	w
00027c 931f                      	push	r17
00027d 932f                      	push	r18
00027e 925f                      	push	zero
                                 
00027f b71f                      	in		r17, sreg
                                 
000280 efef
000281 efff
000282 0000
000283 50e1
000284 40f0
000285 f7e1                      	debounce
                                 
000286 2455                      	clr		zero
                                 
000287 e0f2                      	ldi		zh, high(pb1_state)
000288 e1e2                      	ldi		zl, low(pb1_state)
                                 
000289 8120                      	ld		r18, z
                                 
                                 pb1_state0:
00028a 3020                      	cpi		r18, 0
00028b f4b9                      	brne	pb1_state1
                                 
                                 	; start timer for 1 second
00028c 9250 00a5                 	sts		TCNT4h, zero
00028e 9250 00a4                 	sts		TCNT4l, zero
000290 e004                      	ldi		w, 0b00000100
000291 9300 00a1                 	sts		TCCR4B, w
000293 e001                      	ldi		w, (1 << TOIE4)
000294 9300 0072                 	sts		TIMSK4, w
                                 
                                 	; change push button to release
000296 9100 0069                 	lds		w, EICRA
000298 7f03                      	andi	w, 0b11110011
000299 600c                      	ori		w, (0b11 << ISC10)
00029a 9300 0069                 	sts		EICRA, w
                                 	
                                 	; change push button state to 1
00029c 9523                      	inc		r18
00029d 8320                      	st		z, r18
                                 
                                 	; set timer functionality
00029e e0f2                      	ldi		zh, high(which_pb)
00029f e1e3                      	ldi		zl, low(which_pb)
0002a0 e001                      	ldi		w, 1
0002a1 8300                      	st		z, w
                                 
0002a2 c00d                      	rjmp	pb1_state_end
                                 pb1_state1:
0002a3 3021                      	cpi		r18, 1
0002a4 f459                      	brne	pb1_state_end
                                 	
                                 	; turn off timer
0002a5 9250 00a1                 	sts		TCCR4B, zero
0002a7 9250 0072                 	sts		TIMSK4, zero
                                 
                                 	; change push button to push down
0002a9 9100 0069                 	lds		w, EICRA
0002ab 7f03                      	andi	w, 0b11110011
0002ac 6008                      	ori		w, (0b10 << ISC10)
0002ad 9300 0069                 	sts		EICRA, w
                                 
                                 	; return push button state to 0
0002af 8250                      	st		z, zero
                                 pb1_state_end:
                                 
0002b0 bf1f                      	out		sreg, r17
                                 
0002b1 905f                      	pop		zero
0002b2 912f                      	pop		r18
0002b3 911f                      	pop		r17
0002b4 910f                      	pop		w
0002b5 91ff                      	pop		zh
0002b6 91ef                      	pop		zl
0002b7 9518                      	reti
                                 
                                 pb_timeout:
0002b8 93ef                      	push	zl
0002b9 93ff                      	push	zh
0002ba 930f                      	push	w
0002bb 931f                      	push	r17
0002bc 925f                      	push	zero
0002bd 932f                      	push	r18
                                 
0002be b71f                      	in		r17, sreg
                                 
0002bf 2455                      	clr		zero
                                 
0002c0 e0f2                      	ldi		zh, high(which_pb)
0002c1 e1e3                      	ldi		zl, low(which_pb)
                                 
0002c2 8120                      	ld		r18, z
                                 
                                 timeout_pb0:
0002c3 3020                      	cpi		r18, 0
0002c4 f409                      	brne	timeout_pb1
                                  
                                 	; start led countdown
                                 
0002c5 c002                      	rjmp	end_timeout_sel
                                 timeout_pb1:
0002c6 3021                      	cpi		r18, 1
0002c7 f401                      	brne	end_timeout_sel
                                 
                                 	; play cancel stuff
                                 
                                 end_timeout_sel:
                                 
                                 	; pop patient from queue
0002c8 df21                      	rcall	dequeue
0002c9 d14c                      	rcall	LCD_DISPLAY_MODE
0002ca d40a                      	rcall	display_front_patient
                                 
0002cb e0f2                      	ldi		zh, high(num_patients)
0002cc e0e8                      	ldi		zl, low(num_patients)
0002cd 8100                      	ld		w, z
0002ce 3000                      	cpi		w, 0
0002cf f419                      	brne	timeout_no_patients
0002d0 b30d                      	in		w, EIMSK
0002d1 7f0e                      	andi	w, 0b11111110
0002d2 bb0d                      	out		EIMSK, w
                                 timeout_no_patients:
                                 
                                 	; remove pb1 interrupt
0002d3 b30d                      	in		w, EIMSK
0002d4 7f0d                      	andi	w, 0b11111101	
0002d5 bb0d                      	out		EIMSK, w
                                 
                                 	; reset pb0 interrupt
                                 
                                 	; turn off timer
0002d6 9250 00a1                 	sts		TCCR4B, zero
0002d8 9250 0072                 	sts		TIMSK4, zero
                                 
0002da bf1f                      	out		sreg, r17
                                 
0002db 912f                      	pop		r18
0002dc 905f                      	pop		zero
0002dd 911f                      	pop		r17
0002de 910f                      	pop		w
0002df 91ff                      	pop		zh
0002e0 91ef                      	pop		zl
0002e1 9518                      	reti
                                 
                                 keypad_timeout:
0002e2 93ef                      	push	zl
0002e3 93ff                      	push	zh
0002e4 92af                      	push	arg0
0002e5 92bf                      	push	arg1
0002e6 938f                      	push	r24
0002e7 933f                      	push	r19
0002e8 930f                      	push	w
0002e9 925f                      	push	zero
                                 
0002ea b70f                      	in		w, sreg
                                 
0002eb 930f                      	push	w
                                 
0002ec 2455                      	clr		zero
0002ed 9250 0091                 	sts		TCCR3B, zero
0002ef 9250 0071                 	sts		TIMSK3, zero					; disable_keypad_timer()
                                 
0002f1 e0f2                      	ldi		zh, high(new_name)				; new_name[new_name_cur] = keypad_to_ascii(last_key_pressed, times_key_pressed)
0002f2 e0e0                      	ldi		zl, low(new_name)
                                 
0002f3 0de3                      	add		zl, new_name_cur
0002f4 1df5                      	adc		zh, zero
                                 
0002f5 2ca6                      	mov		arg0, last_key_pressed
0002f6 2cb7                      	mov		arg1, times_key_pressed
0002f7 de50                      	rcall	keypad_to_ascii
                                 
0002f8 8380                      	st		z, r24
                                 
0002f9 2f38                      	mov		r19, r24
0002fa d364                      	rcall	WRITE
                                 
0002fb e0f2                      	ldi		zh, high(is_keypad_timeout)
0002fc e1e0                      	ldi		zl, low(is_keypad_timeout)
0002fd e001                      	ldi		w, 1
0002fe 8300                      	st		z, w
                                 
0002ff 910f                      	pop		w
                                 
000300 bf0f                      	out		sreg, w
                                 
000301 905f                      	pop		zero
000302 910f                      	pop		w
000303 913f                      	pop		r19
000304 918f                      	pop		r24
000305 90bf                      	pop		arg1
000306 90af                      	pop		arg0
000307 91ff                      	pop		zh
000308 91ef                      	pop		zl
000309 9518                      	reti
                                 	
                                 ; initialise the LCD
                                 INITIALISE_LCD:
                                 	; prologue
00030a 930f                      	push r16
00030b 931f                      	push r17
00030c 932f                      	push r18
00030d 933f                      	push r19
00030e 93cf                      	push YL
00030f 93df                      	push YH
000310 b7cd                      	in YL, SPL
000311 b7de                      	in YH, SPH
000312 9721                      	sbiw Y, 1
                                 
000313 ef1f                      	ser r17
000314 bb10                      	out DDRF, r17			; LCD r16
000315 b911                      	out DDRA, r17			; LCD Ctrl
000316 2711                      	clr r17
000317 bb11                      	out PORTF, r17
000318 b912                      	out PORTA, r17
                                 	;
000319 e928                      	ldi r18, low(15000)		; delay 15ms
00031a e33a                      	ldi r19, high(15000)
00031b e013
00031c 951a
00031d 0000
00031e f7e9
00031f 5021
000320 4030
000321 f7c9                      	delay
000322 e308                      	ldi r16, 0b00111000	; 2 x 5 x 7 r18 = 1, 8bits | N = 1, 2-line | F = 0, 5 x 7 dots
000323 bb01
000324 9817
000325 9815
000326 0000
000327 9a16
000328 0000
000329 0000
00032a 0000
00032b 9816
00032c 0000
00032d 0000
00032e 0000                      	lcd_write_cmd			; 1st function cmd set
                                 
00032f e024                      	ldi r18, low(4100)		; delay 4.1ms
000330 e130                      	ldi r19, high(4100)
000331 e013
000332 951a
000333 0000
000334 f7e9
000335 5021
000336 4030
000337 f7c9                      	delay
000338 bb01
000339 9817
00033a 9815
00033b 0000
00033c 9a16
00033d 0000
00033e 0000
00033f 0000
000340 9816
000341 0000
000342 0000
000343 0000                      	lcd_write_cmd			; 2nd function cmd set
                                 
000344 e624                      	ldi r18, low(100)		; delay 4.1ms
000345 e030                      	ldi r19, high(100)
000346 e013
000347 951a
000348 0000
000349 f7e9
00034a 5021
00034b 4030
00034c f7c9                      	delay
00034d bb01
00034e 9817
00034f 9815
000350 0000
000351 9a16
000352 0000
000353 0000
000354 0000
000355 9816
000356 0000
000357 0000
000358 0000                      	lcd_write_cmd			; 3rd function cmd set
000359 bb01
00035a 9817
00035b 9815
00035c 0000
00035d 9a16
00035e 0000
00035f 0000
000360 0000
000361 9816
000362 0000
000363 0000
000364 0000                      	lcd_write_cmd			; final function cmd set
                                 	;
000365 2711
000366 bb10
000367 9817
000368 9a15
000369 0000
00036a 9a16
00036b 0000
00036c 0000
00036d 0000
00036e b11f
00036f 9816
000370 fd17
000371 cff7
000372 0000
000373 0000
000374 0000
000375 9817
000376 9815
000377 ef1f
000378 bb10
000379 0000
00037a 0000
00037b 0000                      	lcd_wait_busy			; wait until ready
                                 
00037c e008                      	ldi r16, 0b00001000	; LCD display off
00037d bb01
00037e 9817
00037f 9815
000380 0000
000381 9a16
000382 0000
000383 0000
000384 0000
000385 9816
000386 0000
000387 0000
000388 0000                      	lcd_write_cmd
000389 2711
00038a bb10
00038b 9817
00038c 9a15
00038d 0000
00038e 9a16
00038f 0000
000390 0000
000391 0000
000392 b11f
000393 9816
000394 fd17
000395 cff7
000396 0000
000397 0000
000398 0000
000399 9817
00039a 9815
00039b ef1f
00039c bb10
00039d 0000
00039e 0000
00039f 0000                      	lcd_wait_busy
                                 
0003a0 e001                      	ldi r16, 0b00000001	; LCD display clear
0003a1 bb01
0003a2 9817
0003a3 9815
0003a4 0000
0003a5 9a16
0003a6 0000
0003a7 0000
0003a8 0000
0003a9 9816
0003aa 0000
0003ab 0000
0003ac 0000                      	lcd_write_cmd
0003ad 2711
0003ae bb10
0003af 9817
0003b0 9a15
0003b1 0000
0003b2 9a16
0003b3 0000
0003b4 0000
0003b5 0000
0003b6 b11f
0003b7 9816
0003b8 fd17
0003b9 cff7
0003ba 0000
0003bb 0000
0003bc 0000
0003bd 9817
0003be 9815
0003bf ef1f
0003c0 bb10
0003c1 0000
0003c2 0000
0003c3 0000                      	lcd_wait_busy
                                 
0003c4 e006                      	ldi r16, 0b00000110	; increment, no shift
0003c5 bb01
0003c6 9817
0003c7 9815
0003c8 0000
0003c9 9a16
0003ca 0000
0003cb 0000
0003cc 0000
0003cd 9816
0003ce 0000
0003cf 0000
0003d0 0000                      	lcd_write_cmd
0003d1 2711
0003d2 bb10
0003d3 9817
0003d4 9a15
0003d5 0000
0003d6 9a16
0003d7 0000
0003d8 0000
0003d9 0000
0003da b11f
0003db 9816
0003dc fd17
0003dd cff7
0003de 0000
0003df 0000
0003e0 0000
0003e1 9817
0003e2 9815
0003e3 ef1f
0003e4 bb10
0003e5 0000
0003e6 0000
0003e7 0000                      	lcd_wait_busy
                                 
0003e8 e00e                      	ldi r16, 0b00001110	; LCD display on, no cursor, blink
0003e9 bb01
0003ea 9817
0003eb 9815
0003ec 0000
0003ed 9a16
0003ee 0000
0003ef 0000
0003f0 0000
0003f1 9816
0003f2 0000
0003f3 0000
0003f4 0000                      	lcd_write_cmd
0003f5 2711
0003f6 bb10
0003f7 9817
0003f8 9a15
0003f9 0000
0003fa 9a16
0003fb 0000
0003fc 0000
0003fd 0000
0003fe b11f
0003ff 9816
000400 fd17
000401 cff7
000402 0000
000403 0000
000404 0000
000405 9817
000406 9815
000407 ef1f
000408 bb10
000409 0000
00040a 0000
00040b 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
00040c 9621                      	adiw Y, 1
00040d bfde                      	out SPH, YH
00040e bfcd                      	out SPL, YL
00040f 91df                      	pop YH
000410 91cf                      	pop YL
000411 913f                      	pop r19
000412 912f                      	pop r18
000413 911f                      	pop r17
000414 910f                      	pop r16
000415 9508                      	ret
                                 
                                 ; clears the LCD display and sets it to display mode
                                 LCD_DISPLAY_MODE:
                                 	; prologue
000416 930f                      	push r16
000417 931f                      	push r17
000418 932f                      	push r18
000419 933f                      	push r19
00041a 93cf                      	push YL
00041b 93df                      	push YH
00041c b7cd                      	in YL, SPL
00041d b7de                      	in YH, SPH
00041e 9721                      	sbiw Y, 1
00041f 9a11                      	set_strobe				; STROBE on
                                 	
000420 e001                      	ldi r16, 0b00000001	; clear display
000421 bb01
000422 9817
000423 9815
000424 0000
000425 9a16
000426 0000
000427 0000
000428 0000
000429 9816
00042a 0000
00042b 0000
00042c 0000                      	lcd_write_cmd
00042d 2711
00042e bb10
00042f 9817
000430 9a15
000431 0000
000432 9a16
000433 0000
000434 0000
000435 0000
000436 b11f
000437 9816
000438 fd17
000439 cff7
00043a 0000
00043b 0000
00043c 0000
00043d 9817
00043e 9815
00043f ef1f
000440 bb10
000441 0000
000442 0000
000443 0000                      	lcd_wait_busy
                                 
000444 e43e                      	ldi r19, 'N'			; display "Next Patient:"
000445 d219                      	rcall WRITE
000446 e635                      	ldi r19, 'e'
000447 d217                      	rcall WRITE
000448 e738                      	ldi r19, 'x'
000449 d215                      	rcall WRITE
00044a e734                      	ldi r19, 't'
00044b d213                      	rcall WRITE
00044c e230                      	ldi r19, ' '
00044d d211                      	rcall WRITE
00044e e530                      	ldi r19, 'P'
00044f d20f                      	rcall WRITE
000450 e631                      	ldi r19, 'a'
000451 d20d                      	rcall WRITE
000452 e734                      	ldi r19, 't'
000453 d20b                      	rcall WRITE
000454 e639                      	ldi r19, 'i'
000455 d209                      	rcall WRITE
000456 e635                      	ldi r19, 'e'
000457 d207                      	rcall WRITE
000458 e63e                      	ldi r19, 'n'
000459 d205                      	rcall WRITE
00045a e734                      	ldi r19, 't'
00045b d203                      	rcall WRITE
00045c e33a                      	ldi r19, ':'
00045d d201                      	rcall WRITE
                                 	
                                 	;epilogue
00045e 9621                      	adiw Y, 1
00045f bfde                      	out SPH, YH
000460 bfcd                      	out SPL, YL
000461 91df                      	pop YH
000462 91cf                      	pop YL
000463 913f                      	pop r19
000464 912f                      	pop r18
000465 911f                      	pop r17
000466 910f                      	pop r16
000467 9508                      	ret
                                 
                                 ; shifts cursor to bottom left of screen
                                 DISPLAY_BOTTOM_LEFT:
                                 	; prologue
000468 930f                      	push r16
000469 931f                      	push r17
00046a 932f                      	push r18
00046b 933f                      	push r19
00046c 93cf                      	push YL
00046d 93df                      	push YH
00046e b7cd                      	in YL, SPL
00046f b7de                      	in YH, SPH
000470 9721                      	sbiw Y, 1
                                 
000471 ec00                      	ldi r16, 0b11000000	; Set DDRAM address to bottom left
000472 bb01
000473 9817
000474 9815
000475 0000
000476 9a16
000477 0000
000478 0000
000479 0000
00047a 9816
00047b 0000
00047c 0000
00047d 0000                      	lcd_write_cmd
00047e 2711
00047f bb10
000480 9817
000481 9a15
000482 0000
000483 9a16
000484 0000
000485 0000
000486 0000
000487 b11f
000488 9816
000489 fd17
00048a cff7
00048b 0000
00048c 0000
00048d 0000
00048e 9817
00048f 9815
000490 ef1f
000491 bb10
000492 0000
000493 0000
000494 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
000495 9621                      	adiw Y, 1
000496 bfde                      	out SPH, YH
000497 bfcd                      	out SPL, YL
000498 91df                      	pop YH
000499 91cf                      	pop YL
00049a 913f                      	pop r19
00049b 912f                      	pop r18
00049c 911f                      	pop r17
00049d 910f                      	pop r16
00049e 9508                      	ret
                                 
                                 ;expects unsigned int as parameter in r19 and displays bottom right aligned number
                                 DISPLAY_NUMBER_RIGHT:
                                 	; prologue
00049f 930f                      	push r16
0004a0 931f                      	push r17
0004a1 932f                      	push r18
0004a2 933f                      	push r19
0004a3 93cf                      	push YL
0004a4 93df                      	push YH
0004a5 b7cd                      	in YL, SPL
0004a6 b7de                      	in YH, SPH
0004a7 9721                      	sbiw Y, 1
                                 
0004a8 ec0f                      	ldi r16, 0b11001111	; Set DDRAM address to bottom right
0004a9 bb01
0004aa 9817
0004ab 9815
0004ac 0000
0004ad 9a16
0004ae 0000
0004af 0000
0004b0 0000
0004b1 9816
0004b2 0000
0004b3 0000
0004b4 0000                      	lcd_write_cmd
0004b5 2711
0004b6 bb10
0004b7 9817
0004b8 9a15
0004b9 0000
0004ba 9a16
0004bb 0000
0004bc 0000
0004bd 0000
0004be b11f
0004bf 9816
0004c0 fd17
0004c1 cff7
0004c2 0000
0004c3 0000
0004c4 0000
0004c5 9817
0004c6 9815
0004c7 ef1f
0004c8 bb10
0004c9 0000
0004ca 0000
0004cb 0000                      	lcd_wait_busy
0004cc e006                      	ldi r16, 0b00000110	; INCREMENT, no shift
0004cd bb01
0004ce 9817
0004cf 9815
0004d0 0000
0004d1 9a16
0004d2 0000
0004d3 0000
0004d4 0000
0004d5 9816
0004d6 0000
0004d7 0000
0004d8 0000                      	lcd_write_cmd
0004d9 2711
0004da bb10
0004db 9817
0004dc 9a15
0004dd 0000
0004de 9a16
0004df 0000
0004e0 0000
0004e1 0000
0004e2 b11f
0004e3 9816
0004e4 fd17
0004e5 cff7
0004e6 0000
0004e7 0000
0004e8 0000
0004e9 9817
0004ea 9815
0004eb ef1f
0004ec bb10
0004ed 0000
0004ee 0000
0004ef 0000                      	lcd_wait_busy
                                 	
0004f0 303a                      	cpi r19, 10
0004f1 f408                      	brsh tens
0004f2 c04b                      	rjmp display
                                 tens:
0004f3 e100                      	ldi r16, 0b00010000	; shift cursor left 1
0004f4 bb01
0004f5 9817
0004f6 9815
0004f7 0000
0004f8 9a16
0004f9 0000
0004fa 0000
0004fb 0000
0004fc 9816
0004fd 0000
0004fe 0000
0004ff 0000                      	lcd_write_cmd
000500 2711
000501 bb10
000502 9817
000503 9a15
000504 0000
000505 9a16
000506 0000
000507 0000
000508 0000
000509 b11f
00050a 9816
00050b fd17
00050c cff7
00050d 0000
00050e 0000
00050f 0000
000510 9817
000511 9815
000512 ef1f
000513 bb10
000514 0000
000515 0000
000516 0000                      	lcd_wait_busy
000517 3634                      	cpi r19, 100
000518 f408                      	brsh hundreds
000519 c024                      	rjmp display
                                 hundreds:
00051a e100                      	ldi r16, 0b00010000	; shift cursor left 1
00051b bb01
00051c 9817
00051d 9815
00051e 0000
00051f 9a16
000520 0000
000521 0000
000522 0000
000523 9816
000524 0000
000525 0000
000526 0000                      	lcd_write_cmd
000527 2711
000528 bb10
000529 9817
00052a 9a15
00052b 0000
00052c 9a16
00052d 0000
00052e 0000
00052f 0000
000530 b11f
000531 9816
000532 fd17
000533 cff7
000534 0000
000535 0000
000536 0000
000537 9817
000538 9815
000539 ef1f
00053a bb10
00053b 0000
00053c 0000
00053d 0000                      	lcd_wait_busy
                                 display:
00053e 2f83                      	mov r24, r19
00053f d151                      	rcall decimal_conversion
                                 	;epilogue
000540 9621                      	adiw Y, 1
000541 bfde                      	out SPH, YH
000542 bfcd                      	out SPL, YL
000543 91df                      	pop YH
000544 91cf                      	pop YL
000545 913f                      	pop r19
000546 912f                      	pop r18
000547 911f                      	pop r17
000548 910f                      	pop r16
000549 9508                      	ret
                                 
                                 ; clears LCD display and sets it to entry mode
                                 LCD_ENTRY_MODE:
                                 	; prologue
00054a 930f                      	push r16
00054b 931f                      	push r17
00054c 932f                      	push r18
00054d 933f                      	push r19
00054e 93cf                      	push YL
00054f 93df                      	push YH
000550 b7cd                      	in YL, SPL
000551 b7de                      	in YH, SPH
000552 9721                      	sbiw Y, 1
000553 9811                      	clr_strobe				; STROBE on
                                 	
000554 e001                      	ldi r16, 0b00000001	; clear display
000555 bb01
000556 9817
000557 9815
000558 0000
000559 9a16
00055a 0000
00055b 0000
00055c 0000
00055d 9816
00055e 0000
00055f 0000
000560 0000                      	lcd_write_cmd
000561 2711
000562 bb10
000563 9817
000564 9a15
000565 0000
000566 9a16
000567 0000
000568 0000
000569 0000
00056a b11f
00056b 9816
00056c fd17
00056d cff7
00056e 0000
00056f 0000
000570 0000
000571 9817
000572 9815
000573 ef1f
000574 bb10
000575 0000
000576 0000
000577 0000                      	lcd_wait_busy
                                 
000578 e435                      	ldi r19, 'E'			; display "Next Patient:"
000579 d0e5                      	rcall WRITE
00057a e63e                      	ldi r19, 'n'
00057b d0e3                      	rcall WRITE
00057c e734                      	ldi r19, 't'
00057d d0e1                      	rcall WRITE
00057e e635                      	ldi r19, 'e'
00057f d0df                      	rcall WRITE
000580 e732                      	ldi r19, 'r'
000581 d0dd                      	rcall WRITE
000582 e230                      	ldi r19, ' '
000583 d0db                      	rcall WRITE
000584 e43e                      	ldi r19, 'N'
000585 d0d9                      	rcall WRITE
000586 e631                      	ldi r19, 'a'
000587 d0d7                      	rcall WRITE
000588 e63d                      	ldi r19, 'm'
000589 d0d5                      	rcall WRITE
00058a e635                      	ldi r19, 'e'
00058b d0d3                      	rcall WRITE
00058c e33a                      	ldi r19, ':'
00058d d0d1                      	rcall WRITE
                                 	
                                 	;epilogue
00058e 9621                      	adiw Y, 1
00058f bfde                      	out SPH, YH
000590 bfcd                      	out SPL, YL
000591 91df                      	pop YH
000592 91cf                      	pop YL
000593 913f                      	pop r19
000594 912f                      	pop r18
000595 911f                      	pop r17
000596 910f                      	pop r16
000597 9508                      	ret
                                 
                                 ; expects unsigned int as parameter in r19 and displays descriptive message to patient
                                 ENTRY_MESSAGE:
                                 	; prologue
000598 930f                      	push r16
000599 931f                      	push r17
00059a 932f                      	push r18
00059b 933f                      	push r19
00059c 938f                      	push r24
00059d 93cf                      	push YL
00059e 93df                      	push YH
00059f b7cd                      	in YL, SPL
0005a0 b7de                      	in YH, SPH
0005a1 9721                      	sbiw Y, 1
                                 
0005a2 e001                      	ldi r16, 0b00000001	; clear display
0005a3 bb01
0005a4 9817
0005a5 9815
0005a6 0000
0005a7 9a16
0005a8 0000
0005a9 0000
0005aa 0000
0005ab 9816
0005ac 0000
0005ad 0000
0005ae 0000                      	lcd_write_cmd
0005af 2711
0005b0 bb10
0005b1 9817
0005b2 9a15
0005b3 0000
0005b4 9a16
0005b5 0000
0005b6 0000
0005b7 0000
0005b8 b11f
0005b9 9816
0005ba fd17
0005bb cff7
0005bc 0000
0005bd 0000
0005be 0000
0005bf 9817
0005c0 9815
0005c1 ef1f
0005c2 bb10
0005c3 0000
0005c4 0000
0005c5 0000                      	lcd_wait_busy
                                 
0005c6 2f83                      	mov r24, r19
                                 
0005c7 e539                      	ldi r19, 'Y'
0005c8 d096                      	rcall WRITE
0005c9 e63f                      	ldi r19, 'o'
0005ca d094                      	rcall WRITE
0005cb e735                      	ldi r19, 'u'
0005cc d092                      	rcall WRITE
0005cd e230                      	ldi r19, ' '
0005ce d090                      	rcall WRITE
0005cf e631                      	ldi r19, 'a'
0005d0 d08e                      	rcall WRITE
0005d1 e732                      	ldi r19, 'r'
0005d2 d08c                      	rcall WRITE
0005d3 e635                      	ldi r19, 'e'
0005d4 d08a                      	rcall WRITE
0005d5 e230                      	ldi r19, ' '
0005d6 d088                      	rcall WRITE
0005d7 e730                      	ldi r19, 'p'
0005d8 d086                      	rcall WRITE
0005d9 e631                      	ldi r19, 'a'
0005da d084                      	rcall WRITE
0005db e734                      	ldi r19, 't'
0005dc d082                      	rcall WRITE
0005dd e639                      	ldi r19, 'i'
0005de d080                      	rcall WRITE
0005df e635                      	ldi r19, 'e'
0005e0 d07e                      	rcall WRITE
0005e1 e63e                      	ldi r19, 'n'
0005e2 d07c                      	rcall WRITE
0005e3 e734                      	ldi r19, 't'
0005e4 d07a                      	rcall WRITE
                                 
0005e5 de82                      	rcall DISPLAY_BOTTOM_LEFT
                                 
0005e6 e63e                      	ldi r19, 'n'
0005e7 d077                      	rcall WRITE
0005e8 e735                      	ldi r19, 'u'
0005e9 d075                      	rcall WRITE
0005ea e63d                      	ldi r19, 'm'
0005eb d073                      	rcall WRITE
0005ec e632                      	ldi r19, 'b'
0005ed d071                      	rcall WRITE
0005ee e635                      	ldi r19, 'e'
0005ef d06f                      	rcall WRITE
0005f0 e732                      	ldi r19, 'r'
0005f1 d06d                      	rcall WRITE
0005f2 e33a                      	ldi r19, ':'
0005f3 d06b                      	rcall WRITE
0005f4 e230                      	ldi r19, ' '
0005f5 d069                      	rcall WRITE
0005f6 d09a                      	rcall decimal_conversion
                                 	;epilogue
0005f7 9621                      	adiw Y, 1
0005f8 bfde                      	out SPH, YH
0005f9 bfcd                      	out SPL, YL
0005fa 91df                      	pop YH
0005fb 91cf                      	pop YL
0005fc 918f                      	pop r24
0005fd 913f                      	pop r19
0005fe 912f                      	pop r18
0005ff 911f                      	pop r17
000600 910f                      	pop r16
000601 9508                      	ret
                                 
                                 ; delete 1 character from patient input in LCD entry mode
                                 BACKSPACE:
                                 	; prologue
000602 930f                      	push r16
000603 931f                      	push r17
000604 932f                      	push r18
000605 933f                      	push r19
000606 93cf                      	push YL
000607 93df                      	push YH
000608 b7cd                      	in YL, SPL
000609 b7de                      	in YH, SPH
00060a 9721                      	sbiw Y, 1
                                 
00060b e100                      	ldi r16, 0b00010000	; shift cursor left 1
00060c bb01
00060d 9817
00060e 9815
00060f 0000
000610 9a16
000611 0000
000612 0000
000613 0000
000614 9816
000615 0000
000616 0000
000617 0000                      	lcd_write_cmd
000618 2711
000619 bb10
00061a 9817
00061b 9a15
00061c 0000
00061d 9a16
00061e 0000
00061f 0000
000620 0000
000621 b11f
000622 9816
000623 fd17
000624 cff7
000625 0000
000626 0000
000627 0000
000628 9817
000629 9815
00062a ef1f
00062b bb10
00062c 0000
00062d 0000
00062e 0000                      	lcd_wait_busy
                                 
00062f e230                      	ldi r19, ' '			; delete letter
000630 d02e                      	rcall WRITE
                                 
000631 e100                      	ldi r16, 0b00010000	; shift cursor left 1
000632 bb01
000633 9817
000634 9815
000635 0000
000636 9a16
000637 0000
000638 0000
000639 0000
00063a 9816
00063b 0000
00063c 0000
00063d 0000                      	lcd_write_cmd
00063e 2711
00063f bb10
000640 9817
000641 9a15
000642 0000
000643 9a16
000644 0000
000645 0000
000646 0000
000647 b11f
000648 9816
000649 fd17
00064a cff7
00064b 0000
00064c 0000
00064d 0000
00064e 9817
00064f 9815
000650 ef1f
000651 bb10
000652 0000
000653 0000
000654 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
000655 9621                      	adiw Y, 1
000656 bfde                      	out SPH, YH
000657 bfcd                      	out SPL, YL
000658 91df                      	pop YH
000659 91cf                      	pop YL
00065a 913f                      	pop r19
00065b 912f                      	pop r18
00065c 911f                      	pop r17
00065d 910f                      	pop r16
00065e 9508                      	ret
                                 
                                 ; expects an ASCII character in r19 and displays to current cursor position
                                 WRITE:
                                 	; write to r16
                                 
00065f 930f                      	push r16
000660 931f                      	push r17
000661 93cf                      	push YL
000662 93df                      	push YH
000663 b7cd                      	in YL, SPL
000664 b7de                      	in YH, SPH
000665 9721                      	sbiw Y, 1
                                 
000666 bb31
000667 9a17
000668 9815
000669 0000
00066a 9a16
00066b 0000
00066c 0000
00066d 0000
00066e 9816
00066f 0000
000670 0000
000671 0000                      	lcd_write_data
000672 2711
000673 bb10
000674 9817
000675 9a15
000676 0000
000677 9a16
000678 0000
000679 0000
00067a 0000
00067b b11f
00067c 9816
00067d fd17
00067e cff7
00067f 0000
000680 0000
000681 0000
000682 9817
000683 9815
000684 ef1f
000685 bb10
000686 0000
000687 0000
000688 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
000689 9621                      	adiw Y, 1
00068a bfde                      	out SPH, YH
00068b bfcd                      	out SPL, YL
00068c 91df                      	pop YH
00068d 91cf                      	pop YL
00068e 911f                      	pop r17
00068f 910f                      	pop r16
000690 9508                      	ret
                                 
                                 ; expects digit in r19, ASCII '0' in r23
                                 ;.macro display_digit
                                 ;	add r19, r23              ; Convert to ASCII ('0' = 0x30)
                                 ;	rcall WRITE
                                 ;.endmacro
                                 ;;expects dividend in r26 and divisor in r25
                                 ;.macro divide
                                 ;	clr r27                   ; Clear quotient register
                                 ;divide_loop:
                                 ;    cp r26, r25               ; Compare r26 (dividend) with r25 (divisor)
                                 ;    brlo divide_done           ; If r26 < r25, exit loop
                                 ;
                                 ;    sub r26, r25              ; Subtract divisor from dividend
                                 ;    inc r27                   ; Increment quotient
                                 ;    rjmp divide_loop           ; Repeat until r26 < r28
                                 ;divide_done:
                                 ;	nop
                                 ;.endmacro
                                 ; parameter passed into r24
                                 ; conflict registers: 23, 25, 26, 27, 19
                                 decimal_conversion:
                                 ;prologue
000691 933f                      	push r19
000692 937f                      	push r23
000693 938f                      	push r24
000694 939f                      	push r25
000695 93af                      	push r26
000696 93bf                      	push r27
000697 93cf                      	push YL
000698 93df                      	push YH
000699 b7cd                      	in YL, SPL
00069a b7de                      	in YH, SPH
00069b 9721                      	sbiw Y, 1
                                 
00069c e370                      	ldi r23, '0'				; load ASCII '0'
00069d 2fa8                      	mov r26, r24				; Load result (y) r24 into register r26.
                                 
00069e e694                      	ldi r25, 100				; Load 100 for division
00069f 27bb
0006a0 17a9
0006a1 f018
0006a2 1ba9
0006a3 95b3
0006a4 cffb
0006a5 0000                          divide				; Call divide subroutine
0006a6 2f3b                      	mov r19, r27				; Get the quotient (hundreds digit) in r19
0006a7 3030                          cpi r19, 0					; Check if it's zero
0006a8 f409                      	brne from_hundreds
0006a9 c00e                      	rjmp no_hundreds
                                 
                                 from_hundreds:
0006aa 0f37
0006ab dfb3                      	display_digit
0006ac e09a                      	ldi r25, 10					; Load 10 for division
0006ad 27bb
0006ae 17a9
0006af f018
0006b0 1ba9
0006b1 95b3
0006b2 cffb
0006b3 0000                          divide				; Call divide subroutine
0006b4 2f3b                      	mov r19, r27				; move quotient to r19
0006b5 0f37
0006b6 dfa8                      	display_digit				; always display tens if from hundreds
0006b7 c00e                      	rjmp display_ones_digit
                                 
                                 no_hundreds:
0006b8 e09a                      	ldi r25, 10					; Load 10 for division
0006b9 27bb
0006ba 17a9
0006bb f018
0006bc 1ba9
0006bd 95b3
0006be cffb
0006bf 0000                          divide				; Call divide subroutine
0006c0 30b0                      	cpi r27, 0                ; Check if it's zero
0006c1 f021                      	breq display_ones_digit
0006c2 2f3b                      	mov r19, r27
0006c3 0f37
0006c4 df9a                      	display_digit
0006c5 c000                      	rjmp display_ones_digit
                                 
                                 display_ones_digit:
0006c6 2f3a                      	mov r19, r26
0006c7 0f37
0006c8 df96                      	display_digit
                                 
                                 	;epilogue
0006c9 9621                      	adiw Y, 1
0006ca bfde                          out SPH, YH
0006cb bfcd                          out SPL, YL
0006cc 91df                          pop YH
0006cd 91cf                          pop YL
0006ce 91bf                          pop r27
0006cf 91af                          pop r26
0006d0 919f                          pop r25
0006d1 918f                      	pop r24
0006d2 917f                          pop r23
0006d3 913f                          pop r19
0006d4 9508                          ret
                                 
                                 ; display the front patient in data memory to LCD display mode
                                 display_front_patient:
0006d5 93cf                      	push YL
0006d6 93df                      	push YH
0006d7 93ef                      	push ZL
0006d8 93ff                      	push ZH
0006d9 930f                      	push r16
0006da 933f                      	push r19
0006db 939f                      	push r25
0006dc 938f                      	push r24
                                 
0006dd e0f2                      	ldi ZH, high(first_patient)		; load memory addr
0006de e0ec                      	ldi ZL, low(first_patient)
0006df 9181                      	ld	r24, Z+
0006e0 8190                      	ld  r25, Z
0006e1 01ec                      	movw Y, r24
0006e2 9139                      	ld  r19, Y+ 					; load lower byte of pID into r19
0006e3 ddbb                      	rcall DISPLAY_NUMBER_RIGHT		; display bottom righ aligned pID
0006e4 dd83                      	rcall DISPLAY_BOTTOM_LEFT		; move cursor to bottom left
0006e5 9621                      	adiw Y, 1						; skip over higher byte of pID
                                 	; loop over reamining 8 bytes of chars
0006e6 e008                      	ldi r16, 8
                                 display_loop:
0006e7 9139                      	ld r19, Y+
0006e8 3030                      	cpi r19, 0
0006e9 f021                      	breq end_display
0006ea df74                      	rcall write
0006eb 950a                      	dec r16
0006ec 3000                      	cpi r16, 0
0006ed f7c9                      	brne display_loop
                                 end_display:
                                 	;epilogue
0006ee 918f                      	pop r24
0006ef 919f                      	pop r25
0006f0 913f                      	pop r19
0006f1 910f                      	pop r16
0006f2 91ff                      	pop ZH
0006f3 91ef                      	pop ZL
0006f4 91df                      	pop YH
0006f5 91cf                      	pop YL
0006f6 9508                      	ret
                                 
                                 value_lookup:
0006f7 0201
0006f8 4103
0006f9 0504
0006fa 4206
0006fb 0807
0006fc 4309
0006fd 002a
0006fe 4423                      	.db		1, 2, 3, 0x41, 4, 5, 6, 0x42, 7, 8, 9, 0x43, 0x2A, 0, 0x23, 0x44
                                 ascii_lookup:
0006ff 6261
000700 6463
000701 6665
000702 6867
000703 6a69
000704 6c6b
000705 6e6d
000706 706f
000707 7372
000708 7574
000709 7776
00070a 7978


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  62 z  :  30 r0 :   0 r1 :   0 r2 :  12 r3 :  20 r4 :  18 
r5 :  54 r6 :  10 r7 :  18 r8 :   8 r9 :   0 r10:   8 r11:   9 r12:   3 
r13:   0 r14:   0 r15:   0 r16: 224 r17: 157 r18:  52 r19:  93 r20:   0 
r21:   0 r22:   0 r23:   7 r24:  35 r25:  24 r26:  44 r27:  34 r28:  55 
r29:  55 r30:  51 r31:  51 
Registers used: 25 out of 35 (71.4%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   5 add   :  12 adiw  :  17 and   :   3 
andi  :  10 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  11 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 brlt  :   1 brmi  :   0 
brne  :  40 brpl  :   0 brsh  :   4 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   : 121 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  49 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  26 cpc   :   0 
cpi   :  21 cpse  :   0 dec   :  13 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  47 inc   :  16 jmp   :   4 ld    :  25 ldd   :   0 ldi   : 195 
lds   :   7 lpm   :   4 lsl   :   3 lsr   :   2 mov   :  39 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   : 303 or    :   0 
ori   :  10 out   :  87 pop   : 124 push  : 124 rcall :  81 ret   :  16 
reti  :   4 rjmp  :  43 rol   :   0 ror   :   0 sbc   :   0 sbci  :   6 
sbi   :  53 sbic  :   0 sbis  :   0 sbiw  :  10 sbr   :   1 sbrc  :  16 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :  17 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  40 std   :   0 sts   :  31 sub   :   3 subi  :   6 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 46 out of 116 (39.7%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e18   3402     42   3444  262144   1.3%
[.dseg] 0x000200 0x000214      0     20     20    8192   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
