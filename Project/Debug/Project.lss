
AVRASM ver. 2.2.8  C:\Users\nsoo1\OneDrive\Documents\UniDocuments\COMP9032\Project\Project\main.asm Thu Nov 14 07:46:27 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
C:\Users\nsoo1\OneDrive\Documents\UniDocuments\COMP9032\Project\Project\main.asm(15): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
C:\Users\nsoo1\OneDrive\Documents\UniDocuments\COMP9032\Project\Project\main.asm(15): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Project.asm
                                 ;
                                 ; Created: 5/11/2024 11:29:53 AM
                                 ; Author : nsoo1
                                 ;
                                 
                                      ; Patient struct ;
                                 ;..........................;
                                 ;   Patient ID - 2 bytes   ;
                                 ;..........................;
                                 ;  Patient Name - 8 bytes  ;
                                 ;..........................;
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ STROBE = 1
                                 
                                 .equ PORTCDIR				= 0b11110000
                                 .equ PORTBDIR				= 0b00001111
                                 .equ INITCOLMASK			= 0b01111111
                                 .equ INITROWMASK			= 0b00001000
                                 .equ CHECKROWMASK			= 0b00001111
                                 
                                 .equ KEYPADSIZE				= 4
                                 .equ NSTATES				= 3
                                 .equ LARGESTDIGIT			= 9
                                 
                                 .equ A						= 3
                                 .equ B						= 7
                                 .equ C						= 11
                                 .equ D						= 15
                                 .equ zero_key				= 13
                                 .equ nine					= 10
                                 .equ null					= 0xFF
                                 
                                 .equ P_SIZE					= 10    ; Size of patient struct: 10 bytes
                                 .equ INIT_ID				= 100   ; Patient IDs will start from 100
                                 
                                 .equ max_name				= 8
                                 
                                 .def w						= r16	; working register
                                 .def entry_mode				= r2
                                 .def new_name_cur			= r3
                                 .def key_pressed			= r4
                                 .def zero					= r5	; register always set to 0
                                 
                                 .def last_key_pressed		= r6
                                 .def times_key_pressed		= r7
                                 .def is_timer_active		= r8
                                 
                                 .def arg0					= r10
                                 .def arg1					= r11
                                 .def arg2					= r12
                                 
                                 .dseg								; Start the data segment
                                 .org 0x0200							; from address 0x0200
                                 
000200                           new_name:					.byte max_name
000208                           temp_name:					.byte 8            ; Queue functions assume 8 bytes for name
000210                           num_patients:				.byte 2
000212                           init_pid:					.byte 2                                  
000214                           first_patient:				.byte 2                 
000216                           last_patient:				.byte 2  ; Reserve space for Queue variables in data memory
000218                           is_keypad_timeout:			.byte 1
                                 
                                 
                                 .cseg
                                 .org 0x0000
000000 c047                      	rjmp	reset
000001 0000                      	nop
000002 940c 0001                 	jmp		pb1
000004 940c 0002                 	jmp		pb2
                                 
                                 .org OVF3addr
000046 940c 0201                 	jmp		keypad_timeout
                                 
                                 
                                 ; expects digit in r19, ASCII '0' in r23
                                 .macro display_digit
                                 	add r19, r23				; Convert to ASCII ('0' = 0x30)
                                 	rcall WRITE
                                 .endmacro
                                 
                                 ;expects dividend in r26 and divisor in r25
                                 .macro divide
                                 	clr r27                     ; Clear quotient register
                                 divide_loop:
                                     cp r26, r25                 ; Compare r26 (dividend) with r25 (divisor)
                                     brlo divide_done            ; If r26 < r25, exit loop
                                 
                                     sub r26, r25				; Subtract divisor from dividend
                                     inc r27						; Increment quotient
                                     rjmp divide_loop            ; Repeat until r26 < r28
                                 divide_done:
                                 	nop
                                 .endmacro
                                 
                                 ; changes registers:
                                 ; zl
                                 ; zh
                                 .macro debounce
                                 	ldi zl, 0b11111111
                                 	ldi zh, 0b11111111
                                 
                                 debounce_loop:
                                 	nop
                                 	subi zl, 1
                                 	sbci zh, 0
                                 	brne debounce_loop
                                 .endmacro
                                 
                                 ; Reads name from temp_name variable in data memory,
                                 ; stores it in newest patient struct on queue.
                                 ; Assumes address of patient_name stored in Y.
                                 .macro read_name
                                 	ldi ZH, high(temp_name)
                                 	ldi ZL, low(temp_name)
                                 	ldi r26, 8
                                 read_loop:
                                 	ld  r27, Z+
                                 	st  Y+, r27
                                 	dec r26
                                 	cpi r26, 0
                                 	brne read_loop                     ; Continue reading up to 8 chars
                                 .endmacro 
                                 
                                 ; init patient queue
                                 ; call first before any registers are used
                                 .macro init_queue
                                 	ldi  YH, high(num_patients)                      
                                 	ldi  YL, low(num_patients)
                                 	clr  r24
                                 	clr  r25
                                 	st   Y+, r24                       ; Init num_patients = 0
                                 	st   Y+, r25
                                 	ldi  r24, INIT_ID-1				   ; Init patient ID
                                 	st   Y, r24
                                 	adiw Y, 2
                                     mov  r24, YL
                                 	mov  r25, YH
                                 	adiw r24, 8                        ; Adjust num bytes here if needed
                                 	st   Y+, r24
                                 	st   Y+, r25                       ; init pointer to first patient
                                     ldi  r25, high(init_pid)
                                 	ldi  r24, low(init_pid)
                                 	st   Y+, r24
                                 	st   Y, r25                        ; init pointer to last patient
                                 .endmacro
                                 
                                 ; all subroutines expects parameters in r19
                                 ; Sub routines:
                                 ; INTIALISE_LCD			: initialises LCD display
                                 ; LCD_DISPLAY_MODE		: clears the LCD display and sets it to display mode
                                 ; DISPLAY_BOTTOM_LEFT	: moves the cursor to bottom left
                                 ; DISPLAY_NUMBER_RIGHT	: takes unsigned int as parameter in r19 and displays bottom right aligned number
                                 ; LCD_ENTRY_MODE		: clears the LCD display and sets it to entry mode
                                 ; ENTRY_MESSAGE			: takes unsigned int as parameter in r19 and displays descriptive message showing patient number
                                 ; BACKSPACE				: delete 1 char from patient input
                                 ; WRITE					: write 1 char to LCD at current cursor position
                                 ; decimal_conversion	: shouldn't need to use this since i integrated the decimal conversion into all the LCD places,
                                 ;						: ENTRY_MESSAGE and DISPLAY_NUMBER_RIGHT should cover all use cases for displaying numbers on LCD
                                 ; Replace with your application code
                                 .macro set_LCD_RS
                                 	sbi PORTA, LCD_RS
                                 .endmacro
                                 .macro clr_LCD_RS
                                 	cbi PORTA, LCD_RS
                                 .endmacro
                                 
                                 .macro set_LCD_E
                                 	sbi PORTA, LCD_E
                                 .endmacro
                                 .macro clr_LCD_E
                                 	cbi PORTA, LCD_E
                                 .endmacro
                                 
                                 .macro set_LCD_RW
                                 	sbi PORTA, LCD_RW
                                 .endmacro
                                 .macro clr_LCD_RW
                                 	cbi PORTA, LCD_RW
                                 .endmacro
                                 
                                 .macro set_strobe
                                 	sbi PORTA, STROBE
                                 .endmacro
                                 .macro clr_strobe
                                 	cbi PORTA, STROBE
                                 .endmacro
                                 
                                 .macro lcd_write_cmd		; set LCD instructions, does not wait for BF
                                 	out PORTF, r16			; set r16 port
                                 	clr_LCD_RS
                                 	clr_LCD_RW				; RS = 0, RW = 0 for a command write
                                 	nop
                                 	set_LCD_E		
                                 	nop
                                 	nop
                                 	nop
                                 	clr_LCD_E
                                 	nop
                                 	nop
                                 	nop
                                 .endmacro
                                 
                                 .macro lcd_write_data		; write r16 to LCD, waits for BF
                                 	out PORTF, r19			; set r16 port
                                 	set_LCD_RS
                                 	clr_LCD_RW				; RS = 1, RW = 0 for r16 write
                                 	nop
                                 	set_LCD_E		;
                                 	nop
                                 	nop
                                 	nop
                                 	clr_LCD_E
                                 	nop
                                 	nop
                                 	nop
                                 .endmacro
                                 
                                 .macro lcd_wait_busy		; read from LCD until BF is clear
                                 	clr r17
                                 	out DDRF, r17			; LCD port input
                                 	clr_LCD_RS
                                 	set_LCD_RW				; RS = 0, RW = 1, cmd port read
                                 busy:
                                 	nop						
                                 	set_LCD_E				; turn on enable pin
                                 	nop						; r16 delay
                                 	nop
                                 	nop
                                 	in r17, PINF			; read value from LCD
                                 	clr_LCD_E				; clear enable pin
                                 	sbrc r17, 7			; skip next if busy flag not set
                                 	rjmp busy				; else loop
                                 
                                 	nop
                                 	nop
                                 	nop
                                 	clr_LCD_RS
                                 	clr_LCD_RW				; RS, RW = 0, IR write
                                 	ser r17
                                 	out DDRF, r17			; LCD port output
                                 	nop
                                 	nop
                                 	nop
                                 .endmacro
                                 
                                 .macro delay				; delay for 1us
                                 loop1:
                                 	ldi r17, 3				; 1
                                 loop2:
                                 	dec r17				; 1
                                 	nop						; 1
                                 	brne loop2				; 2 taken, 1 not ----> inner loop total is 11 cycles
                                 	subi r18, 1				; 1
                                 	sbci r19, 0				; 1
                                 	brne loop1				; 2 taken, each outer iteration is 11 + 1 + 1 + 1 + 2 = 16 clock cycles at 16Mhz = 1us
                                 .endmacro
                                 
                                 ;______________________________________________________________________
                                 ; INITIALISE
                                 ;______________________________________________________________________
                                 reset:
000048 e0d2
000049 e1c0
00004a 2788
00004b 2799
00004c 9389
00004d 9399
00004e e683
00004f 8388
000050 9622
000051 2f8c
000052 2f9d
000053 9608
000054 9389
000055 9399
000056 e092
000057 e182
000058 9389
000059 8398                      	init_queue
00005a d1ce                      	rcall	INITIALISE_LCD
00005b d2d9                      	rcall	LCD_DISPLAY_MODE
                                 
00005c 2455                      	clr		zero
                                 
00005d ef00                      	ldi		w, PORTCDIR					; initialise pin directions
00005e b907                      	out		DDRC, w
00005f e00f                      	ldi		w, PORTBDIR
000060 b904                      	out		DDRB, w
                                 
000061 ef0f                      	ldi		w, null						; initialise last key pressed
000062 2e60                      	mov		last_key_pressed, w
                                 
000063 2477                      	clr		times_key_pressed			; initialise times last key pressed
000064 2422                      	clr		entry_mode
                                 
000065 e002                      	ldi		w, high(new_name)
000066 2ea0                      	mov		arg0, w
                                 
000067 e000                      	ldi		w, low(new_name)
000068 2eb0                      	mov		arg1, w
                                 
000069 e008                      	ldi		w, max_name
00006a 2ec0                      	mov		arg2, w
                                 
00006b d0ae                      	rcall	initialise_array
                                 
00006c 2433                      	clr		new_name_cur
00006d 2488                      	clr		is_timer_active
                                 
00006e e000                      	ldi		w, 0b00000000
00006f 9300 0090                 	sts		TCCR3A, w
000071 e000                      	ldi		w, 0b00000000
000072 9300 0091                 	sts		TCCR3B, w
                                 
000074 9250 0071                 	sts		TIMSK3, zero
                                 
000076 e0f2                      	ldi		zh, high(is_keypad_timeout)
000077 e1e8                      	ldi		zl, low(is_keypad_timeout)
000078 8250                      	st		z, zero
                                 	;ldi		w, (1 << TOIE1)
                                 	;sts		TIMSK1, w
                                 
                                 	; push button interrupts
000079 e002                      	ldi		w, (0b10 << ISC00)
00007a 6008                      	ori		w, (0b10 << ISC10)
00007b 9300 0069                 	sts		EICRA, w
00007d b905                      	out		PORTB, w
                                 
00007e b30d                      	in		w, EIMSK
00007f 6001                      	ori		w, (1 << INT0)
000080 6002                      	ori		w, (1 << INT1)
000081 bb0d                      	out		EIMSK, w
                                 
000082 9478                      	sei
                                 
                                 ;______________________________________________________________________
                                 ; MAIN LOOP
                                 ;______________________________________________________________________
                                 loop:
000083 d0c1                      	rcall	scan_keypad					; poll until key is pressed then return key index in r24
000084 2e48                      	mov		key_pressed, r24
                                 
000085 9250 0091                 	sts		TCCR3B, zero
000087 9250 0071                 	sts		TIMSK3, zero					; disable keypad timeout temporarily
                                 
000089 e0f2                      	ldi		zh, high(is_keypad_timeout)
00008a e1e8                      	ldi		zl, low(is_keypad_timeout)
00008b 8100                      	ld		w, z
00008c 1505                      	cp		w, zero
00008d f031                      	breq	no_timeout
00008e 8250                      	st		z, zero
00008f 9433                      	inc		new_name_cur					; new_name_cur++
000090 ef0f                      	ldi		w, null
000091 2e60                      	mov		last_key_pressed, w				; last_key_pressed = null
000092 2477                      	clr		times_key_pressed				; times_key_pressed = 0
000093 2488                      	clr		is_timer_active
                                 
                                 
                                 no_timeout:
                                 	;	if entry_mode is false and key_pressed == 'A'
                                 	;		enter entry mode
                                 							
000094 1425                      	cp		entry_mode, zero
000095 f439                      	brne	not_display_mode
000096 e003                      	ldi		w, A
000097 1640                      	cp		key_pressed, w
000098 f421                      	brne	not_display_mode
000099 9423                      	inc		entry_mode
00009a d3ce                      	rcall	LCD_ENTRY_MODE
00009b d2eb                      	rcall	DISPLAY_BOTTOM_LEFT
00009c c073                      	rjmp	end_process_key
                                 
                                 not_display_mode:
                                 	;	else if entry_mode is true
                                 	;		handle keys which are not 'A'
00009d 1425                      	cp		entry_mode, zero
00009e f0e1                      	breq	to_end_process_key
                                 	;		if new_name_cur != 0 and key_pressed == 'B'
                                 	;			backspace button is pressed
00009f 1435                      	cp		new_name_cur, zero
0000a0 f079                      	breq	not_backspace
0000a1 e007                      	ldi		w, B
0000a2 1640                      	cp		key_pressed, w
0000a3 f461                      	brne	not_backspace
0000a4 2488                      	clr		is_timer_active					; keypad_timer_stop()
0000a5 943a                      	dec		new_name_cur					; new_name_cur --
                                 	
0000a6 e0f2                      	ldi		zh, high(new_name)				; new_name[new_name_cur] = 0
0000a7 e0e0                      	ldi		zl, low(new_name)
                                 
0000a8 0de3                      	add		zl, new_name_cur
0000a9 1df5                      	adc		zh, zero
                                 
0000aa 8250                      	st		z, zero
                                 
0000ab d475                      	rcall	BACKSPACE
                                 
0000ac ef0f                      	ldi		w, null							; last_key_pressed = null
0000ad 2e60                      	mov		last_key_pressed, w
0000ae 2477                      	clr		times_key_pressed				; times_key_pressed = 0
0000af c060                      	rjmp	end_process_key
                                 
                                 not_backspace:
                                 	;		else if key_pressed == 'C'
                                 	;		clear button is pressed
0000b0 e00b                      	ldi		w, C
0000b1 1640                      	cp		key_pressed, w
0000b2 f449                      	brne	not_clear
0000b3 2488                      	clr		is_timer_active					; keypad_timer_stop()
0000b4 2433                      	clr		new_name_cur					; new_name_cur = 0
                                 	
0000b5 d064                      	rcall	initialise_array
0000b6 d3b2                      	rcall	LCD_ENTRY_MODE
0000b7 d2cf                      	rcall	DISPLAY_BOTTOM_LEFT
                                 
0000b8 ef0f                      	ldi		w, null							; last_key_pressed = null
0000b9 2e60                      	mov		last_key_pressed, w
0000ba 2477                      	clr		times_key_pressed				; times_key_pressed = 0
                                 to_end_process_key:
0000bb c054                      	rjmp	end_process_key
                                 
                                 not_clear:
                                 	;		else if key_pressed == 'D'
                                 	;			enter button is pressed
0000bc e00f                      	ldi		w, D
0000bd 1640                      	cp		key_pressed, w
0000be f489                      	brne	not_enter
                                 
0000bf d0e0                      	rcall	enqueue
0000c0 d274                      	rcall	LCD_DISPLAY_MODE
                                 
0000c1 2488                      	clr		is_timer_active					; keypad_timer_stop()
0000c2 e002                      	ldi		w, high(new_name)				; initialise_array(new_name, 8)
0000c3 2ea0                      	mov		arg0, w
                                 
0000c4 e000                      	ldi		w, low(new_name)
0000c5 2eb0                      	mov		arg1, w
                                 
0000c6 e008                      	ldi		w, max_name
0000c7 2ec0                      	mov		arg2, w
                                 
0000c8 d051                      	rcall	initialise_array
                                 
0000c9 2433                      	clr		new_name_cur					; new_name_cur = 0
0000ca ef0f                      	ldi		w, null							; last_key_pressed = null
0000cb 2e60                      	mov		last_key_pressed, w
0000cc 2477                      	clr		times_key_pressed				; times_key_pressed = 0
0000cd 2422                      	clr		entry_mode						; entry_mode = false
0000ce d266                      	rcall   LCD_DISPLAY_MODE				; Set LCD to display mode
0000cf c040                      	rjmp	end_process_key
                                 
                                 not_enter:
                                 	;		else if key_pressed == 'A'
                                 	;			do nothing
0000d0 e003                      	ldi		w, A
0000d1 1640                      	cp		key_pressed, w
0000d2 f409                      	brne	not_nothing1
0000d3 c03c                      	rjmp	end_process_key
                                 
                                 not_nothing1:
                                 	;		else if key_pressed is on the bottom row
                                 	;			do nothing
0000d4 e00b                      	ldi		w, C
0000d5 9503                      	inc		w
0000d6 1640                      	cp		key_pressed, w
0000d7 f008                      	brlo	not_nothing2
0000d8 c037                      	rjmp	end_process_key
                                 
                                 not_nothing2:
                                 	;		else if key_pressed == '1'
                                 	;			do nothing
0000d9 1445                      	cp		key_pressed, zero
0000da f409                      	brne	not_nothing3
0000db c034                      	rjmp	end_process_key
                                 
                                 not_nothing3:
                                 	;		else if new_name_cur < 8
0000dc e008                      	ldi		w, max_name
0000dd 1630                      	cp		new_name_cur, w
0000de f6e0                      	brsh	to_end_process_key
0000df 2488                      	clr		is_timer_active					; keypad_timer_restart()
0000e0 9483                      	inc		is_timer_active
0000e1 9250 0095                 	sts		TCNT3h, zero
0000e3 9250 0094                 	sts		TCNT3l, zero
                                 	;			if times_key_pressed == 0
                                 	;				first input key pressed
0000e5 1475                      	cp		times_key_pressed, zero
0000e6 f419                      	brne	not_first_key
0000e7 2c64                      	mov		last_key_pressed, key_pressed	; last_key_presed = key_pressed
0000e8 9473                      	inc		times_key_pressed				; times_key_pressed = 1
0000e9 c026                      	rjmp	end_process_key
                                 
                                 not_first_key:
                                 	;			else if last_key_pressed == key_pressed
                                 	;				cycle between letters on the same key
0000ea 1464                      	cp		last_key_pressed, key_pressed
0000eb f499                      	brne	not_same_key
0000ec 9473                      	inc		times_key_pressed
                                 	;				if key_pressed == '9' and times_key_pressed == 5
                                 	;					wrap the number of times key is pressed
0000ed e00a                      	ldi		w, nine
0000ee 1640                      	cp		key_pressed, w
0000ef f431                      	brne	not_nine_wrap
0000f0 e005                      	ldi		w, 5
0000f1 1670                      	cp		times_key_pressed, w
0000f2 f419                      	brne	not_nine_wrap
0000f3 2477                      	clr		times_key_pressed				; times_key_pressed = 1
0000f4 9473                      	inc		times_key_pressed
0000f5 c008                      	rjmp	end_key_wrap
                                 	;				else if key_pressed != '9' and times_key_pressed == 4 
                                 	;					wrap the number of times key is pressed
                                 not_nine_wrap:
0000f6 e00a                      	ldi		w, nine
0000f7 1640                      	cp		key_pressed, w
0000f8 f029                      	breq	end_key_wrap
0000f9 e004                      	ldi		w, 4
0000fa 1670                      	cp		times_key_pressed, w
0000fb f411                      	brne	end_key_wrap
0000fc 2477                      	clr		times_key_pressed				; times_key_pressed = 1
0000fd 9473                      	inc		times_key_pressed
                                 end_key_wrap:
0000fe c011                      	rjmp	end_process_key
                                 
                                 not_same_key:
                                 	;			else
                                 	;				enter letter
0000ff e008                      	ldi		w, max_name
000100 1630                      	cp		new_name_cur, w
000101 f470                      	brsh	end_process_key
                                 
000102 e0f2                      	ldi		zh, high(new_name)				; new_name[new_name_cur] = keypad_to_ascii(last_key_pressed, times_key_pressed)
000103 e0e0                      	ldi		zl, low(new_name)
                                 
000104 0de3                      	add		zl, new_name_cur
000105 1df5                      	adc		zh, zero
                                 
000106 2ca6                      	mov		arg0, last_key_pressed
000107 2cb7                      	mov		arg1, times_key_pressed
000108 d021                      	rcall	keypad_to_ascii
                                 
000109 8380                      	st		z, r24
                                 
00010a 2f38                      	mov		r19, r24
00010b d472                      	rcall	WRITE
                                 
00010c 9433                      	inc		new_name_cur					; new_name_cur ++
00010d 2c64                      	mov		last_key_pressed, key_pressed	; last_key_pressed = key_pressed
00010e 2477                      	clr		times_key_pressed				; times_key_pressed = 1
00010f 9473                      	inc		times_key_pressed
                                 end_process_key:
                                 
000110 1485                      	cp		is_timer_active, zero
000111 f031                      	breq	timer_not_active
000112 e004                      	ldi		w, 0b00000100
000113 9300 0091                 	sts		TCCR3B, w
000115 e001                      	ldi		w, (1 << TOIE3)
000116 9300 0071                 	sts		TIMSK3, w
                                 timer_not_active:
                                 
000118 b885                      	out		PORTB, is_timer_active
                                 
000119 cf69                      	rjmp	loop
                                 
                                 ;______________________________________________________________________
                                 ; HELPER FUNCTIONS
                                 ;______________________________________________________________________
                                 
                                 ;______________________________________________________________________
                                 ; initialise_array
                                 ; arguments
                                 ; array - arg0:arg1 (r10:r11)
                                 ; length - arg2 (r12)
                                 ;______________________________________________________________________
                                 initialise_array:
00011a 93ef                      	push	zl
00011b 93ff                      	push	zh
00011c 931f                      	push	r17
                                 
00011d 2dfa                      	mov		zh, arg0
00011e 2deb                      	mov		zl, arg1
                                 
00011f 2d1c                      	mov		r17, arg2
                                 
000120 d108                      	rcall	INITIALISE_LCD
                                 
                                 initialise_array_loop:
000121 1515                      	cp		r17, zero
000122 f019                      	breq	end_initialise_array_loop
                                 
                                 	;ld		r27, z
                                 	;cp		r27, zero
                                 	;breq	dont_write
                                 	;lcd_write_data
                                 	;lcd_wait_busy
                                 ;dont_write:
000123 9251                      	st		z+, zero
                                 
000124 951a                      	dec		r17
000125 cffb                      	rjmp	initialise_array_loop
                                 end_initialise_array_loop:
                                 
000126 911f                      	pop		r17
000127 91ff                      	pop		zh
000128 91ef                      	pop		zl
000129 9508                      	ret
                                 
                                 ;______________________________________________________________________
                                 ; keypad_to_ascii
                                 ; arguments
                                 ; last_key_pressed - arg0 (r10)
                                 ; times_key_pressed - arg1 (r11)
                                 ;______________________________________________________________________
                                 keypad_to_ascii:
00012a 93ef                      	push	zl
00012b 93ff                      	push	zh
00012c 930f                      	push	w
00012d 931f                      	push	r17
                                 
                                 	; get keypad number value from lookup table
00012e e0fb                      	ldi		zh, high(value_lookup << 1)
00012f eee8                      	ldi		zl, low(value_lookup << 1)
                                 
000130 0dea                      	add		zl, arg0
000131 1df5                      	adc		zh, zero
                                 
                                 	; do maths
000132 9104                      	lpm		w, z
000133 950a                      	dec		w
000134 950a                      	dec		w
000135 94ba                      	dec		arg1
                                 
000136 2f10                      	mov		r17, w
000137 0f11                      	lsl		r17
000138 0f01                      	add		w, r17
000139 0d0b                      	add		w, arg1
                                 
                                 	; get ascii value of input character from lookup table
00013a e0fb                      	ldi		zh, high(ascii_lookup << 1)
00013b efe8                      	ldi		zl, low(ascii_lookup << 1)
                                 
00013c 0fe0                      	add		zl, w
00013d 1df5                      	adc		zh, zero
                                 
00013e 9104                      	lpm		w, z
00013f 2f80                      	mov		r24, w
                                 
000140 911f                      	pop		r17
000141 910f                      	pop		w
000142 91ff                      	pop		zh
000143 91ef                      	pop		zl
000144 9508                      	ret
                                 
                                 ;______________________________________________________________________
                                 ; keypad_to_ascii
                                 ; arguments
                                 ; last_key_pressed - arg0 (r10)
                                 ; times_key_pressed - arg1 (r11)
                                 ;______________________________________________________________________
                                 scan_keypad:
000145 930f                      	push	w
000146 922f                      	push	r2
000147 923f                      	push	r3
000148 924f                      	push	r4
000149 925f                      	push	r5
00014a 931f                      	push	r17
00014b 932f                      	push	r18
                                 
00014c 93ef                      	push	zl
00014d 93ff                      	push	zh
                                 
00014e e004                      	ldi		w, KEYPADSIZE				; initialise keypad size
00014f 2e40                      	mov		r4, w
000150 2422                      	clr		r2							; clear column
000151 e72f                      	ldi		r18, INITCOLMASK			; initialise column mask
                                 
                                 col_loop:
000152 1424                      	cp		r2, r4						; if maximum columns reached
000153 f014                      	brlt	push_mask
000154 e72f                      	ldi		r18, INITCOLMASK			; reset the column mask
000155 2422                      	clr		r2							; reset column count
                                 push_mask:
000156 b928                      	out		PORTC, r18
000157 ef0f                      	ldi		w, 0b11111111				; delay to allow pin to update
                                 update_delay:
000158 950a                      	dec		w
000159 f7f1                      	brne	update_delay
                                 
00015a b106                      	in		w, PINC						; read portc
00015b 700f                      	andi	w, CHECKROWMASK				; read only the inputs
00015c 300f                      	cpi		w, CHECKROWMASK
00015d f099                      	breq	nextcol						; check if any of the buttons are pressed
                                 
00015e 2e50                      	mov		r5, w						; save copy of inputs
00015f 2433                      	clr		r3							; initialise row scan
000160 e018                      	ldi		r17, INITROWMASK
                                 row_loop:
000161 2d05                      	mov		w, r5						; get input value
000162 2301                      	and		w, r17						; mask out single bit
000163 f449                      	brne	inc_row						; if button pressed
000164 efef
000165 efff
000166 0000
000167 50e1
000168 40f0
000169 f7e1                      	debounce							; debounce button
00016a b106                      	in		w, PINC						; read port again
00016b 2301                      	and		w, r17						; check value of pin again
00016c f041                      	breq	resolve						; if button still pressed resolve value
                                 inc_row:
00016d 9516                      	lsr		r17							; shift row mask
00016e 9433                      	inc		r3							; increment row count
00016f 1434                      	cp		r3, r4
000170 f781                      	brne	row_loop
                                 nextcol:
000171 9526                      	lsr		r18							; shift column mask right
000172 6820                      	sbr		r18, 0b10000000				; re-set left most bit
000173 9423                      	inc		r2							; increment column count
000174 cfdd                      	rjmp	col_loop
                                 
                                 resolve:
000175 0c33                      	lsl		r3							; get key index by adding row * 4 + column
000176 0c33                      	lsl		r3
000177 2d03                      	mov		w, r3
000178 0d02                      	add		w, r2
                                 
000179 2f80                      	mov		r24, w
                                 
                                 hold_loop:								; wait until button is unpressed before continuing to read keypad
00017a b106                      	in		w, PINC						; read port again
00017b 2301                      	and		w, r17						; check value of pin again
00017c f3e9                      	breq	hold_loop					; if button still pressed don't allow key to be continually read
                                 
00017d 91ff                      	pop		zh
00017e 91ef                      	pop		zl
                                 
00017f 912f                      	pop		r18
000180 911f                      	pop		r17
000181 905f                      	pop		r5
000182 904f                      	pop		r4
000183 903f                      	pop		r3
000184 902f                      	pop		r2
000185 910f                      	pop		w
000186 9508                      	ret
                                 
                                 ; Clears temp_name variable in memory
                                 clear_name:
000187 93cf                      	push YL
000188 93df                      	push YH
000189 930f                      	push r16
00018a 931f                      	push r17
00018b e0d2                      	ldi  YH, high(temp_name)
00018c e0c8                      	ldi  YL, low(temp_name)
00018d e008                      	ldi  r16, 8
00018e e010                      	ldi  r17, 0
                                 delete:
00018f 9319                      	st   Y+, r17
000190 950a                      	dec  r16
000191 3000                      	cpi  r16, 0
000192 f7e1                      	brne delete
000193 911f                      	pop  r17
000194 910f                      	pop  r16
000195 91ff                      	pop  ZH
000196 91ef                      	pop  ZL
000197 9508                      	ret
                                 
                                 ; Returns length of queue in r25:r24
                                 get_queue_len:
000198 93cf                      	push YL
000199 93df                      	push YH
00019a e0d2                      	ldi  YH, high(num_patients)
00019b e1c0                      	ldi  YL, low(num_patients)
00019c 9189                      	ld   r24, Y+
00019d 8198                      	ld   r25, Y                 ; Stores queue length (num_patients) in r25:r24
00019e 91df                      	pop  YH
00019f 91cf                      	pop  YL
                                 
                                 ; Enqueues new patient
                                 ; Assigns pid and returns pointer to location of
                                 ; patient struct in data memory.
                                 ; Should ideally be done with interrupts disabled
                                 ; to avoid race conditions.
                                 enqueue:
0001a0 93cf                      	push YL
0001a1 93df                      	push YH
0001a2 93ef                      	push ZL
0001a3 93ff                      	push ZH
0001a4 93af                      	push r26
0001a5 93bf                      	push r27
0001a6 e0d2                      	ldi  YH, high(last_patient)
0001a7 e1c6                      	ldi  YL, low(last_patient)
0001a8 91a9                      	ld   r26, Y+
0001a9 81b8                      	ld   r27, Y
0001aa 01fd                      	movw Z, r26                    ; Store pointer to previous end of Q
0001ab 961a                      	adiw r26, P_SIZE
0001ac 83b8                      	st   Y, r27
0001ad 93aa                      	st   -Y, r26                   ; Update pointer to last patient in queue
0001ae 01ed                      	movw Y, r26                    ; Move Y pointer to new_patient
0001af 01cd                      	movw r24, r26				   ; Move address of new_patient to return registers
0001b0 91a1                      	ld   r26, Z+
0001b1 81b0                      	ld   r27, Z                    ; Load most recent pid
0001b2 9611                      	adiw r26, 1					   ; Increment
0001b3 93a9                      	st   Y+, r26
0001b4 93b9                      	st   Y+, r27			       ; Assign new pid to next patient
0001b5 e0f2
0001b6 e0e8
0001b7 e0a8
0001b8 91b1
0001b9 93b9
0001ba 95aa
0001bb 30a0
0001bc f7d9                      	read_name					   ; Reads in patient name from data memory
0001bd dfc9                      	rcall clear_name
0001be e0d2                      	ldi  YH, high(num_patients)
0001bf e1c0                      	ldi  YL, low(num_patients)  
0001c0 91a9                      	ld   r26, Y+
0001c1 81b8                      	ld   r27, Y
0001c2 9611                      	adiw r26, 1                 
0001c3 83b8                      	st   Y, r27
0001c4 93aa                      	st   -Y, r26				   ; Update num_patients last                     
0001c5 91bf                      	pop  r27
0001c6 91af                      	pop  r26
0001c7 91ff                      	pop  ZH
0001c8 91ef                      	pop  ZL
0001c9 91df                      	pop  YH
0001ca 91cf                      	pop  YL
0001cb 9508                      	ret
                                 
                                 ; Dequeues first patient from queue and discards
                                 ; Does not return any values.
                                 ; Should ideally be done with interrupts disabled
                                 ; to avoid race conditions.	
                                 dequeue:
0001cc 93df                      	push YH
0001cd 93cf                      	push YL
0001ce 939f                      	push r25
0001cf 938f                      	push r24
0001d0 93bf                      	push r27
0001d1 93af                      	push r26
0001d2 e0d2                      	ldi  YH, high(num_patients)
0001d3 e1c0                      	ldi  YL, low(num_patients)      
0001d4 91a9                      	ld   r26, Y+
0001d5 81b8                      	ld   r27, Y
0001d6 9711                      	sbiw r26, 1
0001d7 83b8                      	st   Y, r27
0001d8 93aa                      	st  -Y, r26                     ; Update num_patients first
0001d9 e0d2                      	ldi  YH, high(first_patient)    
0001da e1c4                      	ldi  YL, low(first_patient)
0001db 9189                      	ld   r24, Y+					
0001dc 8198                      	ld   r25, Y						; Store address of dequeued patient to be cleared
0001dd 30a0                      	cpi  r26, 0
0001de f469                      	brne not_empty
0001df 30b0                      	cpi  r27, 0
0001e0 f459                      	brne not_empty                  ; If queue not empty, proceed
0001e1 e0d2                      	ldi  YH, high(first_patient)    
0001e2 e1c4                      	ldi  YL, low(first_patient)
0001e3 01de                      	movw r26, Y                     ; Else reset queue variables
0001e4 9618                      	adiw r26, 8
0001e5 93a9                      	st   Y+, r26
0001e6 93b9                      	st   Y+, r27
0001e7 e0b2                      	ldi  r27, high(init_pid)
0001e8 e1a2                      	ldi  r26, low(init_pid)
0001e9 93a9                      	st   Y+, r26
0001ea 83b8                      	st   Y, r27
0001eb c007                      	rjmp clear_patient
                                 not_empty:
0001ec e0d2                      	ldi  YH, high(first_patient)    ; Increment first_patient pointer
0001ed e1c4                      	ldi  YL, low(first_patient)
0001ee 91a9                      	ld   r26, Y+
0001ef 81b8                      	ld   r27, Y
0001f0 961a                      	adiw r26, P_SIZE
0001f1 83b8                      	st   Y, r27
0001f2 93aa                      	st   -Y, r26
                                 clear_patient:
0001f3 01ec                      	movw Y, r24                     
0001f4 e0aa                      	ldi r26, P_SIZE                 ; Then clear patient struct
0001f5 e0b0                      	ldi r27, 0
                                 clear_pt_loop:
0001f6 93b9                      	st  Y+, r27
0001f7 95aa                      	dec r26
0001f8 30a0                      	cpi r26, 0
0001f9 f7e1                      	brne clear_pt_loop
0001fa 91af                      	pop r26
0001fb 91bf                      	pop r27
0001fc 918f                      	pop r24
0001fd 919f                      	pop r25
0001fe 91cf                      	pop YL
0001ff 91df                      	pop YH
000200 9508                      	ret
                                 
                                 
                                 
                                 keypad_timeout:
000201 93ef                      	push	zl
000202 93ff                      	push	zh
000203 92af                      	push	arg0
000204 92bf                      	push	arg1
000205 938f                      	push	r24
000206 933f                      	push	r19
000207 930f                      	push	w
000208 925f                      	push	zero
                                 
000209 b70f                      	in		w, sreg
                                 
00020a 930f                      	push	w
                                 
00020b 2455                      	clr		zero
00020c 9250 0091                 	sts		TCCR3B, zero
00020e 9250 0071                 	sts		TIMSK3, zero					; disable_keypad_timer()
                                 
000210 e0f2                      	ldi		zh, high(new_name)				; new_name[new_name_cur] = keypad_to_ascii(last_key_pressed, times_key_pressed)
000211 e0e0                      	ldi		zl, low(new_name)
                                 
000212 0de3                      	add		zl, new_name_cur
000213 1df5                      	adc		zh, zero
                                 
000214 2ca6                      	mov		arg0, last_key_pressed
000215 2cb7                      	mov		arg1, times_key_pressed
000216 df13                      	rcall	keypad_to_ascii
                                 
000217 8380                      	st		z, r24
                                 
000218 2f38                      	mov		r19, r24
000219 d364                      	rcall	WRITE
                                 
00021a e0f2                      	ldi		zh, high(is_keypad_timeout)
00021b e1e8                      	ldi		zl, low(is_keypad_timeout)
00021c e001                      	ldi		w, 1
00021d 8300                      	st		z, w
                                 
00021e 910f                      	pop		w
                                 
00021f bf0f                      	out		sreg, w
                                 
000220 905f                      	pop		zero
000221 910f                      	pop		w
000222 913f                      	pop		r19
000223 918f                      	pop		r24
000224 90bf                      	pop		arg1
000225 90af                      	pop		arg0
000226 91ff                      	pop		zh
000227 91ef                      	pop		zl
000228 9518                      	reti
                                 	
                                 ; initialise the LCD
                                 INITIALISE_LCD:
                                 	; prologue
000229 930f                      	push r16
00022a 931f                      	push r17
00022b 932f                      	push r18
00022c 933f                      	push r19
00022d 93cf                      	push YL
00022e 93df                      	push YH
00022f b7cd                      	in YL, SPL
000230 b7de                      	in YH, SPH
000231 9721                      	sbiw Y, 1
                                 
000232 ef1f                      	ser r17
000233 bb10                      	out DDRF, r17			; LCD r16
000234 b911                      	out DDRA, r17			; LCD Ctrl
000235 2711                      	clr r17
000236 bb11                      	out PORTF, r17
000237 b912                      	out PORTA, r17
                                 	;
000238 e928                      	ldi r18, low(15000)		; delay 15ms
000239 e33a                      	ldi r19, high(15000)
00023a e013
00023b 951a
00023c 0000
00023d f7e9
00023e 5021
00023f 4030
000240 f7c9                      	delay
000241 e308                      	ldi r16, 0b00111000	; 2 x 5 x 7 r18 = 1, 8bits | N = 1, 2-line | F = 0, 5 x 7 dots
000242 bb01
000243 9817
000244 9815
000245 0000
000246 9a16
000247 0000
000248 0000
000249 0000
00024a 9816
00024b 0000
00024c 0000
00024d 0000                      	lcd_write_cmd			; 1st function cmd set
                                 
00024e e024                      	ldi r18, low(4100)		; delay 4.1ms
00024f e130                      	ldi r19, high(4100)
000250 e013
000251 951a
000252 0000
000253 f7e9
000254 5021
000255 4030
000256 f7c9                      	delay
000257 bb01
000258 9817
000259 9815
00025a 0000
00025b 9a16
00025c 0000
00025d 0000
00025e 0000
00025f 9816
000260 0000
000261 0000
000262 0000                      	lcd_write_cmd			; 2nd function cmd set
                                 
000263 e624                      	ldi r18, low(100)		; delay 4.1ms
000264 e030                      	ldi r19, high(100)
000265 e013
000266 951a
000267 0000
000268 f7e9
000269 5021
00026a 4030
00026b f7c9                      	delay
00026c bb01
00026d 9817
00026e 9815
00026f 0000
000270 9a16
000271 0000
000272 0000
000273 0000
000274 9816
000275 0000
000276 0000
000277 0000                      	lcd_write_cmd			; 3rd function cmd set
000278 bb01
000279 9817
00027a 9815
00027b 0000
00027c 9a16
00027d 0000
00027e 0000
00027f 0000
000280 9816
000281 0000
000282 0000
000283 0000                      	lcd_write_cmd			; final function cmd set
                                 	;
000284 2711
000285 bb10
000286 9817
000287 9a15
000288 0000
000289 9a16
00028a 0000
00028b 0000
00028c 0000
00028d b11f
00028e 9816
00028f fd17
000290 cff7
000291 0000
000292 0000
000293 0000
000294 9817
000295 9815
000296 ef1f
000297 bb10
000298 0000
000299 0000
00029a 0000                      	lcd_wait_busy			; wait until ready
                                 
00029b e008                      	ldi r16, 0b00001000	; LCD display off
00029c bb01
00029d 9817
00029e 9815
00029f 0000
0002a0 9a16
0002a1 0000
0002a2 0000
0002a3 0000
0002a4 9816
0002a5 0000
0002a6 0000
0002a7 0000                      	lcd_write_cmd
0002a8 2711
0002a9 bb10
0002aa 9817
0002ab 9a15
0002ac 0000
0002ad 9a16
0002ae 0000
0002af 0000
0002b0 0000
0002b1 b11f
0002b2 9816
0002b3 fd17
0002b4 cff7
0002b5 0000
0002b6 0000
0002b7 0000
0002b8 9817
0002b9 9815
0002ba ef1f
0002bb bb10
0002bc 0000
0002bd 0000
0002be 0000                      	lcd_wait_busy
                                 
0002bf e001                      	ldi r16, 0b00000001	; LCD display clear
0002c0 bb01
0002c1 9817
0002c2 9815
0002c3 0000
0002c4 9a16
0002c5 0000
0002c6 0000
0002c7 0000
0002c8 9816
0002c9 0000
0002ca 0000
0002cb 0000                      	lcd_write_cmd
0002cc 2711
0002cd bb10
0002ce 9817
0002cf 9a15
0002d0 0000
0002d1 9a16
0002d2 0000
0002d3 0000
0002d4 0000
0002d5 b11f
0002d6 9816
0002d7 fd17
0002d8 cff7
0002d9 0000
0002da 0000
0002db 0000
0002dc 9817
0002dd 9815
0002de ef1f
0002df bb10
0002e0 0000
0002e1 0000
0002e2 0000                      	lcd_wait_busy
                                 
0002e3 e006                      	ldi r16, 0b00000110	; increment, no shift
0002e4 bb01
0002e5 9817
0002e6 9815
0002e7 0000
0002e8 9a16
0002e9 0000
0002ea 0000
0002eb 0000
0002ec 9816
0002ed 0000
0002ee 0000
0002ef 0000                      	lcd_write_cmd
0002f0 2711
0002f1 bb10
0002f2 9817
0002f3 9a15
0002f4 0000
0002f5 9a16
0002f6 0000
0002f7 0000
0002f8 0000
0002f9 b11f
0002fa 9816
0002fb fd17
0002fc cff7
0002fd 0000
0002fe 0000
0002ff 0000
000300 9817
000301 9815
000302 ef1f
000303 bb10
000304 0000
000305 0000
000306 0000                      	lcd_wait_busy
                                 
000307 e00e                      	ldi r16, 0b00001110	; LCD display on, no cursor, blink
000308 bb01
000309 9817
00030a 9815
00030b 0000
00030c 9a16
00030d 0000
00030e 0000
00030f 0000
000310 9816
000311 0000
000312 0000
000313 0000                      	lcd_write_cmd
000314 2711
000315 bb10
000316 9817
000317 9a15
000318 0000
000319 9a16
00031a 0000
00031b 0000
00031c 0000
00031d b11f
00031e 9816
00031f fd17
000320 cff7
000321 0000
000322 0000
000323 0000
000324 9817
000325 9815
000326 ef1f
000327 bb10
000328 0000
000329 0000
00032a 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
00032b 9621                      	adiw Y, 1
00032c bfde                      	out SPH, YH
00032d bfcd                      	out SPL, YL
00032e 91df                      	pop YH
00032f 91cf                      	pop YL
000330 913f                      	pop r19
000331 912f                      	pop r18
000332 911f                      	pop r17
000333 910f                      	pop r16
000334 9508                      	ret
                                 
                                 ; clears the LCD display and sets it to display mode
                                 LCD_DISPLAY_MODE:
                                 	; prologue
000335 930f                      	push r16
000336 931f                      	push r17
000337 932f                      	push r18
000338 933f                      	push r19
000339 93cf                      	push YL
00033a 93df                      	push YH
00033b b7cd                      	in YL, SPL
00033c b7de                      	in YH, SPH
00033d 9721                      	sbiw Y, 1
00033e 9a11                      	set_strobe				; STROBE on
                                 	
00033f e001                      	ldi r16, 0b00000001	; clear display
000340 bb01
000341 9817
000342 9815
000343 0000
000344 9a16
000345 0000
000346 0000
000347 0000
000348 9816
000349 0000
00034a 0000
00034b 0000                      	lcd_write_cmd
00034c 2711
00034d bb10
00034e 9817
00034f 9a15
000350 0000
000351 9a16
000352 0000
000353 0000
000354 0000
000355 b11f
000356 9816
000357 fd17
000358 cff7
000359 0000
00035a 0000
00035b 0000
00035c 9817
00035d 9815
00035e ef1f
00035f bb10
000360 0000
000361 0000
000362 0000                      	lcd_wait_busy
                                 
000363 e43e                      	ldi r19, 'N'			; display "Next Patient:"
000364 d219                      	rcall WRITE
000365 e635                      	ldi r19, 'e'
000366 d217                      	rcall WRITE
000367 e738                      	ldi r19, 'x'
000368 d215                      	rcall WRITE
000369 e734                      	ldi r19, 't'
00036a d213                      	rcall WRITE
00036b e230                      	ldi r19, ' '
00036c d211                      	rcall WRITE
00036d e530                      	ldi r19, 'P'
00036e d20f                      	rcall WRITE
00036f e631                      	ldi r19, 'a'
000370 d20d                      	rcall WRITE
000371 e734                      	ldi r19, 't'
000372 d20b                      	rcall WRITE
000373 e639                      	ldi r19, 'i'
000374 d209                      	rcall WRITE
000375 e635                      	ldi r19, 'e'
000376 d207                      	rcall WRITE
000377 e63e                      	ldi r19, 'n'
000378 d205                      	rcall WRITE
000379 e734                      	ldi r19, 't'
00037a d203                      	rcall WRITE
00037b e33a                      	ldi r19, ':'
00037c d201                      	rcall WRITE
                                 	
                                 	;epilogue
00037d 9621                      	adiw Y, 1
00037e bfde                      	out SPH, YH
00037f bfcd                      	out SPL, YL
000380 91df                      	pop YH
000381 91cf                      	pop YL
000382 913f                      	pop r19
000383 912f                      	pop r18
000384 911f                      	pop r17
000385 910f                      	pop r16
000386 9508                      	ret
                                 
                                 ; shifts cursor to bottom left of screen
                                 DISPLAY_BOTTOM_LEFT:
                                 	; prologue
000387 930f                      	push r16
000388 931f                      	push r17
000389 932f                      	push r18
00038a 933f                      	push r19
00038b 93cf                      	push YL
00038c 93df                      	push YH
00038d b7cd                      	in YL, SPL
00038e b7de                      	in YH, SPH
00038f 9721                      	sbiw Y, 1
                                 
000390 ec00                      	ldi r16, 0b11000000	; Set DDRAM address to bottom left
000391 bb01
000392 9817
000393 9815
000394 0000
000395 9a16
000396 0000
000397 0000
000398 0000
000399 9816
00039a 0000
00039b 0000
00039c 0000                      	lcd_write_cmd
00039d 2711
00039e bb10
00039f 9817
0003a0 9a15
0003a1 0000
0003a2 9a16
0003a3 0000
0003a4 0000
0003a5 0000
0003a6 b11f
0003a7 9816
0003a8 fd17
0003a9 cff7
0003aa 0000
0003ab 0000
0003ac 0000
0003ad 9817
0003ae 9815
0003af ef1f
0003b0 bb10
0003b1 0000
0003b2 0000
0003b3 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
0003b4 9621                      	adiw Y, 1
0003b5 bfde                      	out SPH, YH
0003b6 bfcd                      	out SPL, YL
0003b7 91df                      	pop YH
0003b8 91cf                      	pop YL
0003b9 913f                      	pop r19
0003ba 912f                      	pop r18
0003bb 911f                      	pop r17
0003bc 910f                      	pop r16
0003bd 9508                      	ret
                                 
                                 ;expects unsigned int as parameter in r19 and displays bottom right aligned number
                                 DISPLAY_NUMBER_RIGHT:
                                 	; prologue
0003be 930f                      	push r16
0003bf 931f                      	push r17
0003c0 932f                      	push r18
0003c1 933f                      	push r19
0003c2 93cf                      	push YL
0003c3 93df                      	push YH
0003c4 b7cd                      	in YL, SPL
0003c5 b7de                      	in YH, SPH
0003c6 9721                      	sbiw Y, 1
                                 
0003c7 ec0f                      	ldi r16, 0b11001111	; Set DDRAM address to bottom right
0003c8 bb01
0003c9 9817
0003ca 9815
0003cb 0000
0003cc 9a16
0003cd 0000
0003ce 0000
0003cf 0000
0003d0 9816
0003d1 0000
0003d2 0000
0003d3 0000                      	lcd_write_cmd
0003d4 2711
0003d5 bb10
0003d6 9817
0003d7 9a15
0003d8 0000
0003d9 9a16
0003da 0000
0003db 0000
0003dc 0000
0003dd b11f
0003de 9816
0003df fd17
0003e0 cff7
0003e1 0000
0003e2 0000
0003e3 0000
0003e4 9817
0003e5 9815
0003e6 ef1f
0003e7 bb10
0003e8 0000
0003e9 0000
0003ea 0000                      	lcd_wait_busy
0003eb e006                      	ldi r16, 0b00000110	; INCREMENT, no shift
0003ec bb01
0003ed 9817
0003ee 9815
0003ef 0000
0003f0 9a16
0003f1 0000
0003f2 0000
0003f3 0000
0003f4 9816
0003f5 0000
0003f6 0000
0003f7 0000                      	lcd_write_cmd
0003f8 2711
0003f9 bb10
0003fa 9817
0003fb 9a15
0003fc 0000
0003fd 9a16
0003fe 0000
0003ff 0000
000400 0000
000401 b11f
000402 9816
000403 fd17
000404 cff7
000405 0000
000406 0000
000407 0000
000408 9817
000409 9815
00040a ef1f
00040b bb10
00040c 0000
00040d 0000
00040e 0000                      	lcd_wait_busy
                                 	
00040f 303a                      	cpi r19, 10
000410 f408                      	brsh tens
000411 c04b                      	rjmp display
                                 tens:
000412 e100                      	ldi r16, 0b00010000	; shift cursor left 1
000413 bb01
000414 9817
000415 9815
000416 0000
000417 9a16
000418 0000
000419 0000
00041a 0000
00041b 9816
00041c 0000
00041d 0000
00041e 0000                      	lcd_write_cmd
00041f 2711
000420 bb10
000421 9817
000422 9a15
000423 0000
000424 9a16
000425 0000
000426 0000
000427 0000
000428 b11f
000429 9816
00042a fd17
00042b cff7
00042c 0000
00042d 0000
00042e 0000
00042f 9817
000430 9815
000431 ef1f
000432 bb10
000433 0000
000434 0000
000435 0000                      	lcd_wait_busy
000436 3634                      	cpi r19, 100
000437 f408                      	brsh hundreds
000438 c024                      	rjmp display
                                 hundreds:
000439 e100                      	ldi r16, 0b00010000	; shift cursor left 1
00043a bb01
00043b 9817
00043c 9815
00043d 0000
00043e 9a16
00043f 0000
000440 0000
000441 0000
000442 9816
000443 0000
000444 0000
000445 0000                      	lcd_write_cmd
000446 2711
000447 bb10
000448 9817
000449 9a15
00044a 0000
00044b 9a16
00044c 0000
00044d 0000
00044e 0000
00044f b11f
000450 9816
000451 fd17
000452 cff7
000453 0000
000454 0000
000455 0000
000456 9817
000457 9815
000458 ef1f
000459 bb10
00045a 0000
00045b 0000
00045c 0000                      	lcd_wait_busy
                                 display:
00045d 2f83                      	mov r24, r19
00045e d151                      	rcall decimal_conversion
                                 	;epilogue
00045f 9621                      	adiw Y, 1
000460 bfde                      	out SPH, YH
000461 bfcd                      	out SPL, YL
000462 91df                      	pop YH
000463 91cf                      	pop YL
000464 913f                      	pop r19
000465 912f                      	pop r18
000466 911f                      	pop r17
000467 910f                      	pop r16
000468 9508                      	ret
                                 
                                 ; clears LCD display and sets it to entry mode
                                 LCD_ENTRY_MODE:
                                 	; prologue
000469 930f                      	push r16
00046a 931f                      	push r17
00046b 932f                      	push r18
00046c 933f                      	push r19
00046d 93cf                      	push YL
00046e 93df                      	push YH
00046f b7cd                      	in YL, SPL
000470 b7de                      	in YH, SPH
000471 9721                      	sbiw Y, 1
000472 9811                      	clr_strobe				; STROBE on
                                 	
000473 e001                      	ldi r16, 0b00000001	; clear display
000474 bb01
000475 9817
000476 9815
000477 0000
000478 9a16
000479 0000
00047a 0000
00047b 0000
00047c 9816
00047d 0000
00047e 0000
00047f 0000                      	lcd_write_cmd
000480 2711
000481 bb10
000482 9817
000483 9a15
000484 0000
000485 9a16
000486 0000
000487 0000
000488 0000
000489 b11f
00048a 9816
00048b fd17
00048c cff7
00048d 0000
00048e 0000
00048f 0000
000490 9817
000491 9815
000492 ef1f
000493 bb10
000494 0000
000495 0000
000496 0000                      	lcd_wait_busy
                                 
000497 e435                      	ldi r19, 'E'			; display "Next Patient:"
000498 d0e5                      	rcall WRITE
000499 e63e                      	ldi r19, 'n'
00049a d0e3                      	rcall WRITE
00049b e734                      	ldi r19, 't'
00049c d0e1                      	rcall WRITE
00049d e635                      	ldi r19, 'e'
00049e d0df                      	rcall WRITE
00049f e732                      	ldi r19, 'r'
0004a0 d0dd                      	rcall WRITE
0004a1 e230                      	ldi r19, ' '
0004a2 d0db                      	rcall WRITE
0004a3 e43e                      	ldi r19, 'N'
0004a4 d0d9                      	rcall WRITE
0004a5 e631                      	ldi r19, 'a'
0004a6 d0d7                      	rcall WRITE
0004a7 e63d                      	ldi r19, 'm'
0004a8 d0d5                      	rcall WRITE
0004a9 e635                      	ldi r19, 'e'
0004aa d0d3                      	rcall WRITE
0004ab e33a                      	ldi r19, ':'
0004ac d0d1                      	rcall WRITE
                                 	
                                 	;epilogue
0004ad 9621                      	adiw Y, 1
0004ae bfde                      	out SPH, YH
0004af bfcd                      	out SPL, YL
0004b0 91df                      	pop YH
0004b1 91cf                      	pop YL
0004b2 913f                      	pop r19
0004b3 912f                      	pop r18
0004b4 911f                      	pop r17
0004b5 910f                      	pop r16
0004b6 9508                      	ret
                                 
                                 ; expects unsigned int as parameter in r19 and displays descriptive message to patient
                                 ENTRY_MESSAGE:
                                 	; prologue
0004b7 930f                      	push r16
0004b8 931f                      	push r17
0004b9 932f                      	push r18
0004ba 933f                      	push r19
0004bb 938f                      	push r24
0004bc 93cf                      	push YL
0004bd 93df                      	push YH
0004be b7cd                      	in YL, SPL
0004bf b7de                      	in YH, SPH
0004c0 9721                      	sbiw Y, 1
                                 
0004c1 e001                      	ldi r16, 0b00000001	; clear display
0004c2 bb01
0004c3 9817
0004c4 9815
0004c5 0000
0004c6 9a16
0004c7 0000
0004c8 0000
0004c9 0000
0004ca 9816
0004cb 0000
0004cc 0000
0004cd 0000                      	lcd_write_cmd
0004ce 2711
0004cf bb10
0004d0 9817
0004d1 9a15
0004d2 0000
0004d3 9a16
0004d4 0000
0004d5 0000
0004d6 0000
0004d7 b11f
0004d8 9816
0004d9 fd17
0004da cff7
0004db 0000
0004dc 0000
0004dd 0000
0004de 9817
0004df 9815
0004e0 ef1f
0004e1 bb10
0004e2 0000
0004e3 0000
0004e4 0000                      	lcd_wait_busy
                                 
0004e5 2f83                      	mov r24, r19
                                 
0004e6 e539                      	ldi r19, 'Y'
0004e7 d096                      	rcall WRITE
0004e8 e63f                      	ldi r19, 'o'
0004e9 d094                      	rcall WRITE
0004ea e735                      	ldi r19, 'u'
0004eb d092                      	rcall WRITE
0004ec e230                      	ldi r19, ' '
0004ed d090                      	rcall WRITE
0004ee e631                      	ldi r19, 'a'
0004ef d08e                      	rcall WRITE
0004f0 e732                      	ldi r19, 'r'
0004f1 d08c                      	rcall WRITE
0004f2 e635                      	ldi r19, 'e'
0004f3 d08a                      	rcall WRITE
0004f4 e230                      	ldi r19, ' '
0004f5 d088                      	rcall WRITE
0004f6 e730                      	ldi r19, 'p'
0004f7 d086                      	rcall WRITE
0004f8 e631                      	ldi r19, 'a'
0004f9 d084                      	rcall WRITE
0004fa e734                      	ldi r19, 't'
0004fb d082                      	rcall WRITE
0004fc e639                      	ldi r19, 'i'
0004fd d080                      	rcall WRITE
0004fe e635                      	ldi r19, 'e'
0004ff d07e                      	rcall WRITE
000500 e63e                      	ldi r19, 'n'
000501 d07c                      	rcall WRITE
000502 e734                      	ldi r19, 't'
000503 d07a                      	rcall WRITE
                                 
000504 de82                      	rcall DISPLAY_BOTTOM_LEFT
                                 
000505 e63e                      	ldi r19, 'n'
000506 d077                      	rcall WRITE
000507 e735                      	ldi r19, 'u'
000508 d075                      	rcall WRITE
000509 e63d                      	ldi r19, 'm'
00050a d073                      	rcall WRITE
00050b e632                      	ldi r19, 'b'
00050c d071                      	rcall WRITE
00050d e635                      	ldi r19, 'e'
00050e d06f                      	rcall WRITE
00050f e732                      	ldi r19, 'r'
000510 d06d                      	rcall WRITE
000511 e33a                      	ldi r19, ':'
000512 d06b                      	rcall WRITE
000513 e230                      	ldi r19, ' '
000514 d069                      	rcall WRITE
000515 d09a                      	rcall decimal_conversion
                                 	;epilogue
000516 9621                      	adiw Y, 1
000517 bfde                      	out SPH, YH
000518 bfcd                      	out SPL, YL
000519 91df                      	pop YH
00051a 91cf                      	pop YL
00051b 918f                      	pop r24
00051c 913f                      	pop r19
00051d 912f                      	pop r18
00051e 911f                      	pop r17
00051f 910f                      	pop r16
000520 9508                      	ret
                                 
                                 ; delete 1 character from patient input in LCD entry mode
                                 BACKSPACE:
                                 	; prologue
000521 930f                      	push r16
000522 931f                      	push r17
000523 932f                      	push r18
000524 933f                      	push r19
000525 93cf                      	push YL
000526 93df                      	push YH
000527 b7cd                      	in YL, SPL
000528 b7de                      	in YH, SPH
000529 9721                      	sbiw Y, 1
                                 
00052a e100                      	ldi r16, 0b00010000	; shift cursor left 1
00052b bb01
00052c 9817
00052d 9815
00052e 0000
00052f 9a16
000530 0000
000531 0000
000532 0000
000533 9816
000534 0000
000535 0000
000536 0000                      	lcd_write_cmd
000537 2711
000538 bb10
000539 9817
00053a 9a15
00053b 0000
00053c 9a16
00053d 0000
00053e 0000
00053f 0000
000540 b11f
000541 9816
000542 fd17
000543 cff7
000544 0000
000545 0000
000546 0000
000547 9817
000548 9815
000549 ef1f
00054a bb10
00054b 0000
00054c 0000
00054d 0000                      	lcd_wait_busy
                                 
00054e e230                      	ldi r19, ' '			; delete letter
00054f d02e                      	rcall WRITE
                                 
000550 e100                      	ldi r16, 0b00010000	; shift cursor left 1
000551 bb01
000552 9817
000553 9815
000554 0000
000555 9a16
000556 0000
000557 0000
000558 0000
000559 9816
00055a 0000
00055b 0000
00055c 0000                      	lcd_write_cmd
00055d 2711
00055e bb10
00055f 9817
000560 9a15
000561 0000
000562 9a16
000563 0000
000564 0000
000565 0000
000566 b11f
000567 9816
000568 fd17
000569 cff7
00056a 0000
00056b 0000
00056c 0000
00056d 9817
00056e 9815
00056f ef1f
000570 bb10
000571 0000
000572 0000
000573 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
000574 9621                      	adiw Y, 1
000575 bfde                      	out SPH, YH
000576 bfcd                      	out SPL, YL
000577 91df                      	pop YH
000578 91cf                      	pop YL
000579 913f                      	pop r19
00057a 912f                      	pop r18
00057b 911f                      	pop r17
00057c 910f                      	pop r16
00057d 9508                      	ret
                                 
                                 ; expects an ASCII character in r19 and displays to current cursor position
                                 WRITE:
                                 	; write to r16
                                 
00057e 930f                      	push r16
00057f 931f                      	push r17
000580 93cf                      	push YL
000581 93df                      	push YH
000582 b7cd                      	in YL, SPL
000583 b7de                      	in YH, SPH
000584 9721                      	sbiw Y, 1
                                 
000585 bb31
000586 9a17
000587 9815
000588 0000
000589 9a16
00058a 0000
00058b 0000
00058c 0000
00058d 9816
00058e 0000
00058f 0000
000590 0000                      	lcd_write_data
000591 2711
000592 bb10
000593 9817
000594 9a15
000595 0000
000596 9a16
000597 0000
000598 0000
000599 0000
00059a b11f
00059b 9816
00059c fd17
00059d cff7
00059e 0000
00059f 0000
0005a0 0000
0005a1 9817
0005a2 9815
0005a3 ef1f
0005a4 bb10
0005a5 0000
0005a6 0000
0005a7 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
0005a8 9621                      	adiw Y, 1
0005a9 bfde                      	out SPH, YH
0005aa bfcd                      	out SPL, YL
0005ab 91df                      	pop YH
0005ac 91cf                      	pop YL
0005ad 911f                      	pop r17
0005ae 910f                      	pop r16
0005af 9508                      	ret
                                 
                                 ; expects digit in r19, ASCII '0' in r23
                                 ;.macro display_digit
                                 ;	add r19, r23              ; Convert to ASCII ('0' = 0x30)
                                 ;	rcall WRITE
                                 ;.endmacro
                                 ;;expects dividend in r26 and divisor in r25
                                 ;.macro divide
                                 ;	clr r27                   ; Clear quotient register
                                 ;divide_loop:
                                 ;    cp r26, r25               ; Compare r26 (dividend) with r25 (divisor)
                                 ;    brlo divide_done           ; If r26 < r25, exit loop
                                 ;
                                 ;    sub r26, r25              ; Subtract divisor from dividend
                                 ;    inc r27                   ; Increment quotient
                                 ;    rjmp divide_loop           ; Repeat until r26 < r28
                                 ;divide_done:
                                 ;	nop
                                 ;.endmacro
                                 ; parameter passed into r24
                                 ; conflict registers: 23, 25, 26, 27, 19
                                 decimal_conversion:
                                 ;prologue
0005b0 933f                      	push r19
0005b1 937f                      	push r23
0005b2 938f                      	push r24
0005b3 939f                      	push r25
0005b4 93af                      	push r26
0005b5 93bf                      	push r27
0005b6 93cf                      	push YL
0005b7 93df                      	push YH
0005b8 b7cd                      	in YL, SPL
0005b9 b7de                      	in YH, SPH
0005ba 9721                      	sbiw Y, 1
                                 
0005bb e370                      	ldi r23, '0'				; load ASCII '0'
0005bc 2fa8                      	mov r26, r24				; Load result (y) r24 into register r26.
                                 
0005bd e694                      	ldi r25, 100				; Load 100 for division
0005be 27bb
0005bf 17a9
0005c0 f018
0005c1 1ba9
0005c2 95b3
0005c3 cffb
0005c4 0000                          divide				; Call divide subroutine
0005c5 2f3b                      	mov r19, r27				; Get the quotient (hundreds digit) in r19
0005c6 3030                          cpi r19, 0					; Check if it's zero
0005c7 f409                      	brne from_hundreds
0005c8 c00e                      	rjmp no_hundreds
                                 
                                 from_hundreds:
0005c9 0f37
0005ca dfb3                      	display_digit
0005cb e09a                      	ldi r25, 10					; Load 10 for division
0005cc 27bb
0005cd 17a9
0005ce f018
0005cf 1ba9
0005d0 95b3
0005d1 cffb
0005d2 0000                          divide				; Call divide subroutine
0005d3 2f3b                      	mov r19, r27				; move quotient to r19
0005d4 0f37
0005d5 dfa8                      	display_digit				; always display tens if from hundreds
0005d6 c00e                      	rjmp display_ones_digit
                                 
                                 no_hundreds:
0005d7 e09a                      	ldi r25, 10					; Load 10 for division
0005d8 27bb
0005d9 17a9
0005da f018
0005db 1ba9
0005dc 95b3
0005dd cffb
0005de 0000                          divide				; Call divide subroutine
0005df 30b0                      	cpi r27, 0                ; Check if it's zero
0005e0 f021                      	breq display_ones_digit
0005e1 2f3b                      	mov r19, r27
0005e2 0f37
0005e3 df9a                      	display_digit
0005e4 c000                      	rjmp display_ones_digit
                                 
                                 display_ones_digit:
0005e5 2f3a                      	mov r19, r26
0005e6 0f37
0005e7 df96                      	display_digit
                                 
                                 	;epilogue
0005e8 9621                      	adiw Y, 1
0005e9 bfde                          out SPH, YH
0005ea bfcd                          out SPL, YL
0005eb 91df                          pop YH
0005ec 91cf                          pop YL
0005ed 91bf                          pop r27
0005ee 91af                          pop r26
0005ef 919f                          pop r25
0005f0 918f                      	pop r24
0005f1 917f                          pop r23
0005f2 913f                          pop r19
0005f3 9508                          ret
                                 
                                 value_lookup:
0005f4 0201
0005f5 4103
0005f6 0504
0005f7 4206
0005f8 0807
0005f9 4309
0005fa 002a
0005fb 4423                      	.db		1, 2, 3, 0x41, 4, 5, 6, 0x42, 7, 8, 9, 0x43, 0x2A, 0, 0x23, 0x44
                                 ascii_lookup:
0005fc 6261
0005fd 6463
0005fe 6665
0005ff 6867
000600 6a69
000601 6c6b
000602 6e6d
000603 706f
000604 7372
000605 7574
000606 7776
000607 7978


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  58 z  :  14 r0 :   0 r1 :   0 r2 :  12 r3 :  20 r4 :  18 
r5 :  32 r6 :  10 r7 :  18 r8 :   9 r9 :   0 r10:   8 r11:   9 r12:   3 
r13:   0 r14:   0 r15:   0 r16: 161 r17: 145 r18:  27 r19:  88 r20:   0 
r21:   0 r22:   0 r23:   7 r24:  31 r25:  21 r26:  44 r27:  34 r28:  53 
r29:  53 r30:  28 r31:  28 
Registers used: 25 out of 35 (71.4%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   5 add   :  12 adiw  :  16 and   :   3 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  10 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 brlt  :   1 brmi  :   0 
brne  :  28 brpl  :   0 brsh  :   4 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   : 121 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  46 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  26 cpc   :   0 
cpi   :  10 cpse  :   0 dec   :  12 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  39 inc   :  15 jmp   :   3 ld    :  16 ldd   :   0 ldi   : 160 
lds   :   0 lpm   :   4 lsl   :   3 lsr   :   2 mov   :  39 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   : 301 or    :   0 
ori   :   3 out   :  80 pop   :  98 push  :  98 rcall :  75 ret   :  15 
reti  :   1 rjmp  :  39 rol   :   0 ror   :   0 sbc   :   0 sbci  :   4 
sbi   :  53 sbic  :   0 sbis  :   0 sbiw  :  10 sbr   :   1 sbrc  :  16 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :  17 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  31 std   :   0 sts   :  12 sub   :   3 subi  :   4 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 45 out of 116 (38.8%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c12   2920     42   2962  262144   1.1%
[.dseg] 0x000200 0x000219      0     25     25    8192   0.3%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
