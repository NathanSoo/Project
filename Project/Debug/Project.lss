
AVRASM ver. 2.2.8  C:\Users\nsoo1\OneDrive\Documents\UniDocuments\COMP9032\Project\Project\main.asm Thu Nov 14 14:43:40 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
C:\Users\nsoo1\OneDrive\Documents\UniDocuments\COMP9032\Project\Project\main.asm(15): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
C:\Users\nsoo1\OneDrive\Documents\UniDocuments\COMP9032\Project\Project\main.asm(15): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Project.asm
                                 ;
                                 ; Created: 5/11/2024 11:29:53 AM
                                 ; Author : nsoo1
                                 ;
                                 
                                      ; Patient struct ;
                                 ;..........................;
                                 ;   Patient ID - 2 bytes   ;
                                 ;..........................;
                                 ;  Patient Name - 8 bytes  ;
                                 ;..........................;
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ STROBE = 1
                                 
                                 .equ PORTCDIR				= 0b11110000
                                 .equ PORTBDIR				= 0b00001111
                                 .equ INITCOLMASK			= 0b01111111
                                 .equ INITROWMASK			= 0b00001000
                                 .equ CHECKROWMASK			= 0b00001111
                                 
                                 .equ KEYPADSIZE				= 4
                                 .equ NSTATES				= 3
                                 .equ LARGESTDIGIT			= 9
                                 
                                 .equ A						= 3
                                 .equ B						= 7
                                 .equ C						= 11
                                 .equ D						= 15
                                 .equ zero_key				= 13
                                 .equ nine					= 10
                                 .equ null					= 0xFF
                                 
                                 .equ P_SIZE					= 10    ; Size of patient struct: 10 bytes
                                 .equ INIT_ID				= 100   ; Patient IDs will start from 100
                                 
                                 .equ max_name				= 8
                                 
                                 .def w						= r16	; working register
                                 .def entry_mode				= r2
                                 .def new_name_cur			= r3
                                 .def key_pressed			= r4
                                 .def zero					= r5	; register always set to 0
                                 
                                 .def last_key_pressed		= r6
                                 .def times_key_pressed		= r7
                                 .def is_timer_active		= r8
                                 
                                 .def arg0					= r10
                                 .def arg1					= r11
                                 .def arg2					= r12
                                 .def motor_state			= r20 ; Stores state of motor (on/off)
                                 
                                 .dseg								; Start the data segment
                                 .org 0x0200							; from address 0x0200
                                 
000200                           pb0_state:					.byte 1
000201                           pb1_state:					.byte 1
000202                           which_pb:					.byte 1
000203                           TempCounter:				.byte 2 ; Temporary counter used to determine if 1 second has passed
000205                           SecondCounter:				.byte 1 ; Counter to store seconds
000206                           BeepCounter:				.byte 1 ; Counter for keeping track of times beeped
000207                           BeepState:					.byte 1 ; Maintains state for beep routines
000208                           BeepSeconds:				.byte 1 ; Stores number of seconds for motor to beep
000209                           is_keypad_timeout:			.byte 1
                                 
00020a                           new_name:					.byte max_name            ; Queue functions assume 8 bytes for name
000212                           num_patients:				.byte 2
000214                           init_pid:					.byte 2                                  
000216                           first_patient:				.byte 2                 
000218                           last_patient:				.byte 2  ; Reserve space for Queue variables in data memory
                                 
                                 
                                 
                                 
                                 .cseg
                                 .org 0x0000
000000 c05b                      	rjmp	reset
000001 0000                      	nop
000002 940c 0231                 	jmp		pb0_ih
000004 940c 0287                 	jmp		pb1_ih
                                 
                                 .org OVF0addr
00002e 940c 06e0                 	jmp		timer0ovf
                                 .org OVF3addr
000046 940c 02ed                 	jmp		keypad_timeout
                                 .org OVF4addr
00005a 940c 02c1                 	jmp		pb_timeout
                                 
                                 ; The macro clears a word (2 bytes) in data memory for the counter
                                 ; The parameter @0 is the memory address for that word
                                 .macro clear_word
                                 	ldi YL, low(@0)  ; load the memory address to Y
                                 	ldi YH, high(@0)
                                 	clr w
                                 	st Y+, w		; clear the two bytes at @0 in SRAM
                                 	st Y, w
                                 .endmacro
                                 
                                 ; expects digit in r19, ASCII '0' in r23
                                 .macro display_digit
                                 	add r19, r23				; Convert to ASCII ('0' = 0x30)
                                 	rcall WRITE
                                 .endmacro
                                 
                                 ;expects dividend in r26 and divisor in r25
                                 .macro divide
                                 	clr r27                     ; Clear quotient register
                                 divide_loop:
                                     cp r26, r25                 ; Compare r26 (dividend) with r25 (divisor)
                                     brlo divide_done            ; If r26 < r25, exit loop
                                 
                                     sub r26, r25				; Subtract divisor from dividend
                                     inc r27						; Increment quotient
                                     rjmp divide_loop            ; Repeat until r26 < r28
                                 divide_done:
                                 	nop
                                 .endmacro
                                 
                                 ; changes registers:
                                 ; zl
                                 ; zh
                                 .macro debounce
                                 	ldi zl, 0b11111111
                                 	ldi zh, 0b11111111
                                 
                                 debounce_loop:
                                 	nop
                                 	subi zl, 1
                                 	sbci zh, 0
                                 	brne debounce_loop
                                 .endmacro
                                 
                                 ; Reads name from new_name variable in data memory,
                                 ; stores it in newest patient struct on queue.
                                 ; Assumes address of patient_name stored in Y.
                                 .macro read_name
                                 	ldi ZH, high(new_name)
                                 	ldi ZL, low(new_name)
                                 	ldi r26, 8
                                 read_loop:
                                 	ld  r27, Z+
                                 	st  Y+, r27
                                 	dec r26
                                 	cpi r26, 0
                                 	brne read_loop                     ; Continue reading up to 8 chars
                                 .endmacro 
                                 
                                 ; init patient queue
                                 ; call first before any registers are used
                                 .macro init_queue
                                 	ldi  YH, high(num_patients)                      
                                 	ldi  YL, low(num_patients)
                                 	clr  r24
                                 	clr  r25
                                 	st   Y+, r24                       ; Init num_patients = 0
                                 	st   Y+, r25
                                 	ldi  r24, INIT_ID-1				   ; Init patient ID
                                 	st   Y, r24
                                 	adiw Y, 2
                                     mov  r24, YL
                                 	mov  r25, YH
                                 	adiw r24, 8                        ; Adjust num bytes here if needed
                                 	st   Y+, r24
                                 	st   Y+, r25                       ; init pointer to first patient
                                     ldi  r25, high(init_pid)
                                 	ldi  r24, low(init_pid)
                                 	st   Y+, r24
                                 	st   Y, r25                        ; init pointer to last patient
                                 .endmacro
                                 
                                 ; all subroutines expects parameters in r19
                                 ; Sub routines:
                                 ; INTIALISE_LCD			: initialises LCD display
                                 ; LCD_DISPLAY_MODE		: clears the LCD display and sets it to display mode
                                 ; DISPLAY_BOTTOM_LEFT	: moves the cursor to bottom left
                                 ; DISPLAY_NUMBER_RIGHT	: takes unsigned int as parameter in r19 and displays bottom right aligned number
                                 ; LCD_ENTRY_MODE		: clears the LCD display and sets it to entry mode
                                 ; ENTRY_MESSAGE			: takes unsigned int as parameter in r19 and displays descriptive message showing patient number
                                 ; BACKSPACE				: delete 1 char from patient input
                                 ; WRITE					: write 1 char to LCD at current cursor position
                                 ; decimal_conversion	: shouldn't need to use this since i integrated the decimal conversion into all the LCD places,
                                 ;						: ENTRY_MESSAGE and DISPLAY_NUMBER_RIGHT should cover all use cases for displaying numbers on LCD
                                 ; Replace with your application code
                                 .macro set_LCD_RS
                                 	sbi PORTA, LCD_RS
                                 .endmacro
                                 .macro clr_LCD_RS
                                 	cbi PORTA, LCD_RS
                                 .endmacro
                                 
                                 .macro set_LCD_E
                                 	sbi PORTA, LCD_E
                                 .endmacro
                                 .macro clr_LCD_E
                                 	cbi PORTA, LCD_E
                                 .endmacro
                                 
                                 .macro set_LCD_RW
                                 	sbi PORTA, LCD_RW
                                 .endmacro
                                 .macro clr_LCD_RW
                                 	cbi PORTA, LCD_RW
                                 .endmacro
                                 
                                 .macro set_strobe
                                 	sbi PORTA, STROBE
                                 .endmacro
                                 .macro clr_strobe
                                 	cbi PORTA, STROBE
                                 .endmacro
                                 
                                 .macro lcd_write_cmd		; set LCD instructions, does not wait for BF
                                 	out PORTF, r16			; set r16 port
                                 	clr_LCD_RS
                                 	clr_LCD_RW				; RS = 0, RW = 0 for a command write
                                 	nop
                                 	set_LCD_E		
                                 	nop
                                 	nop
                                 	nop
                                 	clr_LCD_E
                                 	nop
                                 	nop
                                 	nop
                                 .endmacro
                                 
                                 .macro lcd_write_data		; write r16 to LCD, waits for BF
                                 	out PORTF, r19			; set r16 port
                                 	set_LCD_RS
                                 	clr_LCD_RW				; RS = 1, RW = 0 for r16 write
                                 	nop
                                 	set_LCD_E		;
                                 	nop
                                 	nop
                                 	nop
                                 	clr_LCD_E
                                 	nop
                                 	nop
                                 	nop
                                 .endmacro
                                 
                                 .macro lcd_wait_busy		; read from LCD until BF is clear
                                 	clr r17
                                 	out DDRF, r17			; LCD port input
                                 	clr_LCD_RS
                                 	set_LCD_RW				; RS = 0, RW = 1, cmd port read
                                 busy:
                                 	nop						
                                 	set_LCD_E				; turn on enable pin
                                 	nop						; r16 delay
                                 	nop
                                 	nop
                                 	in r17, PINF			; read value from LCD
                                 	clr_LCD_E				; clear enable pin
                                 	sbrc r17, 7			; skip next if busy flag not set
                                 	rjmp busy				; else loop
                                 
                                 	nop
                                 	nop
                                 	nop
                                 	clr_LCD_RS
                                 	clr_LCD_RW				; RS, RW = 0, IR write
                                 	ser r17
                                 	out DDRF, r17			; LCD port output
                                 	nop
                                 	nop
                                 	nop
                                 .endmacro
                                 
                                 .macro delay				; delay for 1us
                                 loop1:
                                 	ldi r17, 3				; 1
                                 loop2:
                                 	dec r17				; 1
                                 	nop						; 1
                                 	brne loop2				; 2 taken, 1 not ----> inner loop total is 11 cycles
                                 	subi r18, 1				; 1
                                 	sbci r19, 0				; 1
                                 	brne loop1				; 2 taken, each outer iteration is 11 + 1 + 1 + 1 + 2 = 16 clock cycles at 16Mhz = 1us
                                 .endmacro
                                 
                                 ;______________________________________________________________________
                                 ; INITIALISE
                                 ;______________________________________________________________________
                                 reset:
00005c e0d2
00005d e1c2
00005e 2788
00005f 2799
000060 9389
000061 9399
000062 e683
000063 8388
000064 9622
000065 2f8c
000066 2f9d
000067 9608
000068 9389
000069 9399
00006a e092
00006b e184
00006c 9389
00006d 8398                      	init_queue
00006e d6dd                      	rcall init_beeps
                                 	; Set Timer 0 to count seconds
00006f 2700                      	clr w
000070 bd04                      	out TCCR0A, w				    ; Set Timer 0 to Normal Mode
000071 e003                      	ldi w, 0b00000011
000072 bd05                      	out TCCR0B, w					; Prescaler value = 64	
000073 9478                      	sei								; Enable global interrupt
                                 	; Set Timer 5 for waveform generation
000074 2700                      	clr w						; the value controls the PWM duty cycle
000075 9300 0129                 	sts OCR5AH, w				; Set higher byte of OCR5A to 0
000077 e40a                      	ldi w, 0x4A        
000078 9300 0128                 	sts OCR5AL, w				; Set lower byte to 0x4A
                                 	; Set Timer5 to Phase Correct PWM mode.
00007a e009                      	ldi w, 0b00001001			; Set Timer clock frequency (no prescaling)
00007b 9300 0121                 	sts TCCR5B, w      
00007d e801                      	ldi w, (1<< WGM50)|(1<<COM5A1) ; Phase correct PWM mode
00007e 9300 0120                 	sts TCCR5A, w
000080 d294                      	rcall	INITIALISE_LCD
000081 d39f                      	rcall	LCD_DISPLAY_MODE
000082 d134                      	rcall	clear_name
                                 
000083 2455                      	clr		zero
                                 
000084 ef00                      	ldi		w, PORTCDIR					; initialise pin directions
000085 b907                      	out		DDRC, w
000086 e00f                      	ldi		w, PORTBDIR
000087 b904                      	out		DDRB, w
                                 
000088 ef0f                      	ldi		w, null						; initialise last key pressed
000089 2e60                      	mov		last_key_pressed, w
                                 
00008a 2477                      	clr		times_key_pressed			; initialise times last key pressed
00008b 2422                      	clr		entry_mode
                                 
00008c e002                      	ldi		w, high(new_name)
00008d 2ea0                      	mov		arg0, w
                                 
00008e e00a                      	ldi		w, low(new_name)
00008f 2eb0                      	mov		arg1, w
                                 
000090 e008                      	ldi		w, max_name
000091 2ec0                      	mov		arg2, w
                                 
000092 d0b8                      	rcall	initialise_array
                                 
000093 2433                      	clr		new_name_cur
000094 2488                      	clr		is_timer_active
                                 
000095 e000                      	ldi		w, 0b00000000
000096 9300 0090                 	sts		TCCR3A, w
000098 e000                      	ldi		w, 0b00000000
000099 9300 0091                 	sts		TCCR3B, w
                                 
00009b 9250 0071                 	sts		TIMSK3, zero
                                 
00009d e0f2                      	ldi		zh, high(is_keypad_timeout)
00009e e0e9                      	ldi		zl, low(is_keypad_timeout)
00009f 8250                      	st		z, zero
                                 
0000a0 9478                      	sei
                                 
                                 ;______________________________________________________________________
                                 ; MAIN LOOP
                                 ;______________________________________________________________________
                                 loop:
0000a1 d0d3                      	rcall	scan_keypad					; poll until key is pressed then return key index in r24
0000a2 2e48                      	mov		key_pressed, r24
                                 
0000a3 9250 0091                 	sts		TCCR3B, zero
0000a5 9250 0071                 	sts		TIMSK3, zero					; disable keypad timeout temporarily
                                 
0000a7 e0f2                      	ldi		zh, high(is_keypad_timeout)
0000a8 e0e9                      	ldi		zl, low(is_keypad_timeout)
0000a9 8100                      	ld		w, z
0000aa 1505                      	cp		w, zero
0000ab f031                      	breq	no_timeout
0000ac 8250                      	st		z, zero
0000ad 9433                      	inc		new_name_cur					; new_name_cur++
0000ae ef0f                      	ldi		w, null
0000af 2e60                      	mov		last_key_pressed, w				; last_key_pressed = null
0000b0 2477                      	clr		times_key_pressed				; times_key_pressed = 0
0000b1 2488                      	clr		is_timer_active
                                 
                                 
                                 no_timeout:
                                 	;	if entry_mode is false and key_pressed == 'A'
                                 	;		enter entry mode
                                 							
0000b2 1425                      	cp		entry_mode, zero
0000b3 f439                      	brne	not_display_mode
0000b4 e003                      	ldi		w, A
0000b5 1640                      	cp		key_pressed, w
0000b6 f421                      	brne	not_display_mode
0000b7 9423                      	inc		entry_mode
0000b8 d49c                      	rcall	LCD_ENTRY_MODE
0000b9 d3b9                      	rcall	DISPLAY_BOTTOM_LEFT
0000ba c085                      	rjmp	end_process_key
                                 
                                 not_display_mode:
                                 	;	else if entry_mode is true
                                 	;		handle keys which are not 'A'
0000bb 1425                      	cp		entry_mode, zero
0000bc f0e1                      	breq	to_end_process_key
                                 	;		if new_name_cur != 0 and key_pressed == 'B'
                                 	;			backspace button is pressed
0000bd 1435                      	cp		new_name_cur, zero
0000be f079                      	breq	not_backspace
0000bf e007                      	ldi		w, B
0000c0 1640                      	cp		key_pressed, w
0000c1 f461                      	brne	not_backspace
0000c2 2488                      	clr		is_timer_active					; keypad_timer_stop()
0000c3 943a                      	dec		new_name_cur					; new_name_cur --
                                 	
0000c4 e0f2                      	ldi		zh, high(new_name)				; new_name[new_name_cur] = 0
0000c5 e0ea                      	ldi		zl, low(new_name)
                                 
0000c6 0de3                      	add		zl, new_name_cur
0000c7 1df5                      	adc		zh, zero
                                 
0000c8 8250                      	st		z, zero
                                 
0000c9 d543                      	rcall	BACKSPACE
                                 
0000ca ef0f                      	ldi		w, null							; last_key_pressed = null
0000cb 2e60                      	mov		last_key_pressed, w
0000cc 2477                      	clr		times_key_pressed				; times_key_pressed = 0
0000cd c072                      	rjmp	end_process_key
                                 
                                 not_backspace:
                                 	;		else if key_pressed == 'C'
                                 	;		clear button is pressed
0000ce e00b                      	ldi		w, C
0000cf 1640                      	cp		key_pressed, w
0000d0 f449                      	brne	not_clear
0000d1 2488                      	clr		is_timer_active					; keypad_timer_stop()
0000d2 2433                      	clr		new_name_cur					; new_name_cur = 0
                                 	
0000d3 d077                      	rcall	initialise_array
0000d4 d480                      	rcall	LCD_ENTRY_MODE
0000d5 d39d                      	rcall	DISPLAY_BOTTOM_LEFT
                                 
0000d6 ef0f                      	ldi		w, null							; last_key_pressed = null
0000d7 2e60                      	mov		last_key_pressed, w
0000d8 2477                      	clr		times_key_pressed				; times_key_pressed = 0
                                 to_end_process_key:
0000d9 c066                      	rjmp	end_process_key
                                 
                                 not_clear:
                                 	;		else if key_pressed == 'D'
                                 	;			enter button is pressed
0000da e00f                      	ldi		w, D
0000db 1640                      	cp		key_pressed, w
0000dc f519                      	brne	not_enter
                                 
0000dd d0f2                      	rcall	enqueue
0000de d342                      	rcall	LCD_DISPLAY_MODE
                                 
                                 	; if its the first patient then push to display and enable pb0
0000df e0f2                      	ldi		zh, high(num_patients)
0000e0 e1e2                      	ldi		zl, low(num_patients)
0000e1 8100                      	ld		w, z
0000e2 3001                      	cpi		w, 1
0000e3 f469                      	brne	not_first_patient
                                 
                                 	; enable pb0 and reset pb0 state
0000e4 e0f2                      	ldi		zh, high(pb0_state)
0000e5 e0e0                      	ldi		zl, low(pb0_state)
0000e6 e000                      	ldi		w, 0
0000e7 8300                      	st		z, w
                                 
0000e8 9100 0069                 	lds		w, EICRA
0000ea 7f0c                      	andi	w, 0b11111100
0000eb 6002                      	ori		w, (0b10 << ISC00)
0000ec 9300 0069                 	sts		EICRA, w
                                 
0000ee b30d                      	in		w, EIMSK
0000ef 6001                      	ori		w, (1 << INT0)
0000f0 bb0d                      	out		EIMSK, w
                                 
                                 not_first_patient:
0000f1 d671                      	rcall	display_front_patient
                                 
0000f2 2488                      	clr		is_timer_active					; keypad_timer_stop()
0000f3 e002                      	ldi		w, high(new_name)				; initialise_array(new_name, 8)
0000f4 2ea0                      	mov		arg0, w
                                 
0000f5 e00a                      	ldi		w, low(new_name)
0000f6 2eb0                      	mov		arg1, w
                                 
0000f7 e008                      	ldi		w, max_name
0000f8 2ec0                      	mov		arg2, w
                                 
0000f9 d051                      	rcall	initialise_array
                                 
0000fa 2433                      	clr		new_name_cur					; new_name_cur = 0
0000fb ef0f                      	ldi		w, null							; last_key_pressed = null
0000fc 2e60                      	mov		last_key_pressed, w
0000fd 2477                      	clr		times_key_pressed				; times_key_pressed = 0
0000fe 2422                      	clr		entry_mode						; entry_mode = false
0000ff c040                      	rjmp	end_process_key
                                 
                                 not_enter:
                                 	;		else if key_pressed == 'A'
                                 	;			do nothing
000100 e003                      	ldi		w, A
000101 1640                      	cp		key_pressed, w
000102 f409                      	brne	not_nothing1
000103 c03c                      	rjmp	end_process_key
                                 
                                 not_nothing1:
                                 	;		else if key_pressed is on the bottom row
                                 	;			do nothing
000104 e00b                      	ldi		w, C
000105 9503                      	inc		w
000106 1640                      	cp		key_pressed, w
000107 f008                      	brlo	not_nothing2
000108 c037                      	rjmp	end_process_key
                                 
                                 not_nothing2:
                                 	;		else if key_pressed == '1'
                                 	;			do nothing
000109 1445                      	cp		key_pressed, zero
00010a f409                      	brne	not_nothing3
00010b c034                      	rjmp	end_process_key
                                 
                                 not_nothing3:
                                 	;		else if new_name_cur < 8
00010c e008                      	ldi		w, max_name
00010d 1630                      	cp		new_name_cur, w
00010e f650                      	brsh	to_end_process_key
00010f 2488                      	clr		is_timer_active					; keypad_timer_restart()
000110 9483                      	inc		is_timer_active
000111 9250 0095                 	sts		TCNT3h, zero
000113 9250 0094                 	sts		TCNT3l, zero
                                 	;			if times_key_pressed == 0
                                 	;				first input key pressed
000115 1475                      	cp		times_key_pressed, zero
000116 f419                      	brne	not_first_key
000117 2c64                      	mov		last_key_pressed, key_pressed	; last_key_presed = key_pressed
000118 9473                      	inc		times_key_pressed				; times_key_pressed = 1
000119 c026                      	rjmp	end_process_key
                                 
                                 not_first_key:
                                 	;			else if last_key_pressed == key_pressed
                                 	;				cycle between letters on the same key
00011a 1464                      	cp		last_key_pressed, key_pressed
00011b f499                      	brne	not_same_key
00011c 9473                      	inc		times_key_pressed
                                 	;				if key_pressed == '9' and times_key_pressed == 5
                                 	;					wrap the number of times key is pressed
00011d e00a                      	ldi		w, nine
00011e 1640                      	cp		key_pressed, w
00011f f431                      	brne	not_nine_wrap
000120 e005                      	ldi		w, 5
000121 1670                      	cp		times_key_pressed, w
000122 f419                      	brne	not_nine_wrap
000123 2477                      	clr		times_key_pressed				; times_key_pressed = 1
000124 9473                      	inc		times_key_pressed
000125 c008                      	rjmp	end_key_wrap
                                 	;				else if key_pressed != '9' and times_key_pressed == 4 
                                 	;					wrap the number of times key is pressed
                                 not_nine_wrap:
000126 e00a                      	ldi		w, nine
000127 1640                      	cp		key_pressed, w
000128 f029                      	breq	end_key_wrap
000129 e004                      	ldi		w, 4
00012a 1670                      	cp		times_key_pressed, w
00012b f411                      	brne	end_key_wrap
00012c 2477                      	clr		times_key_pressed				; times_key_pressed = 1
00012d 9473                      	inc		times_key_pressed
                                 end_key_wrap:
00012e c011                      	rjmp	end_process_key
                                 
                                 not_same_key:
                                 	;			else
                                 	;				enter letter
00012f e008                      	ldi		w, max_name
000130 1630                      	cp		new_name_cur, w
000131 f470                      	brsh	end_process_key
                                 
000132 e0f2                      	ldi		zh, high(new_name)				; new_name[new_name_cur] = keypad_to_ascii(last_key_pressed, times_key_pressed)
000133 e0ea                      	ldi		zl, low(new_name)
                                 
000134 0de3                      	add		zl, new_name_cur
000135 1df5                      	adc		zh, zero
                                 
000136 2ca6                      	mov		arg0, last_key_pressed
000137 2cb7                      	mov		arg1, times_key_pressed
000138 d021                      	rcall	keypad_to_ascii
                                 
000139 8380                      	st		z, r24
                                 
00013a 2f38                      	mov		r19, r24
00013b d52e                      	rcall	WRITE
                                 
00013c 9433                      	inc		new_name_cur					; new_name_cur ++
00013d 2c64                      	mov		last_key_pressed, key_pressed	; last_key_pressed = key_pressed
00013e 2477                      	clr		times_key_pressed				; times_key_pressed = 1
00013f 9473                      	inc		times_key_pressed
                                 end_process_key:
                                 
000140 1485                      	cp		is_timer_active, zero
000141 f031                      	breq	timer_not_active
000142 e004                      	ldi		w, 0b00000100
000143 9300 0091                 	sts		TCCR3B, w
000145 e001                      	ldi		w, (1 << TOIE3)
000146 9300 0071                 	sts		TIMSK3, w
                                 timer_not_active:
                                 
000148 b30d                      	in		w, EIMSK
000149 b905                      	out		PORTB, w
                                 
00014a cf56                      	rjmp	loop
                                 
                                 ;______________________________________________________________________
                                 ; HELPER FUNCTIONS
                                 ;______________________________________________________________________
                                 
                                 ;______________________________________________________________________
                                 ; initialise_array
                                 ; arguments
                                 ; array - arg0:arg1 (r10:r11)
                                 ; length - arg2 (r12)
                                 ;______________________________________________________________________
                                 initialise_array:
00014b 93ef                      	push	zl
00014c 93ff                      	push	zh
00014d 931f                      	push	r17
                                 
00014e 2dfa                      	mov		zh, arg0
00014f 2deb                      	mov		zl, arg1
                                 
000150 2d1c                      	mov		r17, arg2
                                 
                                 	;rcall	INITIALISE_LCD
                                 
                                 initialise_array_loop:
000151 1515                      	cp		r17, zero
000152 f019                      	breq	end_initialise_array_loop
                                 
                                 	;ld		r27, z
                                 	;cp		r27, zero
                                 	;breq	dont_write
                                 	;lcd_write_data
                                 	;lcd_wait_busy
                                 ;dont_write:
000153 9251                      	st		z+, zero
                                 
000154 951a                      	dec		r17
000155 cffb                      	rjmp	initialise_array_loop
                                 end_initialise_array_loop:
                                 
000156 911f                      	pop		r17
000157 91ff                      	pop		zh
000158 91ef                      	pop		zl
000159 9508                      	ret
                                 
                                 ;______________________________________________________________________
                                 ; keypad_to_ascii
                                 ; arguments
                                 ; last_key_pressed - arg0 (r10)
                                 ; times_key_pressed - arg1 (r11)
                                 ;______________________________________________________________________
                                 keypad_to_ascii:
00015a 93ef                      	push	zl
00015b 93ff                      	push	zh
00015c 930f                      	push	w
00015d 931f                      	push	r17
                                 
                                 	; get keypad number value from lookup table
00015e e0ff                      	ldi		zh, high(value_lookup << 1)
00015f e0ea                      	ldi		zl, low(value_lookup << 1)
                                 
000160 0dea                      	add		zl, arg0
000161 1df5                      	adc		zh, zero
                                 
                                 	; do maths
000162 9104                      	lpm		w, z
000163 950a                      	dec		w
000164 950a                      	dec		w
000165 94ba                      	dec		arg1
                                 
000166 2f10                      	mov		r17, w
000167 0f11                      	lsl		r17
000168 0f01                      	add		w, r17
000169 0d0b                      	add		w, arg1
                                 
                                 	; get ascii value of input character from lookup table
00016a e0ff                      	ldi		zh, high(ascii_lookup << 1)
00016b e1ea                      	ldi		zl, low(ascii_lookup << 1)
                                 
00016c 0fe0                      	add		zl, w
00016d 1df5                      	adc		zh, zero
                                 
00016e 9104                      	lpm		w, z
00016f 2f80                      	mov		r24, w
                                 
000170 911f                      	pop		r17
000171 910f                      	pop		w
000172 91ff                      	pop		zh
000173 91ef                      	pop		zl
000174 9508                      	ret
                                 
                                 ;______________________________________________________________________
                                 ; keypad_to_ascii
                                 ; arguments
                                 ; last_key_pressed - arg0 (r10)
                                 ; times_key_pressed - arg1 (r11)
                                 ;______________________________________________________________________
                                 scan_keypad:
000175 930f                      	push	w
000176 922f                      	push	r2
000177 923f                      	push	r3
000178 924f                      	push	r4
000179 925f                      	push	r5
00017a 931f                      	push	r17
00017b 932f                      	push	r18
                                 
00017c 93ef                      	push	zl
00017d 93ff                      	push	zh
                                 
00017e e004                      	ldi		w, KEYPADSIZE				; initialise keypad size
00017f 2e40                      	mov		r4, w
000180 2422                      	clr		r2							; clear column
000181 e72f                      	ldi		r18, INITCOLMASK			; initialise column mask
                                 
                                 col_loop:
000182 1424                      	cp		r2, r4						; if maximum columns reached
000183 f014                      	brlt	push_mask
000184 e72f                      	ldi		r18, INITCOLMASK			; reset the column mask
000185 2422                      	clr		r2							; reset column count
                                 push_mask:
000186 b928                      	out		PORTC, r18
000187 ef0f                      	ldi		w, 0b11111111				; delay to allow pin to update
                                 update_delay:
000188 950a                      	dec		w
000189 f7f1                      	brne	update_delay
                                 
00018a b106                      	in		w, PINC						; read portc
00018b 700f                      	andi	w, CHECKROWMASK				; read only the inputs
00018c 300f                      	cpi		w, CHECKROWMASK
00018d f099                      	breq	nextcol						; check if any of the buttons are pressed
                                 
00018e 2e50                      	mov		r5, w						; save copy of inputs
00018f 2433                      	clr		r3							; initialise row scan
000190 e018                      	ldi		r17, INITROWMASK
                                 row_loop:
000191 2d05                      	mov		w, r5						; get input value
000192 2301                      	and		w, r17						; mask out single bit
000193 f449                      	brne	inc_row						; if button pressed
000194 efef
000195 efff
000196 0000
000197 50e1
000198 40f0
000199 f7e1                      	debounce							; debounce button
00019a b106                      	in		w, PINC						; read port again
00019b 2301                      	and		w, r17						; check value of pin again
00019c f041                      	breq	resolve						; if button still pressed resolve value
                                 inc_row:
00019d 9516                      	lsr		r17							; shift row mask
00019e 9433                      	inc		r3							; increment row count
00019f 1434                      	cp		r3, r4
0001a0 f781                      	brne	row_loop
                                 nextcol:
0001a1 9526                      	lsr		r18							; shift column mask right
0001a2 6820                      	sbr		r18, 0b10000000				; re-set left most bit
0001a3 9423                      	inc		r2							; increment column count
0001a4 cfdd                      	rjmp	col_loop
                                 
                                 resolve:
0001a5 0c33                      	lsl		r3							; get key index by adding row * 4 + column
0001a6 0c33                      	lsl		r3
0001a7 2d03                      	mov		w, r3
0001a8 0d02                      	add		w, r2
                                 
0001a9 2f80                      	mov		r24, w
                                 
                                 hold_loop:								; wait until button is unpressed before continuing to read keypad
0001aa b106                      	in		w, PINC						; read port again
0001ab 2301                      	and		w, r17						; check value of pin again
0001ac f3e9                      	breq	hold_loop					; if button still pressed don't allow key to be continually read
                                 
0001ad 91ff                      	pop		zh
0001ae 91ef                      	pop		zl
                                 
0001af 912f                      	pop		r18
0001b0 911f                      	pop		r17
0001b1 905f                      	pop		r5
0001b2 904f                      	pop		r4
0001b3 903f                      	pop		r3
0001b4 902f                      	pop		r2
0001b5 910f                      	pop		w
0001b6 9508                      	ret
                                 
                                 ; Clears new_name variable in memory
                                 clear_name:
0001b7 93cf                      	push YL
0001b8 93df                      	push YH
0001b9 930f                      	push r16
0001ba 931f                      	push r17
0001bb e0d2                      	ldi  YH, high(new_name)
0001bc e0ca                      	ldi  YL, low(new_name)
0001bd e008                      	ldi  r16, 8
0001be e010                      	ldi  r17, 0
                                 delete:
0001bf 9319                      	st   Y+, r17
0001c0 950a                      	dec  r16
0001c1 3000                      	cpi  r16, 0
0001c2 f7e1                      	brne delete
0001c3 911f                      	pop  r17
0001c4 910f                      	pop  r16
0001c5 91ff                      	pop  ZH
0001c6 91ef                      	pop  ZL
0001c7 9508                      	ret
                                 
                                 ; Returns length of queue in r25:r24
                                 get_queue_len:
0001c8 93cf                      	push YL
0001c9 93df                      	push YH
0001ca e0d2                      	ldi  YH, high(num_patients)
0001cb e1c2                      	ldi  YL, low(num_patients)
0001cc 9189                      	ld   r24, Y+
0001cd 8198                      	ld   r25, Y                 ; Stores queue length (num_patients) in r25:r24
0001ce 91df                      	pop  YH
0001cf 91cf                      	pop  YL
                                 
                                 ; Enqueues new patient
                                 ; Assigns pid and returns pointer to location of
                                 ; patient struct in data memory.
                                 ; Should ideally be done with interrupts disabled
                                 ; to avoid race conditions.
                                 enqueue:
0001d0 93cf                      	push YL
0001d1 93df                      	push YH
0001d2 93ef                      	push ZL
0001d3 93ff                      	push ZH
0001d4 93af                      	push r26
0001d5 93bf                      	push r27
0001d6 e0d2                      	ldi  YH, high(last_patient)
0001d7 e1c8                      	ldi  YL, low(last_patient)
0001d8 91a9                      	ld   r26, Y+
0001d9 81b8                      	ld   r27, Y
0001da 01fd                      	movw Z, r26                    ; Store pointer to previous end of Q
0001db 961a                      	adiw r26, P_SIZE
0001dc 83b8                      	st   Y, r27
0001dd 93aa                      	st   -Y, r26                   ; Update pointer to last patient in queue
0001de 01ed                      	movw Y, r26                    ; Move Y pointer to new_patient
0001df 01cd                      	movw r24, r26				   ; Move address of new_patient to return registers
0001e0 91a1                      	ld   r26, Z+
0001e1 81b0                      	ld   r27, Z                    ; Load most recent pid
0001e2 9611                      	adiw r26, 1					   ; Increment
0001e3 93a9                      	st   Y+, r26
0001e4 93b9                      	st   Y+, r27			       ; Assign new pid to next patient
0001e5 e0f2
0001e6 e0ea
0001e7 e0a8
0001e8 91b1
0001e9 93b9
0001ea 95aa
0001eb 30a0
0001ec f7d9                      	read_name					   ; Reads in patient name from data memory
0001ed dfc9                      	rcall clear_name
0001ee e0d2                      	ldi  YH, high(num_patients)
0001ef e1c2                      	ldi  YL, low(num_patients)  
0001f0 91a9                      	ld   r26, Y+
0001f1 81b8                      	ld   r27, Y
0001f2 9611                      	adiw r26, 1                 
0001f3 83b8                      	st   Y, r27
0001f4 93aa                      	st   -Y, r26				   ; Update num_patients last                     
0001f5 91bf                      	pop  r27
0001f6 91af                      	pop  r26
0001f7 91ff                      	pop  ZH
0001f8 91ef                      	pop  ZL
0001f9 91df                      	pop  YH
0001fa 91cf                      	pop  YL
0001fb 9508                      	ret
                                 
                                 ; Dequeues first patient from queue and discards
                                 ; Does not return any values.
                                 ; Should ideally be done with interrupts disabled
                                 ; to avoid race conditions.	
                                 dequeue:
0001fc 93df                      	push YH
0001fd 93cf                      	push YL
0001fe 939f                      	push r25
0001ff 938f                      	push r24
000200 93bf                      	push r27
000201 93af                      	push r26
000202 e0d2                      	ldi  YH, high(num_patients)
000203 e1c2                      	ldi  YL, low(num_patients)      
000204 91a9                      	ld   r26, Y+
000205 81b8                      	ld   r27, Y
000206 9711                      	sbiw r26, 1
000207 83b8                      	st   Y, r27
000208 93aa                      	st  -Y, r26                     ; Update num_patients first
000209 e0d2                      	ldi  YH, high(first_patient)    
00020a e1c6                      	ldi  YL, low(first_patient)
00020b 9189                      	ld   r24, Y+					
00020c 8198                      	ld   r25, Y						; Store address of dequeued patient to be cleared
00020d 30a0                      	cpi  r26, 0
00020e f469                      	brne not_empty
00020f 30b0                      	cpi  r27, 0
000210 f459                      	brne not_empty                  ; If queue not empty, proceed
000211 e0d2                      	ldi  YH, high(first_patient)    
000212 e1c6                      	ldi  YL, low(first_patient)
000213 01de                      	movw r26, Y                     ; Else reset queue variables
000214 9618                      	adiw r26, 8
000215 93a9                      	st   Y+, r26
000216 93b9                      	st   Y+, r27
000217 e0b2                      	ldi  r27, high(init_pid)
000218 e1a4                      	ldi  r26, low(init_pid)
000219 93a9                      	st   Y+, r26
00021a 83b8                      	st   Y, r27
00021b c007                      	rjmp clear_patient
                                 not_empty:
00021c e0d2                      	ldi  YH, high(first_patient)    ; Increment first_patient pointer
00021d e1c6                      	ldi  YL, low(first_patient)
00021e 91a9                      	ld   r26, Y+
00021f 81b8                      	ld   r27, Y
000220 961a                      	adiw r26, P_SIZE
000221 83b8                      	st   Y, r27
000222 93aa                      	st   -Y, r26
                                 clear_patient:
000223 01ec                      	movw Y, r24                     
000224 e0aa                      	ldi r26, P_SIZE                 ; Then clear patient struct
000225 e0b0                      	ldi r27, 0
                                 clear_pt_loop:
000226 93b9                      	st  Y+, r27
000227 95aa                      	dec r26
000228 30a0                      	cpi r26, 0
000229 f7e1                      	brne clear_pt_loop
00022a 91af                      	pop r26
00022b 91bf                      	pop r27
00022c 918f                      	pop r24
00022d 919f                      	pop r25
00022e 91cf                      	pop YL
00022f 91df                      	pop YH
000230 9508                      	ret
                                 
                                 ;	; push button interrupts TODO change functionality
                                 ;	ldi		w, (0b10 << ISC00)
                                 ;	ori		w, (0b10 << ISC10)
                                 ;	sts		EICRA, w
                                 ;	out		PORTB, w
                                 ;
                                 ;	in		w, EIMSK
                                 ;	ori		w, (1 << INT0)
                                 ;	ori		w, (1 << INT1)
                                 ;	out		EIMSK, w
                                 
                                 pb0_ih:
000231 93ef                      	push	zl
000232 93ff                      	push	zh
000233 930f                      	push	w
000234 931f                      	push	r17
000235 932f                      	push	r18
000236 925f                      	push	zero
                                 
000237 b71f                      	in		r17, sreg
                                 
                                 	;debounce
                                 
000238 2455                      	clr		zero
                                 
000239 e0f2                      	ldi		zh, high(pb0_state)
00023a e0e0                      	ldi		zl, low(pb0_state)
                                 
00023b 8120                      	ld		r18, z
                                 
                                 
                                 pb0_state0:
00023c 3020                      	cpi		r18, 0
00023d f4d1                      	brne	pb0_state1
                                 
                                 	; call next patient
00023e d50d                      	rcall init_beeps
00023f d4e2                      	rcall beep_beep
                                 
                                 	; enable push button 1 (cancel appointment)
000240 e0f2                      	ldi		zh, high(pb1_state)
000241 e0e1                      	ldi		zl, low(pb1_state)
000242 8250                      	st		z, zero
                                 
000243 9100 0069                 	lds		w, EICRA
000245 7f03                      	andi	w, 0b11110011
000246 6008                      	ori		w, (0b10 << ISC10)
000247 9300 0069                 	sts		EICRA, w
                                 
000249 9100 0069                 	lds		w, EICRA
00024b 7f0c                      	andi	w, 0b11111100
00024c 6002                      	ori		w, (0b10 << ISC00)
                                 	
00024d b30d                      	in		w, EIMSK
00024e 6002                      	ori		w, (1 << INT1)
00024f bb0d                      	out		EIMSK, w
                                 
000250 b30d                      	in		w, EIMSK
000251 6001                      	ori		w, (1 << INT0)
000252 bb0d                      	out		EIMSK, w
                                 
                                 	; change push button state to 1
000253 e0f2                      	ldi		zh, high(pb0_state)
000254 e0e0                      	ldi		zl, low(pb0_state)
000255 e021                      	ldi		r18, 1
000256 8320                      	st		z, r18
                                 
000257 c026                      	rjmp	pb0_state_end
                                 pb0_state1:
000258 3021                      	cpi		r18, 1
000259 f4b1                      	brne	pb0_state2
                                 
                                 	; start timer for 1 second
00025a 9250 00a5                 	sts		TCNT4h, zero
00025c 9250 00a4                 	sts		TCNT4l, zero
00025e e004                      	ldi		w, 0b00000100
00025f 9300 00a1                 	sts		TCCR4B, w
000261 e001                      	ldi		w, (1 << TOIE4)
000262 9300 0072                 	sts		TIMSK4, w
                                 
                                 	; change push button to release
000264 9100 0069                 	lds		w, EICRA
000266 7f0c                      	andi	w, 0b11111100
000267 6003                      	ori		w, (0b11 << ISC00)
000268 9300 0069                 	sts		EICRA, w
                                 	
                                 	; change push button state to 2
00026a e022                      	ldi		r18, 2
00026b 8320                      	st		z, r18
                                 
                                 	; set timer functionality
00026c e0f2                      	ldi		zh, high(which_pb)
00026d e0e2                      	ldi		zl, low(which_pb)
00026e 8250                      	st		z, zero
                                 
00026f c00e                      	rjmp	pb0_state_end
                                 pb0_state2:
000270 3022                      	cpi		r18, 2
000271 f461                      	brne	pb0_state_end
                                 	
                                 	; turn off timer
000272 9250 00a1                 	sts		TCCR4B, zero
000274 9250 0072                 	sts		TIMSK4, zero
                                 
                                 	; change push button to push down
000276 9100 0069                 	lds		w, EICRA
000278 7f0c                      	andi	w, 0b11111100
000279 6002                      	ori		w, (0b10 << ISC00)
00027a 9300 0069                 	sts		EICRA, w
                                 
                                 	; return push button state to 1
00027c e021                      	ldi		r18, 1
00027d 8320                      	st		z, r18
                                 pb0_state_end:
                                 
00027e b925                      	out		PORTB, r18
                                 
00027f bf1f                      	out		sreg, r17
                                 
000280 905f                      	pop		zero
000281 912f                      	pop		r18
000282 911f                      	pop		r17
000283 910f                      	pop		w
000284 91ff                      	pop		zh
000285 91ef                      	pop		zl
000286 9518                      	reti
                                 
                                 pb1_ih:
000287 93ef                      	push	zl
000288 93ff                      	push	zh
000289 930f                      	push	w
00028a 931f                      	push	r17
00028b 932f                      	push	r18
00028c 925f                      	push	zero
                                 
00028d b71f                      	in		r17, sreg
                                 
                                 	;debounce
                                 
00028e 2455                      	clr		zero
                                 
00028f e0f2                      	ldi		zh, high(pb1_state)
000290 e0e1                      	ldi		zl, low(pb1_state)
                                 
000291 8120                      	ld		r18, z
                                 
                                 pb1_state0:
000292 3020                      	cpi		r18, 0
000293 f4b9                      	brne	pb1_state1
                                 
                                 	; start timer for 1 second
000294 9250 00a5                 	sts		TCNT4h, zero
000296 9250 00a4                 	sts		TCNT4l, zero
000298 e004                      	ldi		w, 0b00000100
000299 9300 00a1                 	sts		TCCR4B, w
00029b e001                      	ldi		w, (1 << TOIE4)
00029c 9300 0072                 	sts		TIMSK4, w
                                 
                                 	; change push button to release
00029e 9100 0069                 	lds		w, EICRA
0002a0 7f03                      	andi	w, 0b11110011
0002a1 600c                      	ori		w, (0b11 << ISC10)
0002a2 9300 0069                 	sts		EICRA, w
                                 	
                                 	; change push button state to 1
0002a4 9523                      	inc		r18
0002a5 8320                      	st		z, r18
                                 
                                 	; set timer functionality
0002a6 e0f2                      	ldi		zh, high(which_pb)
0002a7 e0e2                      	ldi		zl, low(which_pb)
0002a8 e001                      	ldi		w, 1
0002a9 8300                      	st		z, w
                                 
0002aa c00d                      	rjmp	pb1_state_end
                                 pb1_state1:
0002ab 3021                      	cpi		r18, 1
0002ac f459                      	brne	pb1_state_end
                                 	
                                 	; turn off timer
0002ad 9250 00a1                 	sts		TCCR4B, zero
0002af 9250 0072                 	sts		TIMSK4, zero
                                 
                                 	; change push button to push down
0002b1 9100 0069                 	lds		w, EICRA
0002b3 7f03                      	andi	w, 0b11110011
0002b4 6008                      	ori		w, (0b10 << ISC10)
0002b5 9300 0069                 	sts		EICRA, w
                                 
                                 	; return push button state to 0
0002b7 8250                      	st		z, zero
                                 pb1_state_end:
                                 	
0002b8 b925                      	out		PORTB, r18
0002b9 bf1f                      	out		sreg, r17
                                 
0002ba 905f                      	pop		zero
0002bb 912f                      	pop		r18
0002bc 911f                      	pop		r17
0002bd 910f                      	pop		w
0002be 91ff                      	pop		zh
0002bf 91ef                      	pop		zl
0002c0 9518                      	reti
                                 
                                 pb_timeout:
0002c1 93ef                      	push	zl
0002c2 93ff                      	push	zh
0002c3 930f                      	push	w
0002c4 931f                      	push	r17
0002c5 925f                      	push	zero
0002c6 932f                      	push	r18
                                 
0002c7 b71f                      	in		r17, sreg
                                 
0002c8 2455                      	clr		zero
                                 
0002c9 e0f2                      	ldi		zh, high(which_pb)
0002ca e0e2                      	ldi		zl, low(which_pb)
                                 
0002cb 8120                      	ld		r18, z
                                 
                                 timeout_pb0:
0002cc 3020                      	cpi		r18, 0
0002cd f409                      	brne	timeout_pb1
                                  
                                 	; start led countdown
                                 
0002ce c004                      	rjmp	end_timeout_sel
                                 timeout_pb1:
0002cf 3021                      	cpi		r18, 1
0002d0 f411                      	brne	end_timeout_sel
                                 
                                 	; play cancel stuff
0002d1 d47a                      	rcall init_beeps
0002d2 d464                      	rcall bee_eep
                                 end_timeout_sel:
                                 
                                 	; pop patient from queue
0002d3 df28                      	rcall	dequeue
0002d4 d14c                      	rcall	LCD_DISPLAY_MODE
0002d5 d48d                      	rcall	display_front_patient
                                 
0002d6 e0f2                      	ldi		zh, high(num_patients)
0002d7 e1e2                      	ldi		zl, low(num_patients)
0002d8 8100                      	ld		w, z
0002d9 3000                      	cpi		w, 0
0002da f419                      	brne	timeout_no_patients
0002db b30d                      	in		w, EIMSK
0002dc 7f0e                      	andi	w, 0b11111110
0002dd bb0d                      	out		EIMSK, w
                                 timeout_no_patients:
                                 
                                 	; remove pb1 interrupt
0002de b30d                      	in		w, EIMSK
0002df 7f0d                      	andi	w, 0b11111101	
0002e0 bb0d                      	out		EIMSK, w
                                 
                                 	; reset pb0 interrupt
                                 
                                 	; turn off timer
0002e1 9250 00a1                 	sts		TCCR4B, zero
0002e3 9250 0072                 	sts		TIMSK4, zero
                                 
0002e5 bf1f                      	out		sreg, r17
                                 
0002e6 912f                      	pop		r18
0002e7 905f                      	pop		zero
0002e8 911f                      	pop		r17
0002e9 910f                      	pop		w
0002ea 91ff                      	pop		zh
0002eb 91ef                      	pop		zl
0002ec 9518                      	reti
                                 
                                 keypad_timeout:
0002ed 93ef                      	push	zl
0002ee 93ff                      	push	zh
0002ef 92af                      	push	arg0
0002f0 92bf                      	push	arg1
0002f1 938f                      	push	r24
0002f2 933f                      	push	r19
0002f3 930f                      	push	w
0002f4 925f                      	push	zero
                                 
0002f5 b70f                      	in		w, sreg
                                 
0002f6 930f                      	push	w
                                 
0002f7 2455                      	clr		zero
0002f8 9250 0091                 	sts		TCCR3B, zero
0002fa 9250 0071                 	sts		TIMSK3, zero					; disable_keypad_timer()
                                 
0002fc e0f2                      	ldi		zh, high(new_name)				; new_name[new_name_cur] = keypad_to_ascii(last_key_pressed, times_key_pressed)
0002fd e0ea                      	ldi		zl, low(new_name)
                                 
0002fe 0de3                      	add		zl, new_name_cur
0002ff 1df5                      	adc		zh, zero
                                 
000300 2ca6                      	mov		arg0, last_key_pressed
000301 2cb7                      	mov		arg1, times_key_pressed
000302 de57                      	rcall	keypad_to_ascii
                                 
000303 8380                      	st		z, r24
                                 
000304 2f38                      	mov		r19, r24
000305 d364                      	rcall	WRITE
                                 
000306 e0f2                      	ldi		zh, high(is_keypad_timeout)
000307 e0e9                      	ldi		zl, low(is_keypad_timeout)
000308 e001                      	ldi		w, 1
000309 8300                      	st		z, w
                                 
00030a 910f                      	pop		w
                                 
00030b bf0f                      	out		sreg, w
                                 
00030c 905f                      	pop		zero
00030d 910f                      	pop		w
00030e 913f                      	pop		r19
00030f 918f                      	pop		r24
000310 90bf                      	pop		arg1
000311 90af                      	pop		arg0
000312 91ff                      	pop		zh
000313 91ef                      	pop		zl
000314 9518                      	reti
                                 	
                                 ; initialise the LCD
                                 INITIALISE_LCD:
                                 	; prologue
000315 930f                      	push r16
000316 931f                      	push r17
000317 932f                      	push r18
000318 933f                      	push r19
000319 93cf                      	push YL
00031a 93df                      	push YH
00031b b7cd                      	in YL, SPL
00031c b7de                      	in YH, SPH
00031d 9721                      	sbiw Y, 1
                                 
00031e ef1f                      	ser r17
00031f bb10                      	out DDRF, r17			; LCD r16
000320 b911                      	out DDRA, r17			; LCD Ctrl
000321 2711                      	clr r17
000322 bb11                      	out PORTF, r17
000323 b912                      	out PORTA, r17
                                 	;
000324 e928                      	ldi r18, low(15000)		; delay 15ms
000325 e33a                      	ldi r19, high(15000)
000326 e013
000327 951a
000328 0000
000329 f7e9
00032a 5021
00032b 4030
00032c f7c9                      	delay
00032d e308                      	ldi r16, 0b00111000	; 2 x 5 x 7 r18 = 1, 8bits | N = 1, 2-line | F = 0, 5 x 7 dots
00032e bb01
00032f 9817
000330 9815
000331 0000
000332 9a16
000333 0000
000334 0000
000335 0000
000336 9816
000337 0000
000338 0000
000339 0000                      	lcd_write_cmd			; 1st function cmd set
                                 
00033a e024                      	ldi r18, low(4100)		; delay 4.1ms
00033b e130                      	ldi r19, high(4100)
00033c e013
00033d 951a
00033e 0000
00033f f7e9
000340 5021
000341 4030
000342 f7c9                      	delay
000343 bb01
000344 9817
000345 9815
000346 0000
000347 9a16
000348 0000
000349 0000
00034a 0000
00034b 9816
00034c 0000
00034d 0000
00034e 0000                      	lcd_write_cmd			; 2nd function cmd set
                                 
00034f e624                      	ldi r18, low(100)		; delay 4.1ms
000350 e030                      	ldi r19, high(100)
000351 e013
000352 951a
000353 0000
000354 f7e9
000355 5021
000356 4030
000357 f7c9                      	delay
000358 bb01
000359 9817
00035a 9815
00035b 0000
00035c 9a16
00035d 0000
00035e 0000
00035f 0000
000360 9816
000361 0000
000362 0000
000363 0000                      	lcd_write_cmd			; 3rd function cmd set
000364 bb01
000365 9817
000366 9815
000367 0000
000368 9a16
000369 0000
00036a 0000
00036b 0000
00036c 9816
00036d 0000
00036e 0000
00036f 0000                      	lcd_write_cmd			; final function cmd set
                                 	;
000370 2711
000371 bb10
000372 9817
000373 9a15
000374 0000
000375 9a16
000376 0000
000377 0000
000378 0000
000379 b11f
00037a 9816
00037b fd17
00037c cff7
00037d 0000
00037e 0000
00037f 0000
000380 9817
000381 9815
000382 ef1f
000383 bb10
000384 0000
000385 0000
000386 0000                      	lcd_wait_busy			; wait until ready
                                 
000387 e008                      	ldi r16, 0b00001000	; LCD display off
000388 bb01
000389 9817
00038a 9815
00038b 0000
00038c 9a16
00038d 0000
00038e 0000
00038f 0000
000390 9816
000391 0000
000392 0000
000393 0000                      	lcd_write_cmd
000394 2711
000395 bb10
000396 9817
000397 9a15
000398 0000
000399 9a16
00039a 0000
00039b 0000
00039c 0000
00039d b11f
00039e 9816
00039f fd17
0003a0 cff7
0003a1 0000
0003a2 0000
0003a3 0000
0003a4 9817
0003a5 9815
0003a6 ef1f
0003a7 bb10
0003a8 0000
0003a9 0000
0003aa 0000                      	lcd_wait_busy
                                 
0003ab e001                      	ldi r16, 0b00000001	; LCD display clear
0003ac bb01
0003ad 9817
0003ae 9815
0003af 0000
0003b0 9a16
0003b1 0000
0003b2 0000
0003b3 0000
0003b4 9816
0003b5 0000
0003b6 0000
0003b7 0000                      	lcd_write_cmd
0003b8 2711
0003b9 bb10
0003ba 9817
0003bb 9a15
0003bc 0000
0003bd 9a16
0003be 0000
0003bf 0000
0003c0 0000
0003c1 b11f
0003c2 9816
0003c3 fd17
0003c4 cff7
0003c5 0000
0003c6 0000
0003c7 0000
0003c8 9817
0003c9 9815
0003ca ef1f
0003cb bb10
0003cc 0000
0003cd 0000
0003ce 0000                      	lcd_wait_busy
                                 
0003cf e006                      	ldi r16, 0b00000110	; increment, no shift
0003d0 bb01
0003d1 9817
0003d2 9815
0003d3 0000
0003d4 9a16
0003d5 0000
0003d6 0000
0003d7 0000
0003d8 9816
0003d9 0000
0003da 0000
0003db 0000                      	lcd_write_cmd
0003dc 2711
0003dd bb10
0003de 9817
0003df 9a15
0003e0 0000
0003e1 9a16
0003e2 0000
0003e3 0000
0003e4 0000
0003e5 b11f
0003e6 9816
0003e7 fd17
0003e8 cff7
0003e9 0000
0003ea 0000
0003eb 0000
0003ec 9817
0003ed 9815
0003ee ef1f
0003ef bb10
0003f0 0000
0003f1 0000
0003f2 0000                      	lcd_wait_busy
                                 
0003f3 e00e                      	ldi r16, 0b00001110	; LCD display on, no cursor, blink
0003f4 bb01
0003f5 9817
0003f6 9815
0003f7 0000
0003f8 9a16
0003f9 0000
0003fa 0000
0003fb 0000
0003fc 9816
0003fd 0000
0003fe 0000
0003ff 0000                      	lcd_write_cmd
000400 2711
000401 bb10
000402 9817
000403 9a15
000404 0000
000405 9a16
000406 0000
000407 0000
000408 0000
000409 b11f
00040a 9816
00040b fd17
00040c cff7
00040d 0000
00040e 0000
00040f 0000
000410 9817
000411 9815
000412 ef1f
000413 bb10
000414 0000
000415 0000
000416 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
000417 9621                      	adiw Y, 1
000418 bfde                      	out SPH, YH
000419 bfcd                      	out SPL, YL
00041a 91df                      	pop YH
00041b 91cf                      	pop YL
00041c 913f                      	pop r19
00041d 912f                      	pop r18
00041e 911f                      	pop r17
00041f 910f                      	pop r16
000420 9508                      	ret
                                 
                                 ; clears the LCD display and sets it to display mode
                                 LCD_DISPLAY_MODE:
                                 	; prologue
000421 930f                      	push r16
000422 931f                      	push r17
000423 932f                      	push r18
000424 933f                      	push r19
000425 93cf                      	push YL
000426 93df                      	push YH
000427 b7cd                      	in YL, SPL
000428 b7de                      	in YH, SPH
000429 9721                      	sbiw Y, 1
00042a 9a11                      	set_strobe				; STROBE on
                                 	
00042b e001                      	ldi r16, 0b00000001	; clear display
00042c bb01
00042d 9817
00042e 9815
00042f 0000
000430 9a16
000431 0000
000432 0000
000433 0000
000434 9816
000435 0000
000436 0000
000437 0000                      	lcd_write_cmd
000438 2711
000439 bb10
00043a 9817
00043b 9a15
00043c 0000
00043d 9a16
00043e 0000
00043f 0000
000440 0000
000441 b11f
000442 9816
000443 fd17
000444 cff7
000445 0000
000446 0000
000447 0000
000448 9817
000449 9815
00044a ef1f
00044b bb10
00044c 0000
00044d 0000
00044e 0000                      	lcd_wait_busy
                                 
00044f e43e                      	ldi r19, 'N'			; display "Next Patient:"
000450 d219                      	rcall WRITE
000451 e635                      	ldi r19, 'e'
000452 d217                      	rcall WRITE
000453 e738                      	ldi r19, 'x'
000454 d215                      	rcall WRITE
000455 e734                      	ldi r19, 't'
000456 d213                      	rcall WRITE
000457 e230                      	ldi r19, ' '
000458 d211                      	rcall WRITE
000459 e530                      	ldi r19, 'P'
00045a d20f                      	rcall WRITE
00045b e631                      	ldi r19, 'a'
00045c d20d                      	rcall WRITE
00045d e734                      	ldi r19, 't'
00045e d20b                      	rcall WRITE
00045f e639                      	ldi r19, 'i'
000460 d209                      	rcall WRITE
000461 e635                      	ldi r19, 'e'
000462 d207                      	rcall WRITE
000463 e63e                      	ldi r19, 'n'
000464 d205                      	rcall WRITE
000465 e734                      	ldi r19, 't'
000466 d203                      	rcall WRITE
000467 e33a                      	ldi r19, ':'
000468 d201                      	rcall WRITE
                                 	
                                 	;epilogue
000469 9621                      	adiw Y, 1
00046a bfde                      	out SPH, YH
00046b bfcd                      	out SPL, YL
00046c 91df                      	pop YH
00046d 91cf                      	pop YL
00046e 913f                      	pop r19
00046f 912f                      	pop r18
000470 911f                      	pop r17
000471 910f                      	pop r16
000472 9508                      	ret
                                 
                                 ; shifts cursor to bottom left of screen
                                 DISPLAY_BOTTOM_LEFT:
                                 	; prologue
000473 930f                      	push r16
000474 931f                      	push r17
000475 932f                      	push r18
000476 933f                      	push r19
000477 93cf                      	push YL
000478 93df                      	push YH
000479 b7cd                      	in YL, SPL
00047a b7de                      	in YH, SPH
00047b 9721                      	sbiw Y, 1
                                 
00047c ec00                      	ldi r16, 0b11000000	; Set DDRAM address to bottom left
00047d bb01
00047e 9817
00047f 9815
000480 0000
000481 9a16
000482 0000
000483 0000
000484 0000
000485 9816
000486 0000
000487 0000
000488 0000                      	lcd_write_cmd
000489 2711
00048a bb10
00048b 9817
00048c 9a15
00048d 0000
00048e 9a16
00048f 0000
000490 0000
000491 0000
000492 b11f
000493 9816
000494 fd17
000495 cff7
000496 0000
000497 0000
000498 0000
000499 9817
00049a 9815
00049b ef1f
00049c bb10
00049d 0000
00049e 0000
00049f 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
0004a0 9621                      	adiw Y, 1
0004a1 bfde                      	out SPH, YH
0004a2 bfcd                      	out SPL, YL
0004a3 91df                      	pop YH
0004a4 91cf                      	pop YL
0004a5 913f                      	pop r19
0004a6 912f                      	pop r18
0004a7 911f                      	pop r17
0004a8 910f                      	pop r16
0004a9 9508                      	ret
                                 
                                 ;expects unsigned int as parameter in r19 and displays bottom right aligned number
                                 DISPLAY_NUMBER_RIGHT:
                                 	; prologue
0004aa 930f                      	push r16
0004ab 931f                      	push r17
0004ac 932f                      	push r18
0004ad 933f                      	push r19
0004ae 93cf                      	push YL
0004af 93df                      	push YH
0004b0 b7cd                      	in YL, SPL
0004b1 b7de                      	in YH, SPH
0004b2 9721                      	sbiw Y, 1
                                 
0004b3 ec0f                      	ldi r16, 0b11001111	; Set DDRAM address to bottom right
0004b4 bb01
0004b5 9817
0004b6 9815
0004b7 0000
0004b8 9a16
0004b9 0000
0004ba 0000
0004bb 0000
0004bc 9816
0004bd 0000
0004be 0000
0004bf 0000                      	lcd_write_cmd
0004c0 2711
0004c1 bb10
0004c2 9817
0004c3 9a15
0004c4 0000
0004c5 9a16
0004c6 0000
0004c7 0000
0004c8 0000
0004c9 b11f
0004ca 9816
0004cb fd17
0004cc cff7
0004cd 0000
0004ce 0000
0004cf 0000
0004d0 9817
0004d1 9815
0004d2 ef1f
0004d3 bb10
0004d4 0000
0004d5 0000
0004d6 0000                      	lcd_wait_busy
0004d7 e006                      	ldi r16, 0b00000110	; INCREMENT, no shift
0004d8 bb01
0004d9 9817
0004da 9815
0004db 0000
0004dc 9a16
0004dd 0000
0004de 0000
0004df 0000
0004e0 9816
0004e1 0000
0004e2 0000
0004e3 0000                      	lcd_write_cmd
0004e4 2711
0004e5 bb10
0004e6 9817
0004e7 9a15
0004e8 0000
0004e9 9a16
0004ea 0000
0004eb 0000
0004ec 0000
0004ed b11f
0004ee 9816
0004ef fd17
0004f0 cff7
0004f1 0000
0004f2 0000
0004f3 0000
0004f4 9817
0004f5 9815
0004f6 ef1f
0004f7 bb10
0004f8 0000
0004f9 0000
0004fa 0000                      	lcd_wait_busy
                                 	
0004fb 303a                      	cpi r19, 10
0004fc f408                      	brsh tens
0004fd c04b                      	rjmp display
                                 tens:
0004fe e100                      	ldi r16, 0b00010000	; shift cursor left 1
0004ff bb01
000500 9817
000501 9815
000502 0000
000503 9a16
000504 0000
000505 0000
000506 0000
000507 9816
000508 0000
000509 0000
00050a 0000                      	lcd_write_cmd
00050b 2711
00050c bb10
00050d 9817
00050e 9a15
00050f 0000
000510 9a16
000511 0000
000512 0000
000513 0000
000514 b11f
000515 9816
000516 fd17
000517 cff7
000518 0000
000519 0000
00051a 0000
00051b 9817
00051c 9815
00051d ef1f
00051e bb10
00051f 0000
000520 0000
000521 0000                      	lcd_wait_busy
000522 3634                      	cpi r19, 100
000523 f408                      	brsh hundreds
000524 c024                      	rjmp display
                                 hundreds:
000525 e100                      	ldi r16, 0b00010000	; shift cursor left 1
000526 bb01
000527 9817
000528 9815
000529 0000
00052a 9a16
00052b 0000
00052c 0000
00052d 0000
00052e 9816
00052f 0000
000530 0000
000531 0000                      	lcd_write_cmd
000532 2711
000533 bb10
000534 9817
000535 9a15
000536 0000
000537 9a16
000538 0000
000539 0000
00053a 0000
00053b b11f
00053c 9816
00053d fd17
00053e cff7
00053f 0000
000540 0000
000541 0000
000542 9817
000543 9815
000544 ef1f
000545 bb10
000546 0000
000547 0000
000548 0000                      	lcd_wait_busy
                                 display:
000549 2f83                      	mov r24, r19
00054a d151                      	rcall decimal_conversion
                                 	;epilogue
00054b 9621                      	adiw Y, 1
00054c bfde                      	out SPH, YH
00054d bfcd                      	out SPL, YL
00054e 91df                      	pop YH
00054f 91cf                      	pop YL
000550 913f                      	pop r19
000551 912f                      	pop r18
000552 911f                      	pop r17
000553 910f                      	pop r16
000554 9508                      	ret
                                 
                                 ; clears LCD display and sets it to entry mode
                                 LCD_ENTRY_MODE:
                                 	; prologue
000555 930f                      	push r16
000556 931f                      	push r17
000557 932f                      	push r18
000558 933f                      	push r19
000559 93cf                      	push YL
00055a 93df                      	push YH
00055b b7cd                      	in YL, SPL
00055c b7de                      	in YH, SPH
00055d 9721                      	sbiw Y, 1
00055e 9811                      	clr_strobe				; STROBE on
                                 	
00055f e001                      	ldi r16, 0b00000001	; clear display
000560 bb01
000561 9817
000562 9815
000563 0000
000564 9a16
000565 0000
000566 0000
000567 0000
000568 9816
000569 0000
00056a 0000
00056b 0000                      	lcd_write_cmd
00056c 2711
00056d bb10
00056e 9817
00056f 9a15
000570 0000
000571 9a16
000572 0000
000573 0000
000574 0000
000575 b11f
000576 9816
000577 fd17
000578 cff7
000579 0000
00057a 0000
00057b 0000
00057c 9817
00057d 9815
00057e ef1f
00057f bb10
000580 0000
000581 0000
000582 0000                      	lcd_wait_busy
                                 
000583 e435                      	ldi r19, 'E'			; display "Next Patient:"
000584 d0e5                      	rcall WRITE
000585 e63e                      	ldi r19, 'n'
000586 d0e3                      	rcall WRITE
000587 e734                      	ldi r19, 't'
000588 d0e1                      	rcall WRITE
000589 e635                      	ldi r19, 'e'
00058a d0df                      	rcall WRITE
00058b e732                      	ldi r19, 'r'
00058c d0dd                      	rcall WRITE
00058d e230                      	ldi r19, ' '
00058e d0db                      	rcall WRITE
00058f e43e                      	ldi r19, 'N'
000590 d0d9                      	rcall WRITE
000591 e631                      	ldi r19, 'a'
000592 d0d7                      	rcall WRITE
000593 e63d                      	ldi r19, 'm'
000594 d0d5                      	rcall WRITE
000595 e635                      	ldi r19, 'e'
000596 d0d3                      	rcall WRITE
000597 e33a                      	ldi r19, ':'
000598 d0d1                      	rcall WRITE
                                 	
                                 	;epilogue
000599 9621                      	adiw Y, 1
00059a bfde                      	out SPH, YH
00059b bfcd                      	out SPL, YL
00059c 91df                      	pop YH
00059d 91cf                      	pop YL
00059e 913f                      	pop r19
00059f 912f                      	pop r18
0005a0 911f                      	pop r17
0005a1 910f                      	pop r16
0005a2 9508                      	ret
                                 
                                 ; expects unsigned int as parameter in r19 and displays descriptive message to patient
                                 ENTRY_MESSAGE:
                                 	; prologue
0005a3 930f                      	push r16
0005a4 931f                      	push r17
0005a5 932f                      	push r18
0005a6 933f                      	push r19
0005a7 938f                      	push r24
0005a8 93cf                      	push YL
0005a9 93df                      	push YH
0005aa b7cd                      	in YL, SPL
0005ab b7de                      	in YH, SPH
0005ac 9721                      	sbiw Y, 1
                                 
0005ad e001                      	ldi r16, 0b00000001	; clear display
0005ae bb01
0005af 9817
0005b0 9815
0005b1 0000
0005b2 9a16
0005b3 0000
0005b4 0000
0005b5 0000
0005b6 9816
0005b7 0000
0005b8 0000
0005b9 0000                      	lcd_write_cmd
0005ba 2711
0005bb bb10
0005bc 9817
0005bd 9a15
0005be 0000
0005bf 9a16
0005c0 0000
0005c1 0000
0005c2 0000
0005c3 b11f
0005c4 9816
0005c5 fd17
0005c6 cff7
0005c7 0000
0005c8 0000
0005c9 0000
0005ca 9817
0005cb 9815
0005cc ef1f
0005cd bb10
0005ce 0000
0005cf 0000
0005d0 0000                      	lcd_wait_busy
                                 
0005d1 2f83                      	mov r24, r19
                                 
0005d2 e539                      	ldi r19, 'Y'
0005d3 d096                      	rcall WRITE
0005d4 e63f                      	ldi r19, 'o'
0005d5 d094                      	rcall WRITE
0005d6 e735                      	ldi r19, 'u'
0005d7 d092                      	rcall WRITE
0005d8 e230                      	ldi r19, ' '
0005d9 d090                      	rcall WRITE
0005da e631                      	ldi r19, 'a'
0005db d08e                      	rcall WRITE
0005dc e732                      	ldi r19, 'r'
0005dd d08c                      	rcall WRITE
0005de e635                      	ldi r19, 'e'
0005df d08a                      	rcall WRITE
0005e0 e230                      	ldi r19, ' '
0005e1 d088                      	rcall WRITE
0005e2 e730                      	ldi r19, 'p'
0005e3 d086                      	rcall WRITE
0005e4 e631                      	ldi r19, 'a'
0005e5 d084                      	rcall WRITE
0005e6 e734                      	ldi r19, 't'
0005e7 d082                      	rcall WRITE
0005e8 e639                      	ldi r19, 'i'
0005e9 d080                      	rcall WRITE
0005ea e635                      	ldi r19, 'e'
0005eb d07e                      	rcall WRITE
0005ec e63e                      	ldi r19, 'n'
0005ed d07c                      	rcall WRITE
0005ee e734                      	ldi r19, 't'
0005ef d07a                      	rcall WRITE
                                 
0005f0 de82                      	rcall DISPLAY_BOTTOM_LEFT
                                 
0005f1 e63e                      	ldi r19, 'n'
0005f2 d077                      	rcall WRITE
0005f3 e735                      	ldi r19, 'u'
0005f4 d075                      	rcall WRITE
0005f5 e63d                      	ldi r19, 'm'
0005f6 d073                      	rcall WRITE
0005f7 e632                      	ldi r19, 'b'
0005f8 d071                      	rcall WRITE
0005f9 e635                      	ldi r19, 'e'
0005fa d06f                      	rcall WRITE
0005fb e732                      	ldi r19, 'r'
0005fc d06d                      	rcall WRITE
0005fd e33a                      	ldi r19, ':'
0005fe d06b                      	rcall WRITE
0005ff e230                      	ldi r19, ' '
000600 d069                      	rcall WRITE
000601 d09a                      	rcall decimal_conversion
                                 	;epilogue
000602 9621                      	adiw Y, 1
000603 bfde                      	out SPH, YH
000604 bfcd                      	out SPL, YL
000605 91df                      	pop YH
000606 91cf                      	pop YL
000607 918f                      	pop r24
000608 913f                      	pop r19
000609 912f                      	pop r18
00060a 911f                      	pop r17
00060b 910f                      	pop r16
00060c 9508                      	ret
                                 
                                 ; delete 1 character from patient input in LCD entry mode
                                 BACKSPACE:
                                 	; prologue
00060d 930f                      	push r16
00060e 931f                      	push r17
00060f 932f                      	push r18
000610 933f                      	push r19
000611 93cf                      	push YL
000612 93df                      	push YH
000613 b7cd                      	in YL, SPL
000614 b7de                      	in YH, SPH
000615 9721                      	sbiw Y, 1
                                 
000616 e100                      	ldi r16, 0b00010000	; shift cursor left 1
000617 bb01
000618 9817
000619 9815
00061a 0000
00061b 9a16
00061c 0000
00061d 0000
00061e 0000
00061f 9816
000620 0000
000621 0000
000622 0000                      	lcd_write_cmd
000623 2711
000624 bb10
000625 9817
000626 9a15
000627 0000
000628 9a16
000629 0000
00062a 0000
00062b 0000
00062c b11f
00062d 9816
00062e fd17
00062f cff7
000630 0000
000631 0000
000632 0000
000633 9817
000634 9815
000635 ef1f
000636 bb10
000637 0000
000638 0000
000639 0000                      	lcd_wait_busy
                                 
00063a e230                      	ldi r19, ' '			; delete letter
00063b d02e                      	rcall WRITE
                                 
00063c e100                      	ldi r16, 0b00010000	; shift cursor left 1
00063d bb01
00063e 9817
00063f 9815
000640 0000
000641 9a16
000642 0000
000643 0000
000644 0000
000645 9816
000646 0000
000647 0000
000648 0000                      	lcd_write_cmd
000649 2711
00064a bb10
00064b 9817
00064c 9a15
00064d 0000
00064e 9a16
00064f 0000
000650 0000
000651 0000
000652 b11f
000653 9816
000654 fd17
000655 cff7
000656 0000
000657 0000
000658 0000
000659 9817
00065a 9815
00065b ef1f
00065c bb10
00065d 0000
00065e 0000
00065f 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
000660 9621                      	adiw Y, 1
000661 bfde                      	out SPH, YH
000662 bfcd                      	out SPL, YL
000663 91df                      	pop YH
000664 91cf                      	pop YL
000665 913f                      	pop r19
000666 912f                      	pop r18
000667 911f                      	pop r17
000668 910f                      	pop r16
000669 9508                      	ret
                                 
                                 ; expects an ASCII character in r19 and displays to current cursor position
                                 WRITE:
                                 	; write to r16
                                 
00066a 930f                      	push r16
00066b 931f                      	push r17
00066c 93cf                      	push YL
00066d 93df                      	push YH
00066e b7cd                      	in YL, SPL
00066f b7de                      	in YH, SPH
000670 9721                      	sbiw Y, 1
                                 
000671 bb31
000672 9a17
000673 9815
000674 0000
000675 9a16
000676 0000
000677 0000
000678 0000
000679 9816
00067a 0000
00067b 0000
00067c 0000                      	lcd_write_data
00067d 2711
00067e bb10
00067f 9817
000680 9a15
000681 0000
000682 9a16
000683 0000
000684 0000
000685 0000
000686 b11f
000687 9816
000688 fd17
000689 cff7
00068a 0000
00068b 0000
00068c 0000
00068d 9817
00068e 9815
00068f ef1f
000690 bb10
000691 0000
000692 0000
000693 0000                      	lcd_wait_busy
                                 
                                 	;epilogue
000694 9621                      	adiw Y, 1
000695 bfde                      	out SPH, YH
000696 bfcd                      	out SPL, YL
000697 91df                      	pop YH
000698 91cf                      	pop YL
000699 911f                      	pop r17
00069a 910f                      	pop r16
00069b 9508                      	ret
                                 
                                 ; expects digit in r19, ASCII '0' in r23
                                 ;.macro display_digit
                                 ;	add r19, r23              ; Convert to ASCII ('0' = 0x30)
                                 ;	rcall WRITE
                                 ;.endmacro
                                 ;;expects dividend in r26 and divisor in r25
                                 ;.macro divide
                                 ;	clr r27                   ; Clear quotient register
                                 ;divide_loop:
                                 ;    cp r26, r25               ; Compare r26 (dividend) with r25 (divisor)
                                 ;    brlo divide_done           ; If r26 < r25, exit loop
                                 ;
                                 ;    sub r26, r25              ; Subtract divisor from dividend
                                 ;    inc r27                   ; Increment quotient
                                 ;    rjmp divide_loop           ; Repeat until r26 < r28
                                 ;divide_done:
                                 ;	nop
                                 ;.endmacro
                                 ; parameter passed into r24
                                 ; conflict registers: 23, 25, 26, 27, 19
                                 decimal_conversion:
                                 ;prologue
00069c 933f                      	push r19
00069d 937f                      	push r23
00069e 938f                      	push r24
00069f 939f                      	push r25
0006a0 93af                      	push r26
0006a1 93bf                      	push r27
0006a2 93cf                      	push YL
0006a3 93df                      	push YH
0006a4 b7cd                      	in YL, SPL
0006a5 b7de                      	in YH, SPH
0006a6 9721                      	sbiw Y, 1
                                 
0006a7 e370                      	ldi r23, '0'				; load ASCII '0'
0006a8 2fa8                      	mov r26, r24				; Load result (y) r24 into register r26.
                                 
0006a9 e694                      	ldi r25, 100				; Load 100 for division
0006aa 27bb
0006ab 17a9
0006ac f018
0006ad 1ba9
0006ae 95b3
0006af cffb
0006b0 0000                          divide				; Call divide subroutine
0006b1 2f3b                      	mov r19, r27				; Get the quotient (hundreds digit) in r19
0006b2 3030                          cpi r19, 0					; Check if it's zero
0006b3 f409                      	brne from_hundreds
0006b4 c00e                      	rjmp no_hundreds
                                 
                                 from_hundreds:
0006b5 0f37
0006b6 dfb3                      	display_digit
0006b7 e09a                      	ldi r25, 10					; Load 10 for division
0006b8 27bb
0006b9 17a9
0006ba f018
0006bb 1ba9
0006bc 95b3
0006bd cffb
0006be 0000                          divide				; Call divide subroutine
0006bf 2f3b                      	mov r19, r27				; move quotient to r19
0006c0 0f37
0006c1 dfa8                      	display_digit				; always display tens if from hundreds
0006c2 c00e                      	rjmp display_ones_digit
                                 
                                 no_hundreds:
0006c3 e09a                      	ldi r25, 10					; Load 10 for division
0006c4 27bb
0006c5 17a9
0006c6 f018
0006c7 1ba9
0006c8 95b3
0006c9 cffb
0006ca 0000                          divide				; Call divide subroutine
0006cb 30b0                      	cpi r27, 0                ; Check if it's zero
0006cc f021                      	breq display_ones_digit
0006cd 2f3b                      	mov r19, r27
0006ce 0f37
0006cf df9a                      	display_digit
0006d0 c000                      	rjmp display_ones_digit
                                 
                                 display_ones_digit:
0006d1 2f3a                      	mov r19, r26
0006d2 0f37
0006d3 df96                      	display_digit
                                 
                                 	;epilogue
0006d4 9621                      	adiw Y, 1
0006d5 bfde                          out SPH, YH
0006d6 bfcd                          out SPL, YL
0006d7 91df                          pop YH
0006d8 91cf                          pop YL
0006d9 91bf                          pop r27
0006da 91af                          pop r26
0006db 919f                          pop r25
0006dc 918f                      	pop r24
0006dd 917f                          pop r23
0006de 913f                          pop r19
0006df 9508                          ret
                                 
                                 ; Interrupt Service Routine for Timer 0 overflow
                                 timer0ovf:
0006e0 930f                      	push w
0006e1 b70f                      	in w, SREG
0006e2 930f                      	push w
0006e3 93df                      	push YH
0006e4 93cf                      	push YL
0006e5 939f                      	push r25
0006e6 938f                      	push r24						
0006e7 933f                      	push r19						; Prologue ends
0006e8 e0c3                      	ldi  YL, low(TempCounter) 
0006e9 e0d2                      	ldi  YH, high(TempCounter)		; Y pointer points to temp counter
0006ea 9189                      	ld   r24, Y+					; Load the value of the temporary counter.
0006eb 8198                      	ld   r25, Y
0006ec 9601                      	adiw r25:r24, 1					; Increase the temporary counter by one.
0006ed 3e88                      	cpi  r24, low(1000)			; Check if (r25:r24)=1000
0006ee f541                      	brne not_second
0006ef 3093                      	cpi  r25, high(1000)
0006f0 f531                      	brne not_second
0006f1 e0c3
0006f2 e0d2
0006f3 2700
0006f4 9309
0006f5 8308                      	clear_word TempCounter
0006f6 e0c5                      	ldi  YL, low(SecondCounter)		; Load the address of the second counter.
0006f7 e0d2                      	ldi  YH, high(SecondCounter)		
0006f8 9189                      	ld   r24, Y+					; Load the value of the second counter.
0006f9 8198                      	ld   r25, Y
0006fa 9601                      	adiw r25:r24, 1					; Increase the second counter by one.
0006fb 8398                      	st   Y, r25						; Store the value of the second counter.
0006fc 938a                      	st   -Y, r24
0006fd 2f38                      	mov  r19, r24					; Save value of second counter
0006fe e0d2                      	ldi  YH, high(BeepState)
0006ff e0c7                      	ldi  YL, low(BeepState)
000700 8188                      	ld	 r24, Y
000701 3081                      	cpi  r24, 1
000702 f011                      	breq do_beep_beep
000703 3082                      	cpi  r24, 2
000704 f051                      	breq do_bee_eep
                                 do_beep_beep:
000705 e0d2                      	ldi YH, high(BeepSeconds)
000706 e0c8                      	ldi YL, low(BeepSeconds)
000707 8108                      	ld  w, Y
000708 1730                      	cp  r19, w
000709 f059                      	breq end_beep_beep
00070a e008                      	ldi w, 0b00001000				; Toggle motor on/off
00070b 2740                      	eor motor_state, w
00070c 9340 010a                 	sts DDRL, motor_state
00070e c00a                      	rjmp endif
                                 do_bee_eep:
00070f e0d2                      	ldi YH, high(BeepSeconds)
000710 e0c8                      	ldi YL, low(BeepSeconds)
000711 8108                      	ld  w, Y
000712 1730                      	cp  r19, w
000713 f009                      	breq end_beep_beep
000714 c004                      	rjmp endif
                                 end_beep_beep:
000715 d036                      	rcall init_beeps
000716 c002                      	rjmp endif
                                 not_second:
000717 8398                      	st   Y, r25
000718 938a                      	st  -Y, r24
                                 endif:
000719 913f                      	pop  r19
00071a 918f                      	pop  r24
00071b 919f                      	pop  r25
00071c 91cf                      	pop  YL
00071d 91df                      	pop  YH
00071e 910f                      	pop  w
00071f bf0f                      	out  SREG, w
000720 910f                      	pop  w
000721 9518                      	reti
                                 
                                 ; Play beep_beep tone for 10 seconds
                                 beep_beep:
000722 93df                      	push YH
000723 93cf                      	push YL
000724 930f                      	push w
000725 e0d2                      	ldi  YH, high(BeepState)
000726 e0c7                      	ldi  YL, low(BeepState)
000727 e001                      	ldi  w, 1                       ; Store 1 for beep beep mode
000728 8308                      	st   Y, w
000729 e0d2                      	ldi  YH, high(BeepSeconds)
00072a e0c8                      	ldi  YL, low(BeepSeconds)
00072b e00a                      	ldi  w, 10                      ; Number of seconds to beep for
00072c 8308                      	st   Y, w
00072d e001                      	ldi  w, 1<<TOIE0				; Enable timer 0 overflow interrupt
00072e 9300 006e                 	sts  TIMSK0, w
000730 e008                      	ldi  w, 0b00001000
000731 9300 010a                 	sts  DDRL, w					; Bit 3 will function as OC5A. (Motor on)
000733 910f                      	pop  w
000734 91cf                      	pop  YL
000735 91df                      	pop  YH
000736 9508                      	ret
                                 
                                 ; Play bee_eep tone for 3 seconds
                                 bee_eep:
000737 93df                      	push YH
000738 93cf                      	push YL
000739 930f                      	push w
00073a e0d2                      	ldi  YH, high(BeepState)
00073b e0c7                      	ldi  YL, low(BeepState)
00073c e002                      	ldi  w, 2                       ; Store 2 for bee_eep mode
00073d 8308                      	st   Y, w
00073e e0d2                      	ldi  YH, high(BeepSeconds)
00073f e0c8                      	ldi  YL, low(BeepSeconds)
000740 e003                      	ldi  w, 3                       ; Number of seconds to beep for
000741 8308                      	st   Y, w
000742 e001                      	ldi  w, 1<<TOIE0				; Enable timer 0 overflow interrupt
000743 9300 006e                 	sts  TIMSK0, w
000745 e008                      	ldi  w, 0b00001000
000746 9300 010a                 	sts  DDRL, w					; Bit 3 will function as OC5A. (Motor on)
000748 910f                      	pop  w
000749 91cf                      	pop  YL
00074a 91df                      	pop  YH
00074b 9508                      	ret
                                 
                                 init_beeps:
00074c 93df                      	push YH
00074d 93cf                      	push YL
00074e 930f                      	push w
00074f 2700                      	clr  w							; Disable timer 0 overflow interrupt
000750 9300 006e                 	sts  TIMSK0, w
000752 e0d2                      	ldi  YH, high(BeepState)
000753 e0c7                      	ldi  YL, low(BeepState)
000754 2700                      	clr  w
000755 8308                      	st   Y, w						; Set beep state to 0
000756 e0c3
000757 e0d2
000758 2700
000759 9309
00075a 8308                      	clear_word TempCounter
00075b 2700                      	clr  w							; Motor off
00075c 9300 010a                 	sts  DDRL, w
00075e 2744                      	clr  motor_state
00075f 910f                      	pop  w
000760 91cf                      	pop  YL
000761 91df                      	pop  YH
000762 9508                      	ret
                                 
                                 ; display the front patient in data memory to LCD display mode
                                 display_front_patient:
000763 93cf                      	push YL
000764 93df                      	push YH
000765 93ef                      	push ZL
000766 93ff                      	push ZH
000767 930f                      	push r16
000768 933f                      	push r19
000769 939f                      	push r25
00076a 938f                      	push r24
                                 
00076b e0f2                      	ldi ZH, high(first_patient)		; load memory addr
00076c e1e6                      	ldi ZL, low(first_patient)
00076d 9181                      	ld	r24, Z+
00076e 8190                      	ld  r25, Z
00076f 01ec                      	movw Y, r24
000770 9139                      	ld  r19, Y+ 					; load lower byte of pID into r19
000771 dd38                      	rcall DISPLAY_NUMBER_RIGHT		; display bottom righ aligned pID
000772 dd00                      	rcall DISPLAY_BOTTOM_LEFT		; move cursor to bottom left
000773 9621                      	adiw Y, 1						; skip over higher byte of pID
                                 	; loop over reamining 8 bytes of chars
000774 e008                      	ldi r16, 8
                                 display_loop:
000775 9139                      	ld r19, Y+
000776 3030                      	cpi r19, 0
000777 f021                      	breq end_display
000778 def1                      	rcall write
000779 950a                      	dec r16
00077a 3000                      	cpi r16, 0
00077b f7c9                      	brne display_loop
                                 end_display:
                                 	;epilogue
00077c 918f                      	pop r24
00077d 919f                      	pop r25
00077e 913f                      	pop r19
00077f 910f                      	pop r16
000780 91ff                      	pop ZH
000781 91ef                      	pop ZL
000782 91df                      	pop YH
000783 91cf                      	pop YL
000784 9508                      	ret
                                 
                                 value_lookup:
000785 0201
000786 4103
000787 0504
000788 4206
000789 0807
00078a 4309
00078b 002a
00078c 4423                      	.db		1, 2, 3, 0x41, 4, 5, 6, 0x42, 7, 8, 9, 0x43, 0x2A, 0, 0x23, 0x44
                                 ascii_lookup:
00078d 6261
00078e 6463
00078f 6665
000790 6867
000791 6a69
000792 6c6b
000793 6e6d
000794 706f
000795 7372
000796 7574
000797 7776
000798 7978


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  82 z  :  30 r0 :   0 r1 :   0 r2 :  12 r3 :  20 r4 :  18 
r5 :  54 r6 :  10 r7 :  18 r8 :   8 r9 :   0 r10:   8 r11:   9 r12:   3 
r13:   0 r14:   0 r15:   0 r16: 282 r17: 157 r18:  53 r19:  98 r20:   3 
r21:   0 r22:   0 r23:   7 r24:  48 r25:  33 r26:  44 r27:  34 r28:  75 
r29:  75 r30:  47 r31:  47 
Registers used: 26 out of 35 (74.3%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   5 add   :  12 adiw  :  19 and   :   3 
andi  :  10 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  15 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 brlt  :   1 brmi  :   0 
brne  :  40 brpl  :   0 brsh  :   4 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   : 121 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  57 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  28 cpc   :   0 
cpi   :  25 cpse  :   0 dec   :  13 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  48 inc   :  16 jmp   :   5 ld    :  32 ldd   :   0 ldi   : 228 
lds   :   7 lpm   :   4 lsl   :   3 lsr   :   2 mov   :  40 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   : 301 or    :   0 
ori   :  10 out   :  91 pop   : 140 push  : 140 rcall :  87 ret   :  19 
reti  :   5 rjmp  :  46 rol   :   0 ror   :   0 sbc   :   0 sbci  :   4 
sbi   :  53 sbic  :   0 sbis  :   0 sbiw  :  10 sbr   :   1 sbrc  :  16 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :  17 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  53 std   :   0 sts   :  42 sub   :   3 subi  :   4 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 47 out of 116 (40.5%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000f34   3690     42   3732  262144   1.4%
[.dseg] 0x000200 0x00021a      0     26     26    8192   0.3%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
