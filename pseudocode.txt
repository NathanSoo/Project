P_SIZE = 10  ; Size of patient struct
BeepState    ; Stores which beep sequence the motor should be running, if any

; initialise
initialise_queue()
initialise_motor()
initialise_lcd()
initialise_keypad()
initialise_buttons()
initialise_other_pins()
initialise_timer()

entry_mode = false
queue = new_queue()
next_patient = null

new_name[8] = {0, 0, ...}
new_name_cur = 0;

last_key_pressed = null
times_key_pressed = 0

keypad_timer_setup()

while true
    ; poll keypad
    key_pressed = scan_keypad()

    ; handle keypad entry

    ; switch display mode to entry mode if A button is pressed
    if entry_mode is false and key_pressed == 'A'
        entry_mode = true
        LCD_ENTRY_MODE()
        DISPLAY_BOTTOM_LEFT()
    else
        ; backspace patient's name
        if key_pressed == 'B' and new_name_cur > 0
            keypad_timer_stop()
            new_name_cur --
            new_name[new_name_cur] = 0
            BACKSPACE()

            last_key_pressed = null
            times_key_pressed = 0
        
        ; clear new patient name
        else if key_pressed == 'C'
            keypad_timer_stop()
            new_name_cur = 0

            initialise_array()
            LCD_ENRTY_MODE()
            DISPLAY_BOTTOM_LEFT()

            last_key_pressed = null
            times_key_pressed = 0

        ; enter new patient into queue
        else if key_pressed == 'D'
            enqueue(new_name)
            LCD_DISPLAY_MODE()
            if num_patients() > 0
                initialise_pb0(rising_edge)
            
            DISPLAY_FRONT_PATIENT()

            keypad_timer_stop()

            initialise_array(new_name, 8)
            new_name_cur = 0
            last_key_pressed = null
            times_key_pressed = 0
            entry_mode = false
        
        ; do nothing
        else if key_pressed == 'A'
            pass
        else if key_pressed > 'C'
            pass
        else if key_pressed == '1'
            pass

        ; check if character limit is reached
        else if new_name_cur < 8
            keypad_timer_restart()

            ; handle different cases of number/alphabet key presses
            if times_key_pressed == 0
                last_key_pressed = key_pressed
                times_key_pressed = 1
            else if last_key_pressed == key_pressed
                times_key_pressed ++
                if key_pressed == '9' and times_key_pressed == 5
                    times_key_pressed = 1
                else
                    if times_key_pressed == 4
                        times_key_pressed = 1
            else
                new_name[new_name_cur] = keypad_to_ascii(last_key_pressed, times_key_pressed)
                WRITE()
                new_name_cur ++
                last_key_pressed = key_pressed
                times_key_pressed = 1

; Fill array with 0s
function initialise_array(array, length)
    i = 8
    while i > 0
        array[i] = 0
        i--

; Get ascii value of letter from lookup table
; The number/alphabet key pressed
; The number of times the key has been pressed consecutively
function keypad_to_ascii(last_key_pressed, times_key_pressed)

; Poll keypad and return index of button pressed
function scan_keypad()

;----------------------
; Queue functions
;----------------------
function initialise_queue():
    num_patients = 0
    first_patient = last_patient = 0

function get_queue_len()
    return num_patients

; Enqueues new patient.
; Assigns pid and returns pointer to location of
; new patient struct in data memory.
function enqueue()
    temp = previous_end
    last_patient = temp + P_SIZE
    last_patient.pid = temp.pid + 1
    last_patient.name = read_name()        ; Reads name from temp_name variable in data memory
    num_patients += 1

    return last_patient                    ; Return address of newly enqueued patient in data memory

; Dequeues first patient from queue and discards
; Does not return any values.
function dequeue()
    num_patients -= 1
    temp = previous_start
    if is_empty:
        reset_queue
    else:
        first_patient -= P_SIZE
        clear_memory(temp)

;----------------------
; Motor functions
;----------------------
; Restore motor to off state and clear variables
; Used for both initialising and ending a beep sequence
function init_beeps():
    disable_timer0ovf
    BeepState = 0
    motor_off

; On for 1 second, off for 1 second x 10 seconds
function beep_beep()
    BeepState = 1
    enable_timer0ovf
    motor_on

; On for 3 seconds
function bee_eep()
    BeepState = 2
    enable_timer0ovf
    motor_on  

ascii_characters[] = {'a', 'b', ...}

; Counts 1 second
; Used for timing motor 'beeps'
isr timer0ovf
    TempCounter += 1
    if TempCounter == 1000:            ; i.e. 1 second has passed
        TempCounter = 0
        SecondsCounter += 1
        if BeepState == 1:            ; i.e. beep-beep sequence is in progress
            if seconds_elapsed == 10:  ; i.e. sequence over
                init_beeps()
            else:
                toggle_motor
        if BeepState == 2:            ; i.e. bee-eep sequence is in progress
            if seconds_elapsed == 3:
                init_beeps()  

;----------------------
; LCD Functions
;----------------------
def INTIALISE_LCD()			            ; initialises LCD display
def LCD_DISPLAY_MODE()		            ; clears the LCD display and sets it to display mode
def DISPLAY_BOTTOM_LEFT()               ; moves the cursor to bottom left
def DISPLAY_NUMBER_RIGHT()	            ; takes unsigned int as parameter in r19 and displays bottom right aligned number
def LCD_ENTRY_MODE()		            ; clears the LCD display and sets it to entry mode
def ENTRY_MESSAGE()			            ; takes unsigned int as parameter in r19 and displays descriptive message showing patient number
def BACKSPACE()				            ; delete 1 char from patient input
def WRITE(char c)			            ; write 1 char to LCD at current cursor position
def DISPLAY_FRONT_PATIENT()	            ; peeks at the front of the queue and writes the patient name and pID to LCD display mode

;----------------------
; Interrupt Service Routines
;----------------------
pb0_state = 0
pb1_state = 0
which_pb = 0

; handle next patient button
isr pb0_ih
    if pb0_state == 0
        initialise_pb1(rising_edge)
        pb0_state = 1
    else if pb0_state == 1
        initialise_pb_timeout(1 second)
        which_pb = 0

        initialise_pb0(falling_edge)
        pb0_state = 2
    else if pb0_state == 2
        disable_pb_timeout()
        initialise_pb0(rising_edge)
        pb0_state = 1

; handle cancel patient button
isr pb1_ih
    if pb1_state == 0
        initialise_pb_timeout(1 second)
        which_pb = 1

        initialise_pb1(falling_edge)
        pb1_state = 1
    else if pb1_state == 1
        disable_pb_timeout()
        initialise_pb1(rising_edge)
        pb1_state = 0

; handle button hold down
isr pb_timeout
    if which_pb == 0
        init_beeps()
    else if which_pb == 1
        init_beeps()
        bee_eep()
    
    dequeue()
    LCD_DISPLAY_MODE()
    DISPLAY_FRONT_PATIENT()
    if num_patients() == 0
        disable_pb0()
    disable_pb1()
    pb0_state = 0
    pb1_state = 0
    disable_pb_timeout()

; handle keypad timeout
isr keypad_timeout
    disable_keypad_timer()
    new_name[new_name_cur] = keypad_to_ascii(last_key_pressed, times_key_pressed)
    new_name_cur ++
    last_key_pressed = null
    times_key_pressed = 0
